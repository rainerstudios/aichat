Directory structure:
└── docs/
    ├── components.json
    ├── eslint.config.ts
    ├── mdx-components.tsx
    ├── next-env.d.ts
    ├── next.config.ts
    ├── package.json
    ├── postcss.config.js
    ├── source.config.ts
    ├── tsconfig.json
    ├── app/
    │   ├── global.css
    │   ├── layout.tsx
    │   ├── provider.tsx
    │   ├── source.tsx
    │   ├── (home)/
    │   │   ├── DocsRuntimeProvider.tsx
    │   │   ├── layout.tsx
    │   │   ├── page.tsx
    │   │   ├── blog/
    │   │   │   ├── page.tsx
    │   │   │   └── [slug]/
    │   │   │       └── page.tsx
    │   │   ├── examples/
    │   │   │   ├── page.tsx
    │   │   │   ├── ai-sdk/
    │   │   │   │   └── page.tsx
    │   │   │   ├── artifacts/
    │   │   │   │   └── page.tsx
    │   │   │   ├── chatgpt/
    │   │   │   │   └── page.tsx
    │   │   │   ├── claude/
    │   │   │   │   └── page.tsx
    │   │   │   ├── form-demo/
    │   │   │   │   └── page.tsx
    │   │   │   ├── mem0/
    │   │   │   │   └── page.tsx
    │   │   │   ├── modal/
    │   │   │   │   └── page.tsx
    │   │   │   ├── perplexity/
    │   │   │   │   └── page.tsx
    │   │   │   └── stockbroker/
    │   │   │       └── page.tsx
    │   │   ├── home/
    │   │   │   └── StarPill.tsx
    │   │   ├── llms-full.txt/
    │   │   │   └── route.ts
    │   │   ├── llms.mdx/
    │   │   │   └── [[...slug]]/
    │   │   │       └── route.ts
    │   │   ├── llms.txt/
    │   │   │   └── route.ts
    │   │   ├── pricing/
    │   │   │   ├── open-source-card.tsx
    │   │   │   ├── page.tsx
    │   │   │   └── pricing-section.tsx
    │   │   ├── shadcn-ui/
    │   │   │   └── page.tsx
    │   │   └── showcase/
    │   │       └── page.tsx
    │   ├── api/
    │   │   ├── chat/
    │   │   │   └── route.ts
    │   │   ├── entelligence/
    │   │   │   └── route.ts
    │   │   ├── entelligence-history/
    │   │   │   └── route.ts
    │   │   └── search/
    │   │       └── route.ts
    │   ├── docs/
    │   │   ├── layout.config.tsx
    │   │   ├── layout.tsx
    │   │   └── [[...slug]]/
    │   │       └── page.tsx
    │   └── static.json/
    │       └── route.ts
    ├── components/
    │   ├── github-stars.tsx
    │   ├── artifacts/
    │   │   └── Artifacts.tsx
    │   ├── assistant-ui/
    │   │   ├── assistant-modal.tsx
    │   │   ├── attachment.tsx
    │   │   ├── markdown-text.tsx
    │   │   ├── syntax-highlighter.tsx
    │   │   ├── thread-list.tsx
    │   │   ├── thread.tsx
    │   │   └── tooltip-icon-button.tsx
    │   ├── chatgpt/
    │   │   └── ChatGPT.tsx
    │   ├── claude/
    │   │   └── Claude.tsx
    │   ├── docs/
    │   │   ├── DataAttributesTable.tsx
    │   │   ├── index.ts
    │   │   ├── KeyboardTable.tsx
    │   │   ├── ParametersTable.tsx
    │   │   └── parameters/
    │   │       ├── context.tsx
    │   │       └── runtime.tsx
    │   ├── docs-chat/
    │   │   ├── assistant-modal.tsx
    │   │   ├── DocsChat.tsx
    │   │   ├── syntax-highlighter.tsx
    │   │   └── thread.tsx
    │   ├── genui/
    │   │   └── GenUI.tsx
    │   ├── magicui/
    │   │   ├── marquee.tsx
    │   │   ├── shine-border.tsx
    │   │   └── terminal.tsx
    │   ├── modal/
    │   │   └── ModalChat.tsx
    │   ├── perplexity/
    │   │   ├── Perplexity.tsx
    │   │   └── thread.tsx
    │   ├── samples/
    │   │   ├── assistant-modal-sample.tsx
    │   │   ├── attachment-sample.tsx
    │   │   ├── branching-sample.tsx
    │   │   ├── sample-frame.tsx
    │   │   ├── speech-sample.tsx
    │   │   ├── thread-sample.tsx
    │   │   ├── threadlist-sample.tsx
    │   │   └── tool-ui-sample.tsx
    │   ├── shadcn/
    │   │   ├── ModelPicker.tsx
    │   │   └── Shadcn.tsx
    │   ├── testimonials/
    │   │   ├── TestimonialContainer.tsx
    │   │   └── testimonials.ts
    │   ├── tools/
    │   │   └── weather-tool.tsx
    │   └── ui/
    │       ├── avatar.tsx
    │       ├── badge.tsx
    │       ├── button.tsx
    │       ├── card.tsx
    │       ├── dialog.tsx
    │       ├── resizable.tsx
    │       ├── select.tsx
    │       ├── sheet.tsx
    │       └── tooltip.tsx
    ├── content/
    │   ├── blog/
    │   │   ├── 2024-07-29-hello/
    │   │   │   └── index.mdx
    │   │   ├── 2024-09-11/
    │   │   │   ├── index.mdx
    │   │   │   └── redirect.tsx
    │   │   ├── 2024-12-15/
    │   │   │   ├── index.mdx
    │   │   │   └── redirect.tsx
    │   │   └── 2025-01-31-changelog/
    │   │       └── index.mdx
    │   ├── docs/
    │   │   ├── about-assistantui.mdx
    │   │   ├── architecture.mdx
    │   │   ├── getting-started.mdx
    │   │   ├── index.mdx
    │   │   ├── mcp-docs-server.mdx
    │   │   ├── meta.json
    │   │   ├── react-compatibility.mdx
    │   │   ├── api-reference/
    │   │   │   ├── context.tsx
    │   │   │   ├── meta.json
    │   │   │   ├── overview.mdx
    │   │   │   ├── context-providers/
    │   │   │   │   ├── AssistantRuntimeProvider.mdx
    │   │   │   │   └── TextMessagePartProvider.mdx
    │   │   │   ├── integrations/
    │   │   │   │   ├── meta.json
    │   │   │   │   ├── react-hook-form.mdx
    │   │   │   │   └── vercel-ai-sdk.mdx
    │   │   │   ├── primitives/
    │   │   │   │   ├── ActionBar.mdx
    │   │   │   │   ├── AssistantModal.mdx
    │   │   │   │   ├── Attachment.mdx
    │   │   │   │   ├── BranchPicker.mdx
    │   │   │   │   ├── Composer.mdx
    │   │   │   │   ├── composition.mdx
    │   │   │   │   ├── Error.mdx
    │   │   │   │   ├── Message.mdx
    │   │   │   │   ├── MessagePart.mdx
    │   │   │   │   ├── meta.json
    │   │   │   │   └── Thread.mdx
    │   │   │   └── runtimes/
    │   │   │       ├── AssistantRuntime.mdx
    │   │   │       ├── AttachmentRuntime.mdx
    │   │   │       ├── ComposerRuntime.mdx
    │   │   │       ├── MessagePartRuntime.mdx
    │   │   │       ├── MessageRuntime.mdx
    │   │   │       ├── meta.json
    │   │   │       ├── ThreadListItemRuntime.mdx
    │   │   │       ├── ThreadListRuntime.mdx
    │   │   │       └── ThreadRuntime.mdx
    │   │   ├── cloud/
    │   │   │   ├── authorization.mdx
    │   │   │   ├── meta.json
    │   │   │   ├── overview.mdx
    │   │   │   └── persistence/
    │   │   │       ├── ai-sdk.mdx
    │   │   │       ├── langgraph.mdx
    │   │   │       └── meta.json
    │   │   ├── concepts/
    │   │   │   ├── architecture.mdx
    │   │   │   ├── meta.json
    │   │   │   ├── runtime-layer.mdx
    │   │   │   └── why.mdx
    │   │   ├── copilots/
    │   │   │   ├── make-assistant-readable.mdx
    │   │   │   ├── make-assistant-tool-ui.mdx
    │   │   │   ├── make-assistant-tool.mdx
    │   │   │   ├── meta.json
    │   │   │   ├── model-context.mdx
    │   │   │   ├── motivation.mdx
    │   │   │   └── use-assistant-instructions.mdx
    │   │   ├── guides/
    │   │   │   ├── Attachments.mdx
    │   │   │   ├── Branching.mdx
    │   │   │   ├── Editing.mdx
    │   │   │   ├── Latex.mdx
    │   │   │   ├── meta.json
    │   │   │   ├── Speech.mdx
    │   │   │   ├── Tools.mdx
    │   │   │   └── ToolUI.mdx
    │   │   ├── legacy/
    │   │   │   └── styled/
    │   │   │       ├── AssistantModal.mdx
    │   │   │       ├── Decomposition.mdx
    │   │   │       ├── Markdown.mdx
    │   │   │       ├── meta.json
    │   │   │       ├── Scrollbar.mdx
    │   │   │       ├── Thread.mdx
    │   │   │       └── ThreadWidth.mdx
    │   │   ├── migrations/
    │   │   │   ├── deprecation-policy.mdx
    │   │   │   ├── meta.json
    │   │   │   ├── v0-11.mdx
    │   │   │   ├── v0-7.mdx
    │   │   │   ├── v0-8.mdx
    │   │   │   └── v0-9.mdx
    │   │   ├── runtimes/
    │   │   │   ├── helicone.mdx
    │   │   │   ├── langserve.mdx
    │   │   │   ├── meta.json
    │   │   │   ├── pick-a-runtime.mdx
    │   │   │   ├── ai-sdk/
    │   │   │   │   ├── meta.json
    │   │   │   │   ├── rsc.mdx
    │   │   │   │   ├── use-assistant-hook.mdx
    │   │   │   │   ├── use-chat-hook.mdx
    │   │   │   │   └── use-chat.mdx
    │   │   │   ├── custom/
    │   │   │   │   ├── external-store.mdx
    │   │   │   │   ├── local.mdx
    │   │   │   │   └── meta.json
    │   │   │   ├── langgraph/
    │   │   │   │   ├── index.mdx
    │   │   │   │   ├── meta.json
    │   │   │   │   └── tutorial/
    │   │   │   │       ├── index.mdx
    │   │   │   │       ├── introduction.mdx
    │   │   │   │       ├── meta.json
    │   │   │   │       ├── part-1.mdx
    │   │   │   │       ├── part-2.mdx
    │   │   │   │       └── part-3.mdx
    │   │   │   └── mastra/
    │   │   │       ├── full-stack-integration.mdx
    │   │   │       ├── meta.json
    │   │   │       ├── overview.mdx
    │   │   │       └── separate-server-integration.mdx
    │   │   └── ui/
    │   │       ├── AssistantModal.mdx
    │   │       ├── AssistantSidebar.mdx
    │   │       ├── Attachment.mdx
    │   │       ├── Markdown.mdx
    │   │       ├── Mermaid.mdx
    │   │       ├── meta.json
    │   │       ├── ParentIdGrouping.mdx
    │   │       ├── Scrollbar.mdx
    │   │       ├── SyntaxHighlighting.mdx
    │   │       ├── Thread.mdx
    │   │       ├── ThreadList.mdx
    │   │       ├── ToolFallback.mdx
    │   │       ├── ToolGroup.mdx
    │   │       └── primitives/
    │   │           └── Thread.mdx
    │   └── types-to-generate/
    │       └── typeDocs.ts
    ├── lib/
    │   ├── get-llm-text.ts
    │   ├── useMediaQuery.ts
    │   └── utils.ts
    └── scripts/
        └── generate-docs.mts

================================================
FILE: apps/docs/components.json
================================================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/global.css",
    "baseColor": "zinc",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}


================================================
FILE: apps/docs/eslint.config.ts
================================================
export { default } from "@assistant-ui/x-buildutils/eslint";



================================================
FILE: apps/docs/mdx-components.tsx
================================================
import type { MDXComponents } from "mdx/types";
import { Accordion, Accordions } from "fumadocs-ui/components/accordion";
import { Callout } from "fumadocs-ui/components/callout";
import { Tab, Tabs } from "fumadocs-ui/components/tabs";
import { TypeTable } from "fumadocs-ui/components/type-table";
import defaultComponents from "fumadocs-ui/mdx";
import {
  CodeBlock,
  type CodeBlockProps,
  Pre,
} from "fumadocs-ui/components/codeblock";
import { Popup, PopupContent, PopupTrigger } from "fumadocs-twoslash/ui";

import "fumadocs-twoslash/twoslash.css";

export function getMDXComponents(components: MDXComponents): MDXComponents {
  return {
    ...defaultComponents,
    Popup,
    PopupContent,
    PopupTrigger,
    pre: (props: CodeBlockProps) => (
      <CodeBlock {...props}>
        <Pre className="max-h-[400px]">{props.children}</Pre>
      </CodeBlock>
    ),
    Tabs,
    Tab,
    Callout,
    TypeTable,
    Accordion,
    Accordions,
    blockquote: (props) => <Callout>{props.children}</Callout>,
    ...components,
  };
}



================================================
FILE: apps/docs/next-env.d.ts
================================================
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.



================================================
FILE: apps/docs/next.config.ts
================================================
import { createMDX } from "fumadocs-mdx/next";
import { NextConfig } from "next";

const config: NextConfig = {
  transpilePackages: ["@assistant-ui/*"],
  serverExternalPackages: ["twoslash"],
  rewrites: async () => ({
    beforeFiles: [
      {
        source: "/umami/:path*",
        destination: "https://assistant-ui-umami.vercel.app/:path*",
      },
      {
        source: "/docs/:path*.mdx",
        destination: "/llms.mdx/:path*",
      },
    ],
    fallback: [
      {
        source: "/registry/:path*",
        destination: "https://ui.shadcn.com/registry/:path*",
      },
    ],
  }),
};

const withMDX = createMDX();

export default withMDX(config);



================================================
FILE: apps/docs/package.json
================================================
{
  "name": "@assistant-ui/docs",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "build": "pnpm build:docs && next build",
    "build:docs": "tsx ./scripts/generate-docs.mts",
    "dev": "next dev --turbopack",
    "start": "next start",
    "lint": "next lint",
    "postinstall": "fumadocs-mdx"
  },
  "dependencies": {
    "@ai-sdk/openai": "^1.3.22",
    "@ai-sdk/provider": "^1.1.3",
    "@ai-sdk/react": "^1.2.12",
    "@assistant-ui/react": "workspace:*",
    "@assistant-ui/react-ai-sdk": "workspace:*",
    "@assistant-ui/react-langgraph": "workspace:*",
    "@assistant-ui/react-markdown": "workspace:*",
    "@assistant-ui/react-syntax-highlighter": "workspace:*",
    "@assistant-ui/styles": "workspace:*",
    "@assistant-ui/x-buildutils": "workspace:*",
    "@langchain/core": "^0.3.61",
    "@langchain/langgraph-sdk": "^0.0.85",
    "@radix-ui/react-avatar": "^1.1.10",
    "@radix-ui/react-dialog": "^1.1.14",
    "@radix-ui/react-icons": "^1.3.2",
    "@radix-ui/react-select": "^2.2.5",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-tooltip": "^1.2.7",
    "@radix-ui/themes": "^3.2.1",
    "@shikijs/transformers": "^3.7.0",
    "@theguild/remark-mermaid": "^0.3.0",
    "@upstash/ratelimit": "^2.0.5",
    "@vercel/kv": "^3.0.0",
    "ai": "^4.3.16",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "dotenv": "^16.6.0",
    "fast-glob": "^3.3.3",
    "fumadocs-core": "15.5.5",
    "fumadocs-mdx": "11.6.9",
    "fumadocs-twoslash": "^3.1.4",
    "fumadocs-ui": "15.5.5",
    "geist": "^1.4.2",
    "gray-matter": "^4.0.3",
    "jsonwebtoken": "^9.0.2",
    "lucide-react": "^0.523.0",
    "mermaid": "^11.7.0",
    "motion": "^12.19.1",
    "nanoid": "5.1.5",
    "next": "15.3.4",
    "openai": "^5.8.1",
    "react": "19.1.0",
    "react-dom": "19.1.0",
    "react-resizable-panels": "^3.0.3",
    "react-syntax-highlighter": "^15.6.1",
    "remark": "^15.0.1",
    "remark-gfm": "^4.0.1",
    "remark-mdx": "^3.1.0",
    "remark-stringify": "^11.0.0",
    "tailwind-merge": "^3.3.1",
    "tw-animate-css": "^1.3.4",
    "uuid": "^11.1.0",
    "zod": "^3.25.67",
    "zustand": "^5.0.6"
  },
  "devDependencies": {
    "@tailwindcss/postcss": "^4.1.11",
    "@types/jsonwebtoken": "^9.0.10",
    "@types/mdx": "^2.0.13",
    "@types/node": "^24.0.4",
    "@types/react": "^19.1.8",
    "@types/react-dom": "^19.1.6",
    "@types/react-syntax-highlighter": "^15.5.13",
    "eslint": "^9",
    "eslint-config-next": "15.3.4",
    "postcss": "^8.5.6",
    "tailwindcss": "^4.1.11",
    "ts-morph": "^26.0.0",
    "tsx": "^4.20.3",
    "typescript": "^5.8.3"
  }
}



================================================
FILE: apps/docs/postcss.config.js
================================================
module.exports = {
  plugins: {
    "@tailwindcss/postcss": {},
  },
};



================================================
FILE: apps/docs/source.config.ts
================================================
import {
  defineConfig,
  defineDocs,
  defineCollections,
  frontmatterSchema,
} from "fumadocs-mdx/config";
import { rehypeCodeDefaultOptions } from "fumadocs-core/mdx-plugins";
import { transformerTwoslash } from "fumadocs-twoslash";
import { transformerMetaHighlight } from "@shikijs/transformers";
import { z } from "zod";
import { remarkMermaid } from "@theguild/remark-mermaid";
import { createFileSystemTypesCache } from "fumadocs-twoslash/cache-fs";

export const { docs, meta } = defineDocs({
  dir: "content/docs",
  docs: {
    schema: frontmatterSchema,
  },
});

export const blog = defineCollections({
  dir: "content/blog",
  schema: frontmatterSchema.extend({
    author: z.string(),
    date: z.string().date().or(z.date()).optional(),
  }),
  type: "doc",
});

export default defineConfig({
  mdxOptions: {
    remarkPlugins: [remarkMermaid],
    rehypeCodeOptions: {
      themes: {
        light: "catppuccin-latte",
        dark: "catppuccin-mocha",
      },
      langs: ["js", "bash"],
      transformers: [
        ...(rehypeCodeDefaultOptions.transformers ?? []),

        transformerMetaHighlight(),
        transformerTwoslash({
          typesCache: createFileSystemTypesCache(),
          twoslashOptions: {
            compilerOptions: {
              jsx: 1, // JSX preserve
              paths: {
                "@/*": ["./*"],
              },
            },
          },
        }),
      ],
    },
  },
});



================================================
FILE: apps/docs/tsconfig.json
================================================
{
  "extends": "@assistant-ui/x-buildutils/ts/base",
  "compilerOptions": {
    "target": "ES6",
    "module": "ESNext",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "allowJs": true,
    "strictNullChecks": true,
    "jsx": "preserve",
    "paths": {
      "@/*": ["./*"],
      "@assistant-ui/*": ["../../packages/*/src"],
      "@assistant-ui/react/*": ["../../packages/react/src/*"],
      "assistant-stream": ["../../packages/assistant-stream/src"],
      "assistant-stream/*": ["../../packages/assistant-stream/src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}



================================================
FILE: apps/docs/app/global.css
================================================
@import "tailwindcss";
@import "tw-animate-css";
@import "fumadocs-ui/css/neutral.css";
@import "fumadocs-ui/css/preset.css";

@layer base {
  @import "@assistant-ui/styles/index.css";
  @import "@assistant-ui/styles/modal.css";
}

/* relative to the CSS file, make sure it's correct for your app */
@source '../node_modules/fumadocs-ui/dist/**/*.js';
@source '../../registry/components/**/*.js';

@custom-variant dark (&:where(.dark, .dark *));

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 240 10% 3.9%;

    --card: 0 0% 100%;
    --card-foreground: 240 10% 3.9%;

    --popover: 0 0% 100%;
    --popover-foreground: 240 10% 3.9%;

    --primary: 240 5.9% 10%;
    --primary-foreground: 0 0% 98%;

    --secondary: 240 4.8% 95.9%;
    --secondary-foreground: 240 5.9% 10%;

    --muted: 240 4.8% 95.9%;
    --muted-foreground: 240 3.8% 46.1%;

    --accent: 240 4.8% 95.9%;
    --accent-foreground: 240 5.9% 10%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;

    --border: 240 5.9% 90%;
    --input: 240 5.9% 90%;
    --ring: 240 10% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;

    --radius: 0.5rem;
  }

  .dark {
    --background: 240 10% 3.9%;
    --foreground: 0 0% 98%;

    --card: 240 10% 3.9%;
    --card-foreground: 0 0% 98%;

    --popover: 240 10% 3.9%;
    --popover-foreground: 0 0% 98%;

    --primary: 0 0% 98%;
    --primary-foreground: 240 5.9% 10%;

    --secondary: 240 3.7% 15.9%;
    --secondary-foreground: 0 0% 98%;

    --muted: 240 3.7% 15.9%;
    --muted-foreground: 240 5% 64.9%;

    --accent: 240 3.7% 15.9%;
    --accent-foreground: 0 0% 98%;

    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;

    --border: 240 3.7% 15.9%;
    --input: 240 3.7% 15.9%;
    --ring: 240 4.9% 83.9%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}

@theme {
  --color-background: hsl(var(--background));
  --color-foreground: hsl(var(--foreground));

  --color-card: hsl(var(--card));
  --color-card-foreground: hsl(var(--card-foreground));

  --color-popover: hsl(var(--popover));
  --color-popover-foreground: hsl(var(--popover-foreground));

  --color-primary: hsl(var(--primary));
  --color-primary-foreground: hsl(var(--primary-foreground));

  --color-secondary: hsl(var(--secondary));
  --color-secondary-foreground: hsl(var(--secondary-foreground));

  --color-muted: hsl(var(--muted));
  --color-muted-foreground: hsl(var(--muted-foreground));

  --color-accent: hsl(var(--accent));
  --color-accent-foreground: hsl(var(--accent-foreground));

  --color-destructive: hsl(var(--destructive));
  --color-destructive-foreground: hsl(var(--destructive-foreground));

  --color-border: hsl(var(--border));
  --color-input: hsl(var(--input));
  --color-ring: hsl(var(--ring));

  --color-chart-1: hsl(var(--chart-1));
  --color-chart-2: hsl(var(--chart-2));
  --color-chart-3: hsl(var(--chart-3));
  --color-chart-4: hsl(var(--chart-4));
  --color-chart-5: hsl(var(--chart-5));

  --radius-lg: var(--radius);
  --radius-md: calc(var(--radius) - 2px);
  --radius-sm: calc(var(--radius) - 4px);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}

@layer base {
  :root {
    --primary: var(--docs-color);
    --docs-color: 220deg 91% 54%;
    --reference-color: 250 80% 54%;
  }

  .dark {
    --docs-color: 217deg 92% 76%;
    --reference-color: 250 100% 80%;
  }
}

/* Horizontal marquee keyframes */
@keyframes marquee {
  from {
    transform: translateX(0);
  }
  to {
    transform: translateX(calc(-100% - var(--gap)));
  }
}

@utility animate-marquee {
  animation: marquee var(--duration) linear infinite;
}

@keyframes shine {
  0% {
    background-position: 0% 0%;
  }
  50% {
    background-position: 100% 100%;
  }
  100% {
    background-position: 0% 0%;
  }
}

/* Create a utility class for the animation */
@utility animate-shine {
  animation: shine var(--duration) infinite linear;
}

@property --angle {
  syntax: "<angle>";
  inherits: false;
  initial-value: 0deg;
}

@keyframes rotate {
  to {
    --angle: 360deg;
  }
}

.rainbow-border {
  animation: rotate 10s linear infinite;
  background: linear-gradient(
    var(--angle),
    #02fcef70 0,
    #ffb52b70 50%,
    #a02bfe70 100%
  );

  &:after {
    animation: rotate 10s linear infinite;
    background: linear-gradient(
      var(--angle),
      #02fcef70 0,
      #ffb52b70 50%,
      #a02bfe70 100%
    );
    filter: blur(10px);
    transition: all 0.4s ease-out;
  }

  &:hover:after {
    transform: scale(1.1, 1.1);
  }
}



================================================
FILE: apps/docs/app/layout.tsx
================================================
import "./global.css";
import type { ReactNode } from "react";
import { GeistSans } from "geist/font/sans";
import { GeistMono } from "geist/font/mono";
import Script from "next/script";
import { Provider } from "./provider";

export const metadata = {
  title: {
    template: "%s | assistant-ui",
    default: "assistant-ui",
  },
  description: "The TypeScript/React library for AI Chat",
};

export default function Layout({ children }: { children: ReactNode }) {
  return (
    <html
      lang="en"
      className={`${GeistSans.variable} ${GeistMono.variable}`}
      suppressHydrationWarning
    >
      {/* <head>
        <script
          crossOrigin="anonymous"
          src="//unpkg.com/react-scan/dist/auto.global.js"
        />
      </head> */}
      <body className={"flex min-h-screen flex-col"}>
        <Provider>{children}</Provider>
        <script
          defer
          src="/umami/script.js"
          data-website-id="6f07c001-46a2-411f-9241-4f7f5afb60ee"
          data-domains="www.assistant-ui.com"
        ></script>

        <Script
          id="vector-script"
          dangerouslySetInnerHTML={{
            __html: `
        !function(e,r){try{if(e.vector)return void console.log("Vector snippet included more than once.");var t={};t.q=t.q||[];for(var o=["load","identify","on"],n=function(e){return function(){var r=Array.prototype.slice.call(arguments);t.q.push([e,r])}},c=0;c<o.length;c++){var a=o[c];t[a]=n(a)}if(e.vector=t,!t.loaded){var i=r.createElement("script");i.type="text/javascript",i.async=!0,i.src="https://cdn.vector.co/pixel.js";var l=r.getElementsByTagName("script")[0];l.parentNode.insertBefore(i,l),t.loaded=!0}}catch(e){console.error("Error loading Vector:",e)}}(window,document);
        vector.load("d9af9bfb-c10c-4eed-9366-57cdc0a97ee9");
    `,
          }}
        />
      </body>
    </html>
  );
}



================================================
FILE: apps/docs/app/provider.tsx
================================================
"use client";

import { RootProvider } from "fumadocs-ui/provider";
import type { ReactNode } from "react";

export function Provider({ children }: { children: ReactNode }) {
  return <RootProvider>{children}</RootProvider>;
}



================================================
FILE: apps/docs/app/source.tsx
================================================
import { createMDXSource } from "fumadocs-mdx";
import type { InferPageType } from "fumadocs-core/source";
import { loader } from "fumadocs-core/source";
import { meta, docs, blog as blogPosts } from "@/.source";

const utils = loader({
  baseUrl: "/docs",
  source: createMDXSource(docs, meta),
});

export const { getPages, getPage, pageTree } = utils;
export const source = utils;

export const blog = loader({
  baseUrl: "/blog",
  source: createMDXSource(blogPosts, []),
});

export type BlogPage = InferPageType<typeof blog>;



================================================
FILE: apps/docs/app/(home)/DocsRuntimeProvider.tsx
================================================
"use client";
import { WeatherSearchToolUI } from "@/components/tools/weather-tool";
import { GeocodeLocationToolUI } from "@/components/tools/weather-tool";
import {
  CompositeAttachmentAdapter,
  SimpleImageAttachmentAdapter,
  SimpleTextAttachmentAdapter,
  AssistantRuntimeProvider,
  WebSpeechSynthesisAdapter,
  AssistantCloud,
} from "@assistant-ui/react";
import { useChatRuntime } from "@assistant-ui/react-ai-sdk";

export function DocsRuntimeProvider({
  children,
}: {
  children: React.ReactNode;
}) {
  const assistantCloud = new AssistantCloud({
    baseUrl: process.env["NEXT_PUBLIC_ASSISTANT_BASE_URL"]!,
    anonymous: true,
  });

  const runtime = useChatRuntime({
    api: "/api/chat",
    maxSteps: 5,
    adapters: {
      attachments: new CompositeAttachmentAdapter([
        new SimpleImageAttachmentAdapter(),
        new SimpleTextAttachmentAdapter(),
      ]),
      speech: new WebSpeechSynthesisAdapter(),
    },
    cloud: assistantCloud,
  });
  return (
    <AssistantRuntimeProvider runtime={runtime}>
      {children}
      <WeatherSearchToolUI />
      <GeocodeLocationToolUI />
    </AssistantRuntimeProvider>
  );
}



================================================
FILE: apps/docs/app/(home)/layout.tsx
================================================
import { FC, ReactNode } from "react";
import { HomeLayout } from "fumadocs-ui/layouts/home";
import { baseOptions } from "../docs/layout.config";
import Image from "next/image";
import icon from "../../public/favicon/icon.svg";
import Link from "next/link";

import xIcon from "./logos/x.svg";
import githubIcon from "./logos/github.svg";
import discordIcon from "./logos/discord.svg";

export default function Layout({
  children,
}: {
  children: ReactNode;
}): React.ReactElement {
  return (
    <HomeLayout {...baseOptions}>
      {children}
      <Footer />
    </HomeLayout>
  );
}

function Footer(): React.ReactElement {
  return (
    <footer className="relative border-t px-8 pb-32 pt-20">
      <div className="mx-auto flex w-full max-w-screen-xl flex-col justify-between sm:flex-row">
        <div className="mr-4 flex flex-col gap-4">
          <Link
            className="mr-4 flex items-center gap-3 text-sm font-normal text-black"
            href="/"
          >
            <Image
              src={icon}
              alt="logo"
              className="inline size-7 dark:hue-rotate-180 dark:invert"
            />
            <span className="text-2xl font-medium text-black dark:text-white">
              assistant-ui
            </span>
          </Link>
          <div className="flex gap-4">
            <Link href="https://x.com/assistantui" target="_blank">
              <Image
                src={xIcon}
                alt="X icon"
                className="inline size-5 opacity-30 transition-opacity hover:opacity-100 dark:hue-rotate-180 dark:invert"
              />
            </Link>
            <Link href="https://github.com/assistant-ui" target="_blank">
              <Image
                src={githubIcon}
                alt="GitHub icon"
                className="inline size-5 opacity-30 transition-opacity hover:opacity-100 dark:hue-rotate-180 dark:invert"
              />
            </Link>
            <Link href="https://discord.gg/S9dwgCNEFs" target="_blank">
              <Image
                src={discordIcon}
                alt="Discord icon"
                className="inline size-5 opacity-30 transition-opacity hover:opacity-100 dark:hue-rotate-180 dark:invert"
              />
            </Link>
          </div>
          <div className="flex-grow" />
          <p className="text-foreground/30 text-sm">
            &copy; {new Date().getFullYear()} AgentbaseAI Inc.
          </p>
        </div>
        <div className="mt-10 grid grid-cols-2 items-start gap-10 sm:mt-0">
          <div className="flex w-[160px] flex-col justify-center gap-4">
            <p className="text-sm">Product</p>
            <FooterLink href="/docs/getting-started">Documentation</FooterLink>
            <FooterLink href="/showcase">Showcase</FooterLink>
            <FooterLink href="/examples">Examples</FooterLink>
            <FooterLink href="/pricing">Pricing</FooterLink>
          </div>
          <div className="flex flex-col justify-center gap-4">
            <p className="text-sm">Company</p>
            <FooterLink href="https://cal.com/simon-farshid/assistant-ui">
              Contact Sales
            </FooterLink>
            <FooterLink href="/blog">Blog</FooterLink>
            <FooterLink href="https://docs.google.com/document/d/1EhtzGCVOFGtDWaRP7uZ4gBpDVzUfuCF23U6ztRunNRo/view">
              Terms of Service
            </FooterLink>
            <FooterLink href="https://docs.google.com/document/d/1rTuYeC2xJHWB5u42dSyWwp3vBx7Cms5b6sK971wraVY/view">
              Privacy Policy
            </FooterLink>
          </div>

          {/* <div className="mt-4 flex flex-col justify-center space-y-4">
            <a
              className="text-muted-foreground hover:text-foreground text-xs transition-colors sm:text-sm"
              href="#"
            >
              Privacy Policy
            </a>
            <a
              className="text-muted-foreground hover:text-foreground text-xs transition-colors sm:text-sm"
              href="#"
            >
              Terms of Service
            </a>
          </div> */}
        </div>
      </div>
    </footer>
  );
}

const FooterLink: FC<{ href: string; children: ReactNode }> = ({
  href,
  children,
}) => {
  return (
    <a
      className="text-muted-foreground hover:text-foreground text-xs transition-colors sm:text-sm"
      href={href}
    >
      {children}
    </a>
  );
};



================================================
FILE: apps/docs/app/(home)/page.tsx
================================================
"use client";

import { Shadcn } from "@/components/shadcn/Shadcn";
import { Button, buttonVariants } from "@/components/ui/button";
import Link from "next/link";
import { TESTIMONIALS } from "@/components/testimonials/testimonials";
import { DiscordLogoIcon } from "@radix-ui/react-icons";
import { TestimonialContainer } from "../../components/testimonials/TestimonialContainer";
import { cn } from "@/lib/utils";
import { CheckIcon, CopyIcon } from "lucide-react";
import athenaintel from "./logos/cust/athenaintel.png";
import browseruse from "./logos/cust/browseruse.svg";
import entelligence from "./logos/cust/entelligence.svg";
import langchain from "./logos/cust/langchain.svg";
import stack from "./logos/cust/stack.svg";
import Image from "next/image";
import { ArrowRight } from "lucide-react";
import { DocsRuntimeProvider } from "./DocsRuntimeProvider";
import { Marquee } from "@/components/magicui/marquee";
import { useMediaQuery } from "@/lib/useMediaQuery";
import { StarPill } from "./home/StarPill";
import ycombinator from "./logos/ycombinator.svg";
import { useState } from "react";

export default function HomePage() {
  return (
    <main className="container relative z-[2] max-w-[1100px] px-2 py-16 lg:py-16">
      <StarPill />
      <Hero />

      <div className="mx-auto mt-6 flex h-[650px] w-full max-w-screen-xl flex-col overflow-hidden rounded-lg border shadow">
        <DocsRuntimeProvider>
          <Shadcn />
        </DocsRuntimeProvider>
      </div>

      <Button variant="outline" className="mx-auto mt-6 flex" asChild>
        <Link href="/examples">
          View our other examples <ArrowRight />
        </Link>
      </Button>

      <div className="mt-20 flex flex-col items-center gap-4">
        <h1 className="text-center text-2xl font-medium">
          Trusted by fast-growing companies
        </h1>
        <Logos />
      </div>

      <div className="my-20 flex flex-col gap-6">
        <div className="flex flex-col items-center gap-3 self-center sm:w-full sm:self-start lg:w-[unset] lg:self-center">
          <h1 className="self-start text-2xl font-medium sm:self-center">
            Be part of the community
          </h1>
          <p>
            1000+ developers are building with assistant-ui, you&apos;re in good
            company!
          </p>

          <div className="my-2 flex w-full flex-col gap-4 sm:grid sm:grid-cols-2">
            <a
              className={buttonVariants({ variant: "outline" })}
              href="https://discord.gg/S9dwgCNEFs"
            >
              <DiscordLogoIcon className="mr-2 size-4 text-indigo-600" /> Join
              our Discord
            </a>
            <a
              className={buttonVariants({ variant: "outline" })}
              href="https://github.com/assistant-ui/assistant-ui"
            >
              <span className="mr-2">🌟</span> Star us on GitHub
            </a>
          </div>
        </div>

        <div className="relative mx-auto max-h-[500px] w-full max-w-screen-xl overflow-hidden">
          <TestimonialContainer
            testimonials={TESTIMONIALS}
            className="sm:columns-2 lg:columns-3 xl:columns-4"
          />
          <div className="from-background via-background pointer-events-none absolute -bottom-8 left-0 z-10 h-[120px] w-full bg-gradient-to-t" />
        </div>

        <div className="flex justify-center">
          <div className="relative flex h-max w-full flex-col items-center justify-between gap-5 rounded-3xl border p-6 sm:w-max sm:flex-row sm:p-10 lg:h-32 lg:w-full lg:px-16">
            <p className="text-center text-2xl font-bold">
              Build conversational AI interfaces
            </p>
            <Button asChild className="w-full sm:w-[unset]">
              <Link href="/docs/getting-started">Get Started</Link>
            </Button>
          </div>
        </div>
      </div>
    </main>
  );
}

function Hero() {
  return (
    <div className="relative z-[2] flex flex-col overflow-hidden px-6 py-12 text-center md:pt-16">
      <h1 className="mb-8 text-4xl font-medium md:hidden">
        UX of ChatGPT in your own app
      </h1>
      <h1 className="mb-8 text-5xl font-medium max-md:hidden">
        UX of ChatGPT in your own app
      </h1>
      <p className="text-muted-foreground mb-8 md:text-xl">
        assistant-ui is the TypeScript/React library for{" "}
        <span className="text-foreground">AI Chat</span>.<br />
        Built on <span className="text-foreground">shadcn/ui</span> and{" "}
        <span className="text-foreground">Tailwind</span>.
      </p>

      <div className="mx-auto mt-8 flex flex-col items-stretch justify-center gap-4 sm:flex-row">
        <CopyCommandButton />

        <a
          href="https://cal.com/simon-farshid/assistant-ui"
          className={cn(
            buttonVariants({
              size: "lg",
              variant: "outline",
              className: "bg-background h-12 self-center",
            }),
          )}
        >
          Contact Sales
        </a>
      </div>

      <div className="text-muted-foreground mt-8">
        <p>
          Backed by{" "}
          <Image
            src={ycombinator}
            alt="Y Combinator"
            className="mb-1 inline"
            width={140}
          />
        </p>
      </div>
      {/* <Image
        // src={Img}
        alt="preview"
        className="animate-in fade-in slide-in-from-bottom-12 mb-[-250px] mt-12 min-w-[800px] select-none duration-1000 md:mb-[-340px] md:min-w-[1100px]"
        priority
      /> */}
    </div>
  );
}

const Logos = () => {
  const isMobile = useMediaQuery("(max-width: 1080px)");

  const content = (
    <div className="flex w-full items-center justify-around rounded pt-6">
      <Image
        src={langchain}
        alt="Langchain"
        className="inline-block h-[28px] w-auto opacity-50 invert transition-opacity hover:opacity-100 dark:invert-0"
      />
      <Image
        src={athenaintel}
        alt="Athena Intelligence"
        className="inline-block h-11 w-auto opacity-50 invert transition-opacity hover:opacity-100 dark:invert-0"
      />
      <Image
        src={browseruse}
        alt="Browseruse"
        className="inline-block h-[26px] w-auto opacity-50 invert transition-opacity hover:opacity-100 dark:invert-0"
      />
      <Image
        src={entelligence}
        alt="Entelligence"
        className="mt-1 inline-block h-[22px] w-auto opacity-50 invert transition-opacity hover:opacity-100 dark:invert-0"
      />
      <Image
        src={stack}
        alt="Stack"
        className="mt-0.5 inline-block h-[22px] w-auto opacity-50 invert transition-opacity hover:opacity-100 dark:invert-0"
      />
    </div>
  );

  if (isMobile) {
    return (
      <div className="w-full overflow-clip">
        <Marquee repeat={4}>
          <div className="flex w-[1000px]">{content}</div>
        </Marquee>
      </div>
    );
  }

  return content;
};

function CopyCommandButton() {
  const [copied, setCopied] = useState(false);

  const copyToClipboard = () => {
    navigator.clipboard.writeText("npx assistant-ui init");
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
  };

  return (
    <button
      onClick={copyToClipboard}
      className={buttonVariants({
        size: "lg",
        variant: "outline",
        className:
          "bg-background group relative flex h-12 items-center gap-2 rounded-lg border px-4 py-3 font-mono text-sm font-bold transition-all",
      })}
    >
      <span>$ npx assistant-ui init</span>
      <div className="text-muted-foreground ml-2 flex h-5 w-5 items-center justify-center">
        {copied ? (
          <CheckIcon className="h-3 w-3 text-green-500" />
        ) : (
          <CopyIcon className="h-3 w-3 opacity-70 transition-opacity group-hover:opacity-100" />
        )}
      </div>
    </button>
  );
}



================================================
FILE: apps/docs/app/(home)/blog/page.tsx
================================================
import Link from "next/link";
import { blog, BlogPage } from "@/app/source";

export default function Page(): React.ReactElement {
  const posts = [...blog.getPages()].sort(
    (a: BlogPage, b: BlogPage) =>
      new Date(b.data.date ?? b.file.name).getTime() -
      new Date(a.data.date ?? a.file.name).getTime(),
  );

  return (
    <main className="mx-auto w-full max-w-screen-sm p-4 py-12">
      <h1 className="mb-4 px-4 pb-2 text-4xl font-bold">assistant-ui Blog</h1>
      <div className="flex flex-col">
        {posts.map((post: BlogPage) => (
          <Link
            key={post.url}
            href={post.url}
            className="bg-card hover:bg-accent hover:text-accent-foreground flex flex-col rounded-lg p-4 transition-colors"
          >
            <p className="font-medium">{post.data.title}</p>
            <p className="text-muted-foreground mt-auto pt-2 text-xs">
              {new Date(post.data.date ?? post.file.name).toDateString()}
            </p>
          </Link>
        ))}
      </div>
    </main>
  );
}



================================================
FILE: apps/docs/app/(home)/blog/[slug]/page.tsx
================================================
import { use } from "react";
import { notFound } from "next/navigation";
import Link from "next/link";
import { blog, BlogPage } from "@/app/source";
import { buttonVariants } from "@/components/ui/button";
import Image from "next/image";
import profilePic from "../../../../components/testimonials/profiles/Mc0m3zkD_400x400.jpg";
import { getMDXComponents } from "@/mdx-components";

interface Param {
  slug: string;
}

export default function Page(props: {
  params: Promise<Param>;
}): React.ReactElement {
  const params = use(props.params);
  const page = blog.getPage([params.slug]) as BlogPage;
  const mdxComponents = getMDXComponents({});

  if (!page) notFound();

  return (
    <main className="px-4">
      <div className="mx-auto flex w-full max-w-screen-xl items-center justify-between py-4">
        <Link
          href="/blog"
          className={buttonVariants({ size: "sm", variant: "ghost" })}
        >
          Back
        </Link>
        {!!page.data.date && (
          <p className="text-xs text-gray-500">
            {(page.data.date as Date).toLocaleString("en-US", {
              year: "numeric",
              month: "2-digit",
              day: "2-digit",
            })}
          </p>
        )}
      </div>
      <div
        className="mx-auto w-full max-w-screen-xl rounded-xl border py-12 md:px-8"
        style={{
          backgroundColor: "black",
          backgroundImage: [
            "linear-gradient(140deg, hsla(274,94%,54%,0.3), transparent 50%)",
            "linear-gradient(to left top, hsla(260,90%,50%,0.8), transparent 50%)",
            "radial-gradient(circle at 100% 100%, hsla(240,100%,82%,1), hsla(240,40%,40%,1) 17%, hsla(240,40%,40%,0.5) 20%, transparent)",
          ].join(", "),
          backgroundBlendMode: "difference, difference, normal",
        }}
      >
        <div className="mx-auto flex w-full max-w-screen-sm flex-col items-center justify-center px-4">
          <h1 className="text-center text-4xl font-bold text-white">
            {page.data.title}
          </h1>
          <p className="mt-4 text-balance text-center text-lg text-white/80">
            {page.data.description}
          </p>
        </div>
      </div>
      <article className="prose lg:prose-lg mx-auto w-full max-w-screen-sm py-8">
        <page.data.body components={mdxComponents} />
      </article>
      <div className="mx-auto mb-20 flex w-full max-w-screen-sm items-start gap-3">
        <Image
          src={profilePic}
          alt="Simon Farshid"
          width={32}
          height={32}
          className="size-8 rounded-full"
        />
        <div className="mt-1.5 flex flex-col">
          <span className="text-sm font-medium">Simon Farshid</span>
        </div>
      </div>
    </main>
  );
}

export function generateStaticParams(): Param[] {
  return blog.getPages().map((page) => ({
    slug: page.slugs[0]!,
  }));
}



================================================
FILE: apps/docs/app/(home)/examples/page.tsx
================================================
import Image from "next/image";

import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import Link from "next/link";

type ShowcaseItem = {
  title: string;
  description?: string;
  image: string;
  link: string;
};

const EXAMPLE_ITEMS: ShowcaseItem[] = [
  {
    title: "Modal",
    image: "/screenshot/examples/modal.png",
    description: "Floating button that opens an AI assistant chat box.",
    link: "/examples/modal",
  },
  {
    title: "Form Filling Co-Pilot",
    image: "/screenshot/examples/form-demo.png",
    description: "AssistantSidebar copilot which fills forms for the user.",
    link: "/examples/form-demo",
  },
  {
    title: "ChatGPT Clone",
    image: "/screenshot/examples/chatgpt.png",
    description: "Customized colors and styles for a ChatGPT look and feel.",
    link: "/examples/chatgpt",
  },
  {
    title: "Claude Clone",
    image: "/screenshot/examples/claude.png",
    description: "Customized colors and styles for a Claude look and feel.",
    link: "/examples/claude",
  },
  {
    title: "Perplexity Clone",
    image: "/screenshot/examples/chatgpt.png",
    description: "Customized colors and styles for a Perplexity look and feel.",
    link: "/examples/perplexity",
  },
  {
    title: "AI SDK",
    image: "/screenshot/examples/ai-sdk.png",
    description: "Chat persistence with AI SDK.",
    link: "/examples/ai-sdk",
  },
  {
    title: "Mem0 - ChatGPT with memory",
    image: "/screenshot/examples/mem0.png",
    description:
      "A personalized AI chat app powered by Mem0 that remembers your preferences, facts, and memories.",
    link: "/examples/mem0",
  },
  {
    title: "LangGraph Stockbroker",
    image: "/screenshot/stockbroker.png",
    description: "A stockbroker showing human in the loop with LangGraph",
    link: "/examples/stockbroker",
  },
  {
    title: "Artifacts",
    image: "/screenshot/examples/artifacts.png",
    description:
      "Open Source Claude Artifacts. You can ask the bot to generate websites.",
    link: "/examples/artifacts",
  },
  {
    title: "Open Canvas",
    image: "/screenshot/open-canvas.png",
    description: "OSS implementation of ChatGPT's Canvas.",
    link: "https://github.com/langchain-ai/open-canvas",
  },
  {
    title: "FastAPI + LangGraph",
    image: "/screenshot/examples/fastapi-langgraph.png",
    description:
      "Integration of a FastAPI + LangGraph server with assistant-ui.",
    link: "https://github.com/Yonom/assistant-ui-langgraph-fastapi",
  },
];

export default function Component() {
  return (
    <div className="min-h-screen">
      <div className="mx-auto max-w-7xl px-4 py-8">
        <header className="mb-28 mt-12 text-center">
          <h1 className="mt-4 text-5xl font-bold">Examples</h1>
        </header>
        <div className="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
          {EXAMPLE_ITEMS.map((item) => (
            <ShowcaseCard key={item.title} {...item} />
          ))}
        </div>

        <div className="my-20 flex flex-col items-center gap-6">
          <h2 className="text-4xl font-bold">Looking for more examples?</h2>
          <Button asChild>
            <a href="/showcase">Check out the community showcase!</a>
          </Button>
        </div>
      </div>
    </div>
  );
}

function ShowcaseCard({ title, image, description, link }: ShowcaseItem) {
  return (
    <Link href={link}>
      <Card className="bg-card group relative flex max-h-[400px] flex-col overflow-hidden rounded-lg">
        <div className="overflow-hidden">
          <Image
            src={image}
            alt={title}
            width={600}
            height={400}
            className="object-cover transition-transform duration-300 group-hover:scale-105"
          />
        </div>
        <div className="flex flex-col gap-1 p-4 pt-2">
          <div className="flex items-center justify-between">
            <h3 className="text-lg font-semibold">{title}</h3>
          </div>
          <div className="flex-1">
            <p className="text-muted-foreground">{description}</p>
          </div>
        </div>
      </Card>
    </Link>
  );
}



================================================
FILE: apps/docs/app/(home)/examples/ai-sdk/page.tsx
================================================
import { Shadcn } from "@/components/shadcn/Shadcn";
import { DocsRuntimeProvider } from "../../DocsRuntimeProvider";

export default function Component() {
  return (
    <div className="min-h-screen">
      <div className="mx-auto max-w-7xl px-4 py-8">
        <header className="mb-28 mt-12 text-center">
          <h1 className="mt-4 text-5xl font-bold">AI SDK + Chat Persistence</h1>
        </header>

        <div className="h-[700px]">
          <DocsRuntimeProvider>
            <Shadcn />
          </DocsRuntimeProvider>
        </div>
      </div>
    </div>
  );
}



================================================
FILE: apps/docs/app/(home)/examples/artifacts/page.tsx
================================================
export default function Component() {
  return (
    <div className="min-h-screen">
      <div className="mx-auto max-w-7xl px-4 py-8">
        <header className="mb-28 mt-12 text-center">
          <h1 className="mt-4 text-5xl font-bold">Artifacts Clone</h1>
        </header>

        <div className="h-[700px]">
          <iframe
            title="Artifacts example"
            className="h-full w-full border-none"
            src="https://assistant-ui-artifacts.vercel.app/"
          />
        </div>
      </div>
    </div>
  );
}



================================================
FILE: apps/docs/app/(home)/examples/chatgpt/page.tsx
================================================
import { DocsRuntimeProvider } from "../../DocsRuntimeProvider";
import { ChatGPT } from "@/components/chatgpt/ChatGPT";

export default function Component() {
  return (
    <div className="min-h-screen">
      <div className="mx-auto max-w-7xl px-4 py-8">
        <header className="mb-28 mt-12 text-center">
          <h1 className="mt-4 text-5xl font-bold">ChatGPT Clone</h1>
        </header>

        <div className="h-[700px]">
          <DocsRuntimeProvider>
            <ChatGPT />
          </DocsRuntimeProvider>
        </div>
      </div>
    </div>
  );
}



================================================
FILE: apps/docs/app/(home)/examples/claude/page.tsx
================================================
import { DocsRuntimeProvider } from "../../DocsRuntimeProvider";
import { Claude } from "@/components/claude/Claude";

export default function Component() {
  return (
    <div className="min-h-screen">
      <div className="mx-auto max-w-7xl px-4 py-8">
        <header className="mb-28 mt-12 text-center">
          <h1 className="mt-4 text-5xl font-bold">Claude Clone</h1>
        </header>

        <div className="h-[700px]">
          <DocsRuntimeProvider>
            <Claude />
          </DocsRuntimeProvider>
        </div>
      </div>
    </div>
  );
}



================================================
FILE: apps/docs/app/(home)/examples/form-demo/page.tsx
================================================
export default function Component() {
  return (
    <div className="min-h-screen">
      <div className="mx-auto max-w-7xl px-4 py-8">
        <header className="mb-28 mt-12 text-center">
          <h1 className="mt-4 text-5xl font-bold">Form Filling Co-Pilot</h1>
        </header>

        <div className="h-[700px]">
          <iframe
            title="Stockbroker example"
            className="h-full w-full border-none"
            src="https://assistant-ui-form-demo.vercel.app/"
          />
        </div>
      </div>
    </div>
  );
}



================================================
FILE: apps/docs/app/(home)/examples/mem0/page.tsx
================================================
export default function Component() {
  return (
    <div className="min-h-screen">
      <div className="mx-auto max-w-7xl px-4 py-8">
        <header className="mb-8 mt-12 text-center">
          <h1 className="mt-4 text-5xl font-bold">
            Mem0 - ChatGPT with memory
          </h1>
        </header>

        <div className="h-[700px]">
          <iframe
            title="Mem0 - ChatGPT with memory demo"
            className="h-full w-full border border-gray-200"
            src="https://mem0-4vmi.vercel.app/"
          />
        </div>
      </div>
    </div>
  );
}



================================================
FILE: apps/docs/app/(home)/examples/modal/page.tsx
================================================
import { ModalChat } from "@/components/modal/ModalChat";
import { DocsRuntimeProvider } from "../../DocsRuntimeProvider";

export default function Component() {
  return (
    <div className="min-h-screen">
      <div className="mx-auto max-w-7xl px-4 py-8">
        <header className="mb-28 mt-12 text-center">
          <h1 className="mt-4 text-5xl font-bold">Modal</h1>
        </header>

        <div className="">
          <DocsRuntimeProvider>
            <ModalChat />
          </DocsRuntimeProvider>
        </div>
      </div>
    </div>
  );
}



================================================
FILE: apps/docs/app/(home)/examples/perplexity/page.tsx
================================================
import { DocsRuntimeProvider } from "../../DocsRuntimeProvider";
import { Perplexity } from "@/components/perplexity/Perplexity";

export default function Component() {
  return (
    <div className="min-h-screen">
      <div className="mx-auto max-w-7xl px-4 py-8">
        <header className="mb-28 mt-12 text-center">
          <h1 className="mt-4 text-5xl font-bold">Perplexity Clone</h1>
        </header>

        <div className="h-[700px]">
          <DocsRuntimeProvider>
            <Perplexity />
          </DocsRuntimeProvider>
        </div>
      </div>
    </div>
  );
}



================================================
FILE: apps/docs/app/(home)/examples/stockbroker/page.tsx
================================================
export default function Component() {
  return (
    <div className="min-h-screen">
      <div className="mx-auto max-w-7xl px-4 py-8">
        <header className="mb-28 mt-12 text-center">
          <h1 className="mt-4 text-5xl font-bold">Stockbroker</h1>
        </header>

        <div className="h-[700px]">
          <iframe
            title="Stockbroker example"
            className="h-full w-full border-none"
            src="https://assistant-ui-stockbroker.vercel.app/"
          />
        </div>
      </div>
    </div>
  );
}



================================================
FILE: apps/docs/app/(home)/home/StarPill.tsx
================================================
"use client";
import { StarIcon } from "lucide-react";
import { useEffect, useState } from "react";

export function StarPill() {
  const [stars, setStars] = useState<number | null>(3000);

  useEffect(() => {
    fetch("https://api.github.com/repos/assistant-ui/assistant-ui")
      .then((res) => res.json())
      .then((data) => setStars(data.stargazers_count))
      .catch(console.error);
  }, []);

  return (
    <div className="flex justify-center">
      <a
        className="rainbow-border relative items-center justify-center rounded-full p-[1px] text-sm after:absolute after:inset-0 after:-z-10 after:block after:rounded-full"
        href="https://github.com/assistant-ui/assistant-ui"
      >
        <span className="bg-background inline-flex items-center gap-2 overflow-clip whitespace-nowrap rounded-full px-5 py-1.5">
          <span className="text-md hidden dark:inline">🌟</span>
          <span className="text-md dark:hidden">
            <StarIcon className="size-4 fill-amber-300 text-amber-600" />
          </span>
          <div className="font-medium text-amber-600 dark:text-amber-400">
            {stars}
          </div>
          <div className="ml-2 font-semibold">Star us on GitHub</div>
        </span>
      </a>
    </div>
  );
}



================================================
FILE: apps/docs/app/(home)/llms-full.txt/route.ts
================================================
import { getPages } from "@/app/source";
import { getLLMText } from "@/lib/get-llm-text";

// cached forever
export const revalidate = false;

export async function GET() {
  const scan = getPages().map(getLLMText);
  const scanned = await Promise.all(scan);

  return new Response(scanned.join("\n\n"));
}



================================================
FILE: apps/docs/app/(home)/llms.mdx/[[...slug]]/route.ts
================================================
import { type NextRequest, NextResponse } from "next/server";
import { getLLMText } from "@/lib/get-llm-text";
import { getPage, getPages } from "@/app/source";
import { notFound } from "next/navigation";

export const revalidate = false;

export async function GET(
  _req: NextRequest,
  { params }: { params: Promise<{ slug?: string[] }> },
) {
  const { slug } = await params;
  const page = getPage(slug);
  if (!page) notFound();

  return new NextResponse(await getLLMText(page));
}

export function generateStaticParams() {
  return getPages().map((page) => ({
    slug: page.slugs,
  }));
}



================================================
FILE: apps/docs/app/(home)/llms.txt/route.ts
================================================
import { getPages } from "@/app/source";

export const revalidate = false;

export async function GET() {
  const scanned: string[] = [];
  scanned.push("# Docs");
  const map = new Map<string, string[]>();
  const baseUrl = "https://assistant-ui.com";

  for (const page of getPages()) {
    const dir = page.slugs[0] || "root";
    const list = map.get(dir) ?? [];
    list.push(
      `- [${page.data.title}](${baseUrl}${page.url}): ${page.data.description || ""}`,
    );
    map.set(dir, list);
  }

  for (const [key, value] of map) {
    scanned.push(`## ${key}`);
    scanned.push(value.join("\n"));
  }

  return new Response(scanned.join("\n\n"));
}



================================================
FILE: apps/docs/app/(home)/pricing/open-source-card.tsx
================================================
import { CheckIcon, GithubIcon } from "lucide-react";

export default function OpenSourceCard() {
  return (
    <div className="mx-auto mb-12 w-full max-w-[1000px]">
      <div className="flex flex-col rounded-lg border-2 p-6">
        <div className="flex-grow">
          <div className="mb-4 flex gap-3">
            <GithubIcon className="h-6 w-6" />
            <h3 className="text-xl font-semibold">
              Forever Free & Open Source (MIT License)
            </h3>
          </div>
          <p className="text-md mb-4">
            UI components for your AI chat application
          </p>
          <ul className="space-y-2 text-sm">
            {[
              "Customizable UI components",
              "Bring your own backend",
              "Community support",
            ].map((feature) => (
              <li key={feature} className="flex items-start">
                <CheckIcon className="mr-2 mt-0.5 h-5 w-5 flex-shrink-0 text-green-500" />
                <span>{feature}</span>
              </li>
            ))}
          </ul>
        </div>
      </div>
    </div>
  );
}



================================================
FILE: apps/docs/app/(home)/pricing/page.tsx
================================================
import PricingSection from "./pricing-section";
import OpenSourceCard from "./open-source-card";

export default function PricingPage() {
  return (
    <div className="min-h-screen py-12">
      <main className="container mx-auto px-4">
        <h1 className="mb-12 text-center text-4xl font-bold">Pricing</h1>

        <div className="mx-auto mb-6 w-full max-w-[1000px]">
          <h2 className="mb-2 text-2xl font-bold">assistant-cloud</h2>
          <p className="text-lg">
            Fully managed backend for AI chat applications
          </p>
        </div>

        <PricingSection />

        <div className="mx-auto mb-6 w-full max-w-[1000px]">
          <h2 className="mb-2 mt-4 text-2xl font-bold">assistant-ui</h2>
          <p className="text-lg">TypeScript/React library for AI chat</p>
        </div>
        <OpenSourceCard />

        <p className="text-muted-foreground mx-auto mb-4 mt-4 w-full max-w-[1000px] text-xs">
          <strong>*MAU:</strong> Monthly Active Users who send at least one
          message via assistant-ui. Are you a B2C app?{" "}
          <a href="mailto:b2c-pricing@assistant.dev" className="underline">
            Contact us
          </a>{" "}
          for a custom pricing plan.
        </p>
      </main>
    </div>
  );
}



================================================
FILE: apps/docs/app/(home)/pricing/pricing-section.tsx
================================================
import { CheckIcon } from "lucide-react";
import { Button } from "@/components/ui/button";
import { ShineBorder } from "@/components/magicui/shine-border";
import Link from "next/link";

const pricingOptions = [
  {
    title: "Free",
    price: "Up to 200 MAU",
    features: ["200 MAU", "Chat History", "Thread Management"],
    button: "Sign up",
    buttonLink: "https://cloud.assistant-ui.com/",
  },
  {
    title: "Pro",
    price: "$50/mo",
    features: [
      "500 MAU + $0.10 per additional",
      "Chat History",
      "Thread Management",
      "Early Access To New Features",
    ],
    button: "Sign up",
    buttonLink: "https://cloud.assistant-ui.com/",
  },
  {
    title: "Enterprise",
    price: "Custom Pricing",
    features: [
      "Integration with your own backend",
      "Replicate data to your own database",
      "Dedicated Support",
      "99.99% Uptime SLA",
      "On-premises Deployment",
      "Security & Privacy Compliance",
    ],
    button: "Contact us",
    buttonLink: "https://cal.com/simon-farshid/assistant-ui",
  },
];

export default function PricingSection() {
  return (
    <div className="mx-auto w-full max-w-[1000px]">
      <div className="mb-6 grid grid-cols-1 gap-6 md:grid-cols-3">
        {pricingOptions.map((option) => {
          const isPro = option.title === "Pro";
          const content = (
            <>
              <div className="flex-grow">
                <h3 className="mb-2 text-2xl font-semibold">{option.title}</h3>
                <p className="text-md mb-4">{option.price}</p>
                <ul className="mb-6 space-y-2 text-sm">
                  {option.features.map((feature) => (
                    <li key={feature} className="flex items-start">
                      <CheckIcon className="mr-2 mt-0.5 h-5 w-5 flex-shrink-0 text-green-500" />
                      <span>{feature}</span>
                    </li>
                  ))}
                </ul>
              </div>
              <Button
                className="mt-auto w-full"
                variant={isPro ? "default" : "outline"}
                asChild
              >
                <Link href={option.buttonLink}>{option.button}</Link>
              </Button>
            </>
          );

          if (isPro) {
            return (
              <ShineBorder
                key={option.title}
                className={"relative flex flex-col border-0 p-6"}
                borderRadius={8}
                color={["#A07CFE", "#FE8FB5", "#FFBE7B"]}
              >
                {content}
              </ShineBorder>
            );
          }

          return (
            <div
              key={option.title}
              className="relative flex flex-col rounded-lg border-2 p-6"
            >
              {content}
            </div>
          );
        })}
      </div>
    </div>
  );
}



================================================
FILE: apps/docs/app/(home)/shadcn-ui/page.tsx
================================================
"use client";

import { Shadcn } from "@/components/shadcn/Shadcn";
import { Button } from "@/components/ui/button";
import { useChat } from "@ai-sdk/react";
import Link from "next/link";
import { DocsRuntimeProvider } from "../DocsRuntimeProvider";

export default function HomePage() {
  return (
    <main className="container mx-auto flex flex-col gap-6 self-stretch py-4">
      <div className="mt-12 flex flex-col gap-4 self-center">
        <h1 className="text-center text-4xl font-extrabold">
          shadcn/ui for AI chat
        </h1>
      </div>

      <div className="mb-8 flex justify-center gap-2">
        <Button asChild>
          <Link href="/docs/getting-started">Get Started</Link>
        </Button>
      </div>
      <div className="mx-auto flex w-full max-w-screen-xl flex-col">
        <div className="mt-4 h-[650px] overflow-hidden rounded-lg border shadow">
          <DocsRuntimeProvider>
            <Shadcn />
          </DocsRuntimeProvider>
        </div>
      </div>
    </main>
  );
}

export type AssistantProps = {
  chat: ReturnType<typeof useChat>;
};



================================================
FILE: apps/docs/app/(home)/showcase/page.tsx
================================================
import Image from "next/image";

import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";

type ShowcaseItem = {
  title: string;
  image: string;
  tag: string;
  secondaryTag?: string;
  link: string;
  announcementLink?: string;
  repositoryLink?: string;
  description?: string;
};

const SHOWCASE_ITEMS: ShowcaseItem[] = [
  {
    title: "Chat LangChain",
    image: "/screenshot/chat-langchain.png",
    tag: "Developer Tools",
    link: "https://chat.langchain.com/",
    repositoryLink: "https://github.com/langchain-ai/chat-langchain",
    description: "Chat with LangChain's documentation",
    secondaryTag: "OSS",
  },
  {
    title: "Closing.wtf",
    image: "/screenshot/closing-wtf.png",
    tag: "AI Assistant",
    link: "https://closing.wtf/",
    announcementLink:
      "https://closing.wtf/blog/mortgage-analysis-chat-with-assistantui",
    description:
      "Helps homebuyers get the best deal and avoid getting screwed on their mortgage",
  },
  {
    title: "Entelligence",
    image: "/screenshot/entelligence.png",
    tag: "Developer Tools",
    link: "https://entelligence.ai/",
    description: "AI-powered software engineering assistant",
  },
  {
    title: "Helicone",
    image: "/screenshot/helicone.png",
    tag: "Developer Tools",
    link: "https://www.helicone.ai/",
    repositoryLink: "https://github.com/helicone/helicone",
    description: "Open-source LLM observability for developers",
    secondaryTag: "OSS",
  },
  {
    title: "Komodo",
    image: "/screenshot/komodo.png",
    tag: "Developer Tools",
    link: "https://www.komodo.io/",
    description: "Build, train, and deploy AI models",
  },
  {
    title: "Open Canvas",
    image: "/screenshot/open-canvas.png",
    tag: "AI Assistant",
    link: "https://opencanvas.langchain.com/",
    repositoryLink: "https://github.com/langchain-ai/open-canvas",
    description: "Open Source implementation of OpenAI Canvas",
    secondaryTag: "OSS",
  },
  {
    title: "Portal",
    image: "/screenshot/portal.png",
    tag: "Browser",
    link: "https://www.portal.so/",
    description: "AI executive assistant in the form of a browser",
  },
  {
    title: "Relta",
    image: "/screenshot/relta.png",
    tag: "Developer Tools",
    link: "https://www.relta.dev/",
    description: "Accurate, secure AI assistants for relational data",
  },
  {
    title: "LangGraph Stockbroker",
    image: "/screenshot/stockbroker.png",
    tag: "Developer Tools",
    link: "https://assistant-ui-stockbroker.vercel.app/",
    announcementLink: "https://blog.langchain.dev/assistant-ui/",
    repositoryLink: "https://github.com/assistant-ui/assistant-ui-stockbroker",
    description: "Research financial data about public companies",
    secondaryTag: "OSS",
  },
];

export default function Component() {
  return (
    <div className="min-h-screen">
      <div className="mx-auto max-w-7xl px-4 py-8">
        <header className="mb-28 mt-12 text-center">
          <div className="text-muted-foreground text-sm uppercase tracking-wider">
            COMMUNITY SHOWCASE
          </div>
          <h1 className="mt-4 text-5xl font-bold">
            Built with
            <br />
            assistant-ui
          </h1>
        </header>
        <div className="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
          {SHOWCASE_ITEMS.map((item) => (
            <ShowcaseCard key={item.title} {...item} />
          ))}
        </div>

        <div className="my-20 flex flex-col items-center gap-6">
          <h2 className="text-4xl font-bold">Building something cool?</h2>
          <Button asChild>
            <a href="mailto:showcase@assistant-ui.com">Let us know about it!</a>
          </Button>
        </div>
      </div>
    </div>
  );
}

function ShowcaseCard({
  title,
  image,
  tag,
  secondaryTag,
  link,
  announcementLink,
  repositoryLink,
  description,
}: ShowcaseItem) {
  return (
    <Card className="bg-card group relative flex max-h-[350px] flex-col overflow-hidden rounded-lg">
      <div className="overflow-hidden">
        <Image
          src={image}
          alt={title}
          width={600}
          height={400}
          className="object-cover transition-transform duration-300 group-hover:scale-105"
        />
      </div>
      <div className="flex flex-col gap-1 p-4 pt-2">
        <div className="flex items-center justify-between">
          <h3 className="text-lg font-semibold">{title}</h3>
          <div className="flex gap-2">
            <span className="rounded bg-purple-300/50 px-2 py-1 text-xs dark:bg-purple-900/50">
              {tag}
            </span>
            {secondaryTag && (
              <span className="rounded bg-green-100 px-2 py-1 text-xs dark:bg-green-800">
                {secondaryTag}
              </span>
            )}
          </div>
        </div>
        <div className="flex-1">
          <p className="text-muted-foreground">{description}</p>
        </div>
        <div className="mt-1 flex gap-2">
          {!!announcementLink && (
            <Button variant="outline" className="flex-1" asChild>
              <a href={announcementLink}>Announcement</a>
            </Button>
          )}
          {!!repositoryLink && (
            <Button variant="outline" className="flex-1" asChild>
              <a href={repositoryLink}>Repository</a>
            </Button>
          )}
          <Button variant="outline" className="flex-1" asChild>
            <a href={link}>Homepage</a>
          </Button>
        </div>
      </div>
    </Card>
  );
}



================================================
FILE: apps/docs/app/api/chat/route.ts
================================================
import { openai } from "@ai-sdk/openai";
import { jsonSchema, streamText } from "ai";
import { kv } from "@vercel/kv";
import { Ratelimit } from "@upstash/ratelimit";

export const runtime = "edge";
export const maxDuration = 30;

const ratelimit = new Ratelimit({
  redis: kv,
  limiter: Ratelimit.fixedWindow(5, "30s"),
});

export async function POST(req: Request) {
  const { messages, tools } = await req.json();
  const ip = req.headers.get("x-forwarded-for") ?? "ip";
  const { success } = await ratelimit.limit(ip);

  if (!success) {
    return new Response("Rate limit exceeded", { status: 429 });
  }

  const result = streamText({
    model: openai("gpt-4o-mini"),
    messages,
    maxTokens: 1200,
    maxSteps: 10,
    tools: {
      ...Object.fromEntries(
        Object.entries<{ parameters: unknown }>(tools).map(([name, tool]) => [
          name,
          {
            parameters: jsonSchema(tool.parameters!),
          },
        ]),
      ),
    },
    onError: console.error,
  });

  return result.toDataStreamResponse();
}



================================================
FILE: apps/docs/app/api/entelligence/route.ts
================================================
export const maxDuration = 30;

export const POST = async (req: Request) => {
  const { messages } = (await req.json()) as {
    messages: { role: "user" | "assistant"; content: string }[];
  };

  // remove the most recent user question
  const { content: question, role } = messages.pop()!;
  if (role !== "user" || !question) throw new Error("No question provided");

  const history = messages.reduce(
    (pairs, msg, i, arr) => {
      const next = arr[i + 1];
      if (msg.role === "user" && next?.role === "assistant") {
        pairs.push([msg.content, next.content]);
      }
      return pairs;
    },
    [] as [string, string][],
  );

  return fetch(process.env["ENTELLIGENCE_API_URL"]!, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Authorization: `Bearer ${process.env["ENTELLIGENCE_API_KEY"]}`,
    },
    body: JSON.stringify({
      history,
      question,
      vectorDBUrl: "assistant-ui&assistant-ui",
      advancedAgent: false,
      githubUsername: "assistant-ui",
      limitSources: 3,
      enableArtifacts: false,
    }),
  });
};



================================================
FILE: apps/docs/app/api/entelligence-history/route.ts
================================================
export const POST = async (req: Request) => {
  await fetch(process.env["ENTELLIGENCE_HISTORY_API_URL"]!, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: await req.text(),
  });

  return new Response("OK");
};



================================================
FILE: apps/docs/app/api/search/route.ts
================================================
import { getPages } from "@/app/source";
import { createSearchAPI } from "fumadocs-core/search/server";

export const { GET } = createSearchAPI("advanced", {
  indexes: getPages().map((page) => ({
    title: page.data.title,
    description: page.data.description ?? "",
    structuredData: page.data.structuredData,
    id: page.url,
    url: page.url,
  })),
});



================================================
FILE: apps/docs/app/docs/layout.config.tsx
================================================
import { pageTree } from "@/app/source";
import {
  BookIcon,
  CloudIcon,
  ProjectorIcon,
  SparklesIcon,
  WalletIcon,
} from "lucide-react";
import icon from "@/public/favicon/icon.svg";
import Image from "next/image";
import { DocsLayoutProps } from "fumadocs-ui/layouts/docs";
import { HomeLayoutProps } from "fumadocs-ui/layouts/home";

const DiscordIcon = () => {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 127.14 96.36"
      className="size-4"
    >
      <path
        fill="currentColor"
        d="M107.7,8.07A105.15,105.15,0,0,0,81.47,0a72.06,72.06,0,0,0-3.36,6.83A97.68,97.68,0,0,0,49,6.83,72.37,72.37,0,0,0,45.64,0,105.89,105.89,0,0,0,19.39,8.09C2.79,32.65-1.71,56.6.54,80.21h0A105.73,105.73,0,0,0,32.71,96.36,77.7,77.7,0,0,0,39.6,85.25a68.42,68.42,0,0,1-10.85-5.18c.91-.66,1.8-1.34,2.66-2a75.57,75.57,0,0,0,64.32,0c.87.71,1.76,1.39,2.66,2a68.68,68.68,0,0,1-10.87,5.19,77,77,0,0,0,6.89,11.1A105.25,105.25,0,0,0,126.6,80.22h0C129.24,52.84,122.09,29.11,107.7,8.07ZM42.45,65.69C36.18,65.69,31,60,31,53s5-12.74,11.43-12.74S54,46,53.89,53,48.84,65.69,42.45,65.69Zm42.24,0C78.41,65.69,73.25,60,73.25,53s5-12.74,11.44-12.74S96.23,46,96.12,53,91.08,65.69,84.69,65.69Z"
      />
    </svg>
  );
};

// shared configuration
export const baseOptions: HomeLayoutProps = {
  githubUrl: "https://github.com/assistant-ui/assistant-ui",
  nav: {
    title: (
      <>
        <Image
          src={icon}
          alt="logo"
          className="inline size-4 dark:hue-rotate-180 dark:invert"
        />
        <span className="font-medium">assistant-ui</span>
      </>
    ),
    transparentMode: "none",
  },
  links: [
    {
      text: "Docs",
      url: "/docs/getting-started",
      icon: <BookIcon />,
      active: "nested-url",
    },
    {
      text: "Showcase",
      url: "/showcase",
      icon: <ProjectorIcon />,
    },
    {
      text: "Examples",
      url: "/examples",
      icon: <SparklesIcon />,
    },
    {
      text: "Dashboard",
      url: "https://cloud.assistant-ui.com/",
      icon: <CloudIcon />,
    },
    {
      text: "Pricing",
      url: "/pricing",
      icon: <WalletIcon />,
    },
    {
      type: "icon",
      text: "Discord",
      url: "https://discord.gg/S9dwgCNEFs",
      icon: <DiscordIcon />,
      external: true,
    },
  ],
};

export const sharedDocsOptions: Partial<DocsLayoutProps> = {
  ...baseOptions,
  sidebar: {
    defaultOpenLevel: 0,
  },
};

// docs layout configuration
export const docsOptions: DocsLayoutProps = {
  ...sharedDocsOptions,
  tree: pageTree,
};



================================================
FILE: apps/docs/app/docs/layout.tsx
================================================
import { DocsLayout } from "fumadocs-ui/layouts/docs";
import type { ReactNode } from "react";
import { docsOptions } from "./layout.config";
import { DocsChat } from "@/components/docs-chat/DocsChat";

export default function Layout({ children }: { children: ReactNode }) {
  return (
    <DocsLayout {...docsOptions}>
      {children}
      <DocsChat />
    </DocsLayout>
  );
}



================================================
FILE: apps/docs/app/docs/[[...slug]]/page.tsx
================================================
import { getPages, getPage } from "@/app/source";
import type { Metadata } from "next";
import { DocsPage, DocsBody } from "fumadocs-ui/page";
import { notFound } from "next/navigation";
import { cn } from "@/lib/utils";
import { buttonVariants } from "@/components/ui/button";
import { EditIcon } from "lucide-react";
import { getMDXComponents } from "@/mdx-components";
import { DocsRuntimeProvider } from "@/app/(home)/DocsRuntimeProvider";

export default async function Page(props: {
  params: Promise<{ slug?: string[] }>;
}) {
  const params = await props.params;
  const page = getPage(params.slug ?? []);
  const mdxComponents = getMDXComponents({});

  if (page == null) {
    notFound();
  }

  const path = `apps/docs/content/docs/${page.file.path}`;

  const footer = (
    <a
      href={`https://github.com/assistant-ui/assistant-ui/blob/main/${path}`}
      target="_blank"
      rel="noreferrer noopener"
      className={cn(
        buttonVariants({
          variant: "secondary",
          size: "sm",
          className: "gap-1.5 text-xs",
        }),
      )}
    >
      <EditIcon className="size-3" />
      Edit on GitHub
    </a>
  );

  return (
    <DocsPage
      toc={page.data.toc}
      full={page.data.full ?? false}
      tableOfContent={{ footer }}
    >
      <DocsBody>
        <h1>{page.data.title}</h1>
        <DocsRuntimeProvider>
          <page.data.body components={mdxComponents} />
        </DocsRuntimeProvider>
      </DocsBody>
    </DocsPage>
  );
}

export async function generateStaticParams() {
  return getPages()
    .filter((page) => page.slugs[0] === "docs")
    .map((page) => ({
      slug: page.slugs.slice(1),
    }));
}

export async function generateMetadata(props: {
  params: Promise<{ slug?: string[] }>;
}) {
  const params = await props.params;
  const page = getPage(params.slug ?? []);

  if (page == null) notFound();

  return {
    title: page.data.title,
    description: page.data.description ?? null,
  } satisfies Metadata;
}



================================================
FILE: apps/docs/app/static.json/route.ts
================================================
import { NextResponse } from "next/server";
import { type DocumentRecord } from "fumadocs-core/search/algolia";
import { getPages } from "@/app/source";

export const revalidate = false;

export function GET() {
  const results: DocumentRecord[] = [];

  for (const page of getPages()) {
    results.push({
      _id: page.url,
      structured: page.data.structuredData,
      url: page.url,
      title: page.data.title,
      description: page.data.description ?? "",
    });
  }

  return NextResponse.json(results);
}



================================================
FILE: apps/docs/components/github-stars.tsx
================================================
"use client";

import { useEffect, useState } from "react";

export function GitHubStars() {
  const [stars, setStars] = useState<number | null>(null);

  useEffect(() => {
    fetch("https://api.github.com/repos/assistant-ui/assistant-ui")
      .then((res) => res.json())
      .then((data) => setStars(data.stargazers_count))
      .catch(console.error);
  }, []);

  if (stars === null) return null;

  return (
    <div className="flex items-center gap-1">
      <span className="text-xl">🌟</span>
      <span className="text-base">{stars}</span>
    </div>
  );
}



================================================
FILE: apps/docs/components/artifacts/Artifacts.tsx
================================================
export const Artifacts = () => {
  return (
    <iframe
      title="Artifacts Example"
      className="h-full w-full border-none"
      src="https://assistant-ui-artifacts.vercel.app/"
    />
  );
};



================================================
FILE: apps/docs/components/assistant-ui/assistant-modal.tsx
================================================
"use client";

import { BotIcon, ChevronDownIcon } from "lucide-react";

import { type FC, forwardRef } from "react";
import { AssistantModalPrimitive } from "@assistant-ui/react";

import { Thread } from "@/components/assistant-ui/thread";
import { TooltipIconButton } from "@/components/assistant-ui/tooltip-icon-button";

export const AssistantModal: FC = () => {
  return (
    <AssistantModalPrimitive.Root>
      <AssistantModalPrimitive.Anchor className="fixed bottom-4 right-4 size-11">
        <AssistantModalPrimitive.Trigger asChild>
          <AssistantModalButton />
        </AssistantModalPrimitive.Trigger>
      </AssistantModalPrimitive.Anchor>
      <AssistantModalPrimitive.Content
        sideOffset={16}
        className="bg-popover text-popover-foreground data-[state=closed]:animate-out data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out data-[state=open]:zoom-in data-[state=open]:slide-in-from-bottom-1/2 data-[state=open]:slide-in-from-right-1/2 data-[state=closed]:slide-out-to-bottom-1/2 data-[state=closed]:slide-out-to-right-1/2 z-50 h-[500px] w-[400px] overflow-clip rounded-xl border p-0 shadow-md outline-none [&>.aui-thread-root]:bg-inherit"
      >
        <Thread />
      </AssistantModalPrimitive.Content>
    </AssistantModalPrimitive.Root>
  );
};

type AssistantModalButtonProps = { "data-state"?: "open" | "closed" };

const AssistantModalButton = forwardRef<
  HTMLButtonElement,
  AssistantModalButtonProps
>(({ "data-state": state, ...rest }, ref) => {
  const tooltip = state === "open" ? "Close Assistant" : "Open Assistant";

  return (
    <TooltipIconButton
      variant="default"
      tooltip={tooltip}
      side="left"
      {...rest}
      className="size-full rounded-full shadow transition-transform hover:scale-110 active:scale-90"
      ref={ref}
    >
      <BotIcon
        data-state={state}
        className="absolute size-6 transition-all data-[state=closed]:rotate-0 data-[state=open]:rotate-90 data-[state=closed]:scale-100 data-[state=open]:scale-0"
      />

      <ChevronDownIcon
        data-state={state}
        className="absolute size-6 transition-all data-[state=closed]:-rotate-90 data-[state=open]:rotate-0 data-[state=closed]:scale-0 data-[state=open]:scale-100"
      />
      <span className="sr-only">{tooltip}</span>
    </TooltipIconButton>
  );
});

AssistantModalButton.displayName = "AssistantModalButton";



================================================
FILE: apps/docs/components/assistant-ui/attachment.tsx
================================================
"use client";

import { PropsWithChildren, useEffect, useState, type FC } from "react";
import { CircleXIcon, FileIcon, PaperclipIcon } from "lucide-react";
import {
  AttachmentPrimitive,
  ComposerPrimitive,
  MessagePrimitive,
  useAttachment,
} from "@assistant-ui/react";
import { useShallow } from "zustand/shallow";
import {
  Tooltip,
  TooltipContent,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar";
import { TooltipIconButton } from "@/components/assistant-ui/tooltip-icon-button";

const useFileSrc = (file: File | undefined) => {
  const [src, setSrc] = useState<string | undefined>(undefined);

  useEffect(() => {
    if (!file) {
      setSrc(undefined);
      return;
    }

    const objectUrl = URL.createObjectURL(file);
    setSrc(objectUrl);

    return () => {
      URL.revokeObjectURL(objectUrl);
    };
  }, [file]);

  return src;
};

const useAttachmentSrc = () => {
  const { file, src } = useAttachment(
    useShallow((a): { file?: File; src?: string } => {
      if (a.type !== "image") return {};
      if (a.file) return { file: a.file };
      const src = a.content?.filter((c) => c.type === "image")[0]?.image;
      if (!src) return {};
      return { src };
    }),
  );

  return useFileSrc(file) ?? src;
};

type AttachmentPreviewProps = {
  src: string;
};

const AttachmentPreview: FC<AttachmentPreviewProps> = ({ src }) => {
  const [isLoaded, setIsLoaded] = useState(false);

  return (
    // eslint-disable-next-line @next/next/no-img-element
    <img
      src={src}
      style={{
        width: "auto",
        height: "auto",
        maxWidth: "75dvh",
        maxHeight: "75dvh",
        display: isLoaded ? "block" : "none",
        overflow: "clip",
      }}
      onLoad={() => setIsLoaded(true)}
      alt="Preview"
    />
  );
};

const AttachmentPreviewDialog: FC<PropsWithChildren> = ({ children }) => {
  const src = useAttachmentSrc();

  if (!src) return children;

  return (
    <Dialog>
      <DialogTrigger
        className="hover:bg-accent/50 cursor-pointer transition-colors"
        asChild
      >
        {children}
      </DialogTrigger>
      <DialogContent>
        <DialogTitle className="aui-sr-only">
          Image Attachment Preview
        </DialogTitle>
        <AttachmentPreview src={src} />
      </DialogContent>
    </Dialog>
  );
};

const AttachmentThumb: FC = () => {
  const isImage = useAttachment((a) => a.type === "image");
  const src = useAttachmentSrc();
  return (
    <Avatar className="bg-muted flex size-10 items-center justify-center rounded border text-sm">
      <AvatarFallback delayMs={isImage ? 200 : 0}>
        <FileIcon />
      </AvatarFallback>
      <AvatarImage src={src} />
    </Avatar>
  );
};

const AttachmentUI: FC = () => {
  const canRemove = useAttachment((a) => a.source !== "message");
  const typeLabel = useAttachment((a) => {
    const type = a.type;
    switch (type) {
      case "image":
        return "Image";
      case "document":
        return "Document";
      case "file":
        return "File";
      default:
        const _exhaustiveCheck: never = type;
        throw new Error(`Unknown attachment type: ${_exhaustiveCheck}`);
    }
  });
  return (
    <Tooltip>
      <AttachmentPrimitive.Root className="relative mt-3">
        <AttachmentPreviewDialog>
          <TooltipTrigger asChild>
            <div className="flex h-12 w-40 items-center justify-center gap-2 rounded-lg border p-1">
              <AttachmentThumb />
              <div className="flex-grow basis-0">
                <p className="text-muted-foreground line-clamp-1 text-ellipsis break-all text-xs font-bold">
                  <AttachmentPrimitive.Name />
                </p>
                <p className="text-muted-foreground text-xs">{typeLabel}</p>
              </div>
            </div>
          </TooltipTrigger>
        </AttachmentPreviewDialog>
        {canRemove && <AttachmentRemove />}
      </AttachmentPrimitive.Root>
      <TooltipContent side="top">
        <AttachmentPrimitive.Name />
      </TooltipContent>
    </Tooltip>
  );
};

const AttachmentRemove: FC = () => {
  return (
    <AttachmentPrimitive.Remove asChild>
      <TooltipIconButton
        tooltip="Remove file"
        className="text-muted-foreground [&>svg]:bg-background absolute -right-3 -top-3 size-6 [&>svg]:size-4 [&>svg]:rounded-full"
        side="top"
      >
        <CircleXIcon />
      </TooltipIconButton>
    </AttachmentPrimitive.Remove>
  );
};

export const UserMessageAttachments: FC = () => {
  return (
    <div className="col-span-full col-start-1 row-start-1 flex w-full flex-row justify-end gap-3">
      <MessagePrimitive.Attachments components={{ Attachment: AttachmentUI }} />
    </div>
  );
};

export const ComposerAttachments: FC = () => {
  return (
    <div className="flex w-full flex-row gap-3 overflow-x-auto">
      <ComposerPrimitive.Attachments
        components={{ Attachment: AttachmentUI }}
      />
    </div>
  );
};

export const ComposerAddAttachment: FC = () => {
  return (
    <ComposerPrimitive.AddAttachment asChild>
      <TooltipIconButton
        className="my-2.5 size-8 p-2 transition-opacity ease-in"
        tooltip="Add Attachment"
        variant="ghost"
      >
        <PaperclipIcon />
      </TooltipIconButton>
    </ComposerPrimitive.AddAttachment>
  );
};



================================================
FILE: apps/docs/components/assistant-ui/markdown-text.tsx
================================================
"use client";

import "@assistant-ui/react-markdown/styles/dot.css";

import {
  CodeHeaderProps,
  MarkdownTextPrimitive,
  unstable_memoizeMarkdownComponents as memoizeMarkdownComponents,
  useIsMarkdownCodeBlock,
} from "@assistant-ui/react-markdown";
import remarkGfm from "remark-gfm";
import { FC, memo, useState } from "react";
import { CheckIcon, CopyIcon } from "lucide-react";

import { TooltipIconButton } from "@/components/assistant-ui/tooltip-icon-button";
import { cn } from "@/lib/utils";
import { makePrismAsyncSyntaxHighlighter } from "@assistant-ui/react-syntax-highlighter/full";
import { coldarkDark } from "react-syntax-highlighter/dist/esm/styles/prism";

const SyntaxHighlighter = makePrismAsyncSyntaxHighlighter({
  style: coldarkDark,
  customStyle: {
    margin: 0,
    backgroundColor: "black",
  },
});

const MarkdownTextImpl = () => {
  return (
    <MarkdownTextPrimitive
      className="aui-md"
      remarkPlugins={[remarkGfm]}
      components={defaultComponents}
    />
  );
};

export const MarkdownText = memo(MarkdownTextImpl);

const CodeHeader: FC<CodeHeaderProps> = ({ language, code }) => {
  const { isCopied, copyToClipboard } = useCopyToClipboard();
  const onCopy = () => {
    if (!code || isCopied) return;
    copyToClipboard(code);
  };

  return (
    <div className="flex items-center justify-between gap-4 rounded-t-lg bg-zinc-900 px-4 py-2 text-sm font-semibold text-white">
      <span className="lowercase [&>span]:text-xs">{language}</span>
      <TooltipIconButton tooltip="Copy" onClick={onCopy}>
        {!isCopied && <CopyIcon />}
        {isCopied && <CheckIcon />}
      </TooltipIconButton>
    </div>
  );
};

const useCopyToClipboard = ({
  copiedDuration = 3000,
}: {
  copiedDuration?: number;
} = {}) => {
  const [isCopied, setIsCopied] = useState<boolean>(false);

  const copyToClipboard = (value: string) => {
    if (!value) return;

    navigator.clipboard.writeText(value).then(() => {
      setIsCopied(true);
      setTimeout(() => setIsCopied(false), copiedDuration);
    });
  };

  return { isCopied, copyToClipboard };
};

const defaultComponents = memoizeMarkdownComponents({
  h1: ({ className, ...props }) => (
    <h1
      className={cn(
        "mb-8 scroll-m-20 text-4xl font-extrabold tracking-tight last:mb-0",
        className,
      )}
      {...props}
    />
  ),
  h2: ({ className, ...props }) => (
    <h2
      className={cn(
        "mb-4 mt-8 scroll-m-20 text-3xl font-semibold tracking-tight first:mt-0 last:mb-0",
        className,
      )}
      {...props}
    />
  ),
  h3: ({ className, ...props }) => (
    <h3
      className={cn(
        "mb-4 mt-6 scroll-m-20 text-2xl font-semibold tracking-tight first:mt-0 last:mb-0",
        className,
      )}
      {...props}
    />
  ),
  h4: ({ className, ...props }) => (
    <h4
      className={cn(
        "mb-4 mt-6 scroll-m-20 text-xl font-semibold tracking-tight first:mt-0 last:mb-0",
        className,
      )}
      {...props}
    />
  ),
  h5: ({ className, ...props }) => (
    <h5
      className={cn(
        "my-4 text-lg font-semibold first:mt-0 last:mb-0",
        className,
      )}
      {...props}
    />
  ),
  h6: ({ className, ...props }) => (
    <h6
      className={cn("my-4 font-semibold first:mt-0 last:mb-0", className)}
      {...props}
    />
  ),
  p: ({ className, ...props }) => (
    <p
      className={cn("mb-5 mt-5 leading-7 first:mt-0 last:mb-0", className)}
      {...props}
    />
  ),
  a: ({ className, ...props }) => (
    <a
      className={cn(
        "text-primary font-medium underline underline-offset-4",
        className,
      )}
      {...props}
    />
  ),
  blockquote: ({ className, ...props }) => (
    <blockquote
      className={cn("border-l-2 pl-6 italic", className)}
      {...props}
    />
  ),
  ul: ({ className, ...props }) => (
    <ul
      className={cn("my-5 ml-6 list-disc [&>li]:mt-2", className)}
      {...props}
    />
  ),
  ol: ({ className, ...props }) => (
    <ol
      className={cn("my-5 ml-6 list-decimal [&>li]:mt-2", className)}
      {...props}
    />
  ),
  hr: ({ className, ...props }) => (
    <hr className={cn("my-5 border-b", className)} {...props} />
  ),
  table: ({ className, ...props }) => (
    <table
      className={cn(
        "my-5 w-full border-separate border-spacing-0 overflow-y-auto",
        className,
      )}
      {...props}
    />
  ),
  th: ({ className, ...props }) => (
    <th
      className={cn(
        "bg-muted px-4 py-2 text-left font-bold first:rounded-tl-lg last:rounded-tr-lg [&[align=center]]:text-center [&[align=right]]:text-right",
        className,
      )}
      {...props}
    />
  ),
  td: ({ className, ...props }) => (
    <td
      className={cn(
        "border-b border-l px-4 py-2 text-left last:border-r [&[align=center]]:text-center [&[align=right]]:text-right",
        className,
      )}
      {...props}
    />
  ),
  tr: ({ className, ...props }) => (
    <tr
      className={cn(
        "m-0 border-b p-0 first:border-t [&:last-child>td:first-child]:rounded-bl-lg [&:last-child>td:last-child]:rounded-br-lg",
        className,
      )}
      {...props}
    />
  ),
  sup: ({ className, ...props }) => (
    <sup
      className={cn("[&>a]:text-xs [&>a]:no-underline", className)}
      {...props}
    />
  ),
  pre: ({ className, ...props }) => (
    <pre
      className={cn(
        "overflow-x-auto rounded-b-lg bg-black p-4 text-white",
        className,
      )}
      {...props}
    />
  ),
  code: function Code({ className, ...props }) {
    const isCodeBlock = useIsMarkdownCodeBlock();
    return (
      <code
        className={cn(
          !isCodeBlock && "bg-muted rounded border font-semibold",
          className,
        )}
        {...props}
      />
    );
  },
  CodeHeader,
  SyntaxHighlighter,
});



================================================
FILE: apps/docs/components/assistant-ui/syntax-highlighter.tsx
================================================
import { PrismAsyncLight } from "react-syntax-highlighter";
import { makePrismAsyncLightSyntaxHighlighter } from "@assistant-ui/react-syntax-highlighter";

import tsx from "react-syntax-highlighter/dist/esm/languages/prism/tsx";
import python from "react-syntax-highlighter/dist/esm/languages/prism/python";

import { coldarkDark } from "react-syntax-highlighter/dist/esm/styles/prism";

// register languages you want to support
PrismAsyncLight.registerLanguage("js", tsx);
PrismAsyncLight.registerLanguage("jsx", tsx);
PrismAsyncLight.registerLanguage("ts", tsx);
PrismAsyncLight.registerLanguage("tsx", tsx);
PrismAsyncLight.registerLanguage("python", python);

export const SyntaxHighlighter = makePrismAsyncLightSyntaxHighlighter({
  style: coldarkDark,
  customStyle: {
    margin: 0,
    width: "100%",
    background: "black",
    padding: "1.5rem 1rem",
  },
});



================================================
FILE: apps/docs/components/assistant-ui/thread-list.tsx
================================================
import type { FC } from "react";
import {
  ThreadListItemPrimitive,
  ThreadListPrimitive,
} from "@assistant-ui/react";
import { ArchiveIcon, PlusIcon } from "lucide-react";

import { Button } from "@/components/ui/button";
import { TooltipIconButton } from "@/components/assistant-ui/tooltip-icon-button";

export const ThreadList: FC = () => {
  return (
    <ThreadListPrimitive.Root className="flex flex-col items-stretch gap-1.5">
      <ThreadListNew />
      <ThreadListItems />
    </ThreadListPrimitive.Root>
  );
};

const ThreadListNew: FC = () => {
  return (
    <ThreadListPrimitive.New asChild>
      <Button
        className="data-[active]:bg-muted hover:bg-muted flex items-center justify-start gap-1 rounded-lg px-2.5 py-2 text-start"
        variant="ghost"
      >
        <PlusIcon />
        New Thread
      </Button>
    </ThreadListPrimitive.New>
  );
};

const ThreadListItems: FC = () => {
  return <ThreadListPrimitive.Items components={{ ThreadListItem }} />;
};

const ThreadListItem: FC = () => {
  return (
    <ThreadListItemPrimitive.Root className="data-[active]:bg-muted hover:bg-muted focus-visible:bg-muted focus-visible:ring-ring flex items-center gap-2 rounded-lg transition-all focus-visible:outline-none focus-visible:ring-2">
      <ThreadListItemPrimitive.Trigger className="flex-grow px-3 py-2 text-start">
        <ThreadListItemTitle />
      </ThreadListItemPrimitive.Trigger>
      <ThreadListItemArchive />
    </ThreadListItemPrimitive.Root>
  );
};

const ThreadListItemTitle: FC = () => {
  return (
    <p className="text-sm">
      <ThreadListItemPrimitive.Title fallback="New Chat" />
    </p>
  );
};

const ThreadListItemArchive: FC = () => {
  return (
    <ThreadListItemPrimitive.Archive asChild>
      <TooltipIconButton
        className="hover:text-primary text-foreground ml-auto mr-3 size-4 p-0"
        variant="ghost"
        tooltip="Archive thread"
      >
        <ArchiveIcon />
      </TooltipIconButton>
    </ThreadListItemPrimitive.Archive>
  );
};



================================================
FILE: apps/docs/components/assistant-ui/thread.tsx
================================================
import {
  ActionBarPrimitive,
  BranchPickerPrimitive,
  ComposerPrimitive,
  MessagePrimitive,
  ThreadPrimitive,
} from "@assistant-ui/react";
import type { FC } from "react";
import {
  ArrowDownIcon,
  CheckIcon,
  ChevronLeftIcon,
  ChevronRightIcon,
  CopyIcon,
  PencilIcon,
  RefreshCwIcon,
  SendHorizontalIcon,
} from "lucide-react";
import { cn } from "@/lib/utils";

import { Button } from "@/components/ui/button";
import { MarkdownText } from "@/components/assistant-ui/markdown-text";
import { TooltipIconButton } from "@/components/assistant-ui/tooltip-icon-button";
import {
  ComposerAddAttachment,
  ComposerAttachments,
  UserMessageAttachments,
} from "./attachment";

export const Thread: FC = () => {
  return (
    <ThreadPrimitive.Root
      className="bg-background box-border h-full"
      style={{
        ["--thread-max-width" as string]: "42rem",
      }}
    >
      <ThreadPrimitive.Viewport className="flex h-full flex-col items-center overflow-y-scroll scroll-smooth bg-inherit px-4 pt-8">
        <ThreadWelcome />

        <ThreadPrimitive.Messages
          components={{
            UserMessage: UserMessage,
            EditComposer: EditComposer,
            AssistantMessage: AssistantMessage,
          }}
        />

        <ThreadPrimitive.If empty={false}>
          <div className="min-h-8 flex-grow" />
        </ThreadPrimitive.If>

        <div className="sticky bottom-0 mt-3 flex w-full max-w-[var(--thread-max-width)] flex-col items-center justify-end rounded-t-lg bg-inherit pb-4">
          <ThreadScrollToBottom />
          <Composer />
        </div>
      </ThreadPrimitive.Viewport>
    </ThreadPrimitive.Root>
  );
};

const ThreadScrollToBottom: FC = () => {
  return (
    <ThreadPrimitive.ScrollToBottom asChild>
      <TooltipIconButton
        tooltip="Scroll to bottom"
        variant="outline"
        className="absolute -top-8 rounded-full disabled:invisible"
      >
        <ArrowDownIcon />
      </TooltipIconButton>
    </ThreadPrimitive.ScrollToBottom>
  );
};

const ThreadWelcome: FC = () => {
  return (
    <ThreadPrimitive.Empty>
      <div className="flex w-full max-w-[var(--thread-max-width)] flex-grow flex-col">
        <div className="flex w-full flex-grow flex-col items-center justify-center">
          <p className="mt-4 font-medium">How can I help you today?</p>
        </div>
        <ThreadWelcomeSuggestions />
      </div>
    </ThreadPrimitive.Empty>
  );
};

const ThreadWelcomeSuggestions: FC = () => {
  return (
    <div className="mt-3 flex w-full items-stretch justify-center gap-4">
      <ThreadPrimitive.Suggestion
        className="hover:bg-muted/80 flex max-w-sm grow basis-0 flex-col items-center justify-center rounded-lg border p-3 transition-colors ease-in"
        prompt="What is the weather in Tokyo?"
        method="replace"
        autoSend
      >
        <span className="line-clamp-2 text-ellipsis text-sm font-semibold">
          What is the weather in Tokyo?
        </span>
      </ThreadPrimitive.Suggestion>
      <ThreadPrimitive.Suggestion
        className="hover:bg-muted/80 flex max-w-sm grow basis-0 flex-col items-center justify-center rounded-lg border p-3 transition-colors ease-in"
        prompt="What is assistant-ui?"
        method="replace"
        autoSend
      >
        <span className="line-clamp-2 text-ellipsis text-sm font-semibold">
          What is assistant-ui?
        </span>
      </ThreadPrimitive.Suggestion>
    </div>
  );
};

const Composer: FC = () => {
  return (
    <ComposerPrimitive.Root className="focus-within:border-ring/20 flex w-full flex-wrap items-end rounded-lg border bg-inherit px-2.5 shadow-sm transition-colors ease-in">
      <ComposerAttachments />
      <ComposerAddAttachment />
      <ComposerPrimitive.Input
        rows={1}
        autoFocus
        placeholder="Write a message..."
        className="placeholder:text-muted-foreground max-h-40 flex-grow resize-none border-none bg-transparent px-2 py-4 text-sm outline-none focus:ring-0 disabled:cursor-not-allowed"
      />
      <ComposerAction />
    </ComposerPrimitive.Root>
  );
};

const ComposerAction: FC = () => {
  return (
    <>
      <ThreadPrimitive.If running={false}>
        <ComposerPrimitive.Send asChild>
          <TooltipIconButton
            tooltip="Send"
            variant="default"
            className="my-2.5 size-8 p-2 transition-opacity ease-in"
          >
            <SendHorizontalIcon />
          </TooltipIconButton>
        </ComposerPrimitive.Send>
      </ThreadPrimitive.If>
      <ThreadPrimitive.If running>
        <ComposerPrimitive.Cancel asChild>
          <TooltipIconButton
            tooltip="Cancel"
            variant="default"
            className="my-2.5 size-8 p-2 transition-opacity ease-in"
          >
            <CircleStopIcon />
          </TooltipIconButton>
        </ComposerPrimitive.Cancel>
      </ThreadPrimitive.If>
    </>
  );
};

const UserMessage: FC = () => {
  return (
    <MessagePrimitive.Root className="grid w-full max-w-[var(--thread-max-width)] auto-rows-auto grid-cols-[minmax(72px,1fr)_auto] gap-y-2 py-4 [&:where(>*)]:col-start-2">
      <UserActionBar />

      <UserMessageAttachments />

      <div className="bg-muted text-foreground col-start-2 row-start-2 max-w-[calc(var(--thread-max-width)*0.8)] break-words rounded-3xl px-5 py-2.5">
        <MessagePrimitive.Parts />
      </div>

      <BranchPicker className="col-span-full col-start-1 row-start-3 -mr-1 justify-end" />
    </MessagePrimitive.Root>
  );
};

const UserActionBar: FC = () => {
  return (
    <ActionBarPrimitive.Root
      hideWhenRunning
      autohide="not-last"
      className="col-start-1 row-start-2 mr-3 mt-2.5 flex flex-col items-end"
    >
      <ActionBarPrimitive.Edit asChild>
        <TooltipIconButton tooltip="Edit">
          <PencilIcon />
        </TooltipIconButton>
      </ActionBarPrimitive.Edit>
    </ActionBarPrimitive.Root>
  );
};

const EditComposer: FC = () => {
  return (
    <ComposerPrimitive.Root className="bg-muted my-4 flex w-full max-w-[var(--thread-max-width)] flex-col gap-2 rounded-xl">
      <ComposerPrimitive.Input className="text-foreground flex h-8 w-full resize-none bg-transparent p-4 pb-0 outline-none" />

      <div className="mx-3 mb-3 flex items-center justify-center gap-2 self-end">
        <ComposerPrimitive.Cancel asChild>
          <Button variant="ghost">Cancel</Button>
        </ComposerPrimitive.Cancel>
        <ComposerPrimitive.Send asChild>
          <Button>Send</Button>
        </ComposerPrimitive.Send>
      </div>
    </ComposerPrimitive.Root>
  );
};

const AssistantMessage: FC = () => {
  return (
    <MessagePrimitive.Root className="relative grid w-full max-w-[var(--thread-max-width)] grid-cols-[auto_auto_1fr] grid-rows-[auto_1fr] py-4">
      <div className="text-foreground col-span-2 col-start-2 row-start-1 my-1.5 max-w-[calc(var(--thread-max-width)*0.8)] break-words leading-7">
        <MessagePrimitive.Parts components={{ Text: MarkdownText }} />
      </div>

      <AssistantActionBar />

      <BranchPicker className="col-start-2 row-start-2 -ml-2 mr-2" />
    </MessagePrimitive.Root>
  );
};

const AssistantActionBar: FC = () => {
  return (
    <ActionBarPrimitive.Root
      hideWhenRunning
      autohide="not-last"
      autohideFloat="single-branch"
      className="text-muted-foreground data-[floating]:bg-background col-start-3 row-start-2 -ml-1 flex gap-1 data-[floating]:absolute data-[floating]:rounded-md data-[floating]:border data-[floating]:p-1 data-[floating]:shadow-sm"
    >
      {/* <MessagePrimitive.If speaking={false}>
        <ActionBarPrimitive.Speak asChild>
          <TooltipIconButton tooltip="Read aloud">
            <AudioLinesIcon />
          </TooltipIconButton>
        </ActionBarPrimitive.Speak>
      </MessagePrimitive.If>
      <MessagePrimitive.If speaking>
        <ActionBarPrimitive.StopSpeaking asChild>
          <TooltipIconButton tooltip="Stop">
            <StopCircleIcon />
          </TooltipIconButton>
        </ActionBarPrimitive.StopSpeaking>
      </MessagePrimitive.If> */}
      <ActionBarPrimitive.Copy asChild>
        <TooltipIconButton tooltip="Copy">
          <MessagePrimitive.If copied>
            <CheckIcon />
          </MessagePrimitive.If>
          <MessagePrimitive.If copied={false}>
            <CopyIcon />
          </MessagePrimitive.If>
        </TooltipIconButton>
      </ActionBarPrimitive.Copy>
      <ActionBarPrimitive.Reload asChild>
        <TooltipIconButton tooltip="Refresh">
          <RefreshCwIcon />
        </TooltipIconButton>
      </ActionBarPrimitive.Reload>
    </ActionBarPrimitive.Root>
  );
};

const BranchPicker: FC<BranchPickerPrimitive.Root.Props> = ({
  className,
  ...rest
}) => {
  return (
    <BranchPickerPrimitive.Root
      hideWhenSingleBranch
      className={cn(
        "text-muted-foreground inline-flex items-center text-xs",
        className,
      )}
      {...rest}
    >
      <BranchPickerPrimitive.Previous asChild>
        <TooltipIconButton tooltip="Previous">
          <ChevronLeftIcon />
        </TooltipIconButton>
      </BranchPickerPrimitive.Previous>
      <span className="font-medium">
        <BranchPickerPrimitive.Number /> / <BranchPickerPrimitive.Count />
      </span>
      <BranchPickerPrimitive.Next asChild>
        <TooltipIconButton tooltip="Next">
          <ChevronRightIcon />
        </TooltipIconButton>
      </BranchPickerPrimitive.Next>
    </BranchPickerPrimitive.Root>
  );
};

const CircleStopIcon = () => {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 16 16"
      fill="currentColor"
      width="16"
      height="16"
    >
      <rect width="10" height="10" x="3" y="3" rx="2" />
    </svg>
  );
};



================================================
FILE: apps/docs/components/assistant-ui/tooltip-icon-button.tsx
================================================
"use client";

import { ComponentPropsWithRef, forwardRef } from "react";

import {
  Tooltip,
  TooltipContent,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { Button } from "@/components/ui/button";
import { cn } from "@/lib/utils";

export type TooltipIconButtonProps = ComponentPropsWithRef<typeof Button> & {
  tooltip: string;
  side?: "top" | "bottom" | "left" | "right";
};

export const TooltipIconButton = forwardRef<
  HTMLButtonElement,
  TooltipIconButtonProps
>(({ children, tooltip, side = "bottom", className, ...rest }, ref) => {
  return (
    <Tooltip>
      <TooltipTrigger asChild>
        <Button
          variant="ghost"
          size="icon"
          {...rest}
          className={cn("size-6 p-1", className)}
          ref={ref}
        >
          {children}
          <span className="sr-only">{tooltip}</span>
        </Button>
      </TooltipTrigger>
      <TooltipContent side={side}>{tooltip}</TooltipContent>
    </Tooltip>
  );
});

TooltipIconButton.displayName = "TooltipIconButton";



================================================
FILE: apps/docs/components/chatgpt/ChatGPT.tsx
================================================
"use client";

import { cn } from "@/lib/utils";
import {
  ActionBarPrimitive,
  BranchPickerPrimitive,
  ComposerPrimitive,
  MessagePrimitive,
  ThreadPrimitive,
} from "@assistant-ui/react";
import * as Avatar from "@radix-ui/react-avatar";
import {
  ArrowUpIcon,
  CheckIcon,
  ChevronLeftIcon,
  ChevronRightIcon,
  CopyIcon,
  Pencil1Icon,
  ReloadIcon,
} from "@radix-ui/react-icons";
import type { ComponentPropsWithoutRef, FC } from "react";
import { Button } from "../ui/button";
import { Tooltip, TooltipContent, TooltipTrigger } from "../ui/tooltip";

export const ChatGPT: FC = () => {
  return (
    <ThreadPrimitive.Root className="text-foreground dark flex h-full flex-col items-stretch bg-[#212121] px-4">
      <ThreadPrimitive.Viewport className="flex flex-grow flex-col gap-8 overflow-y-scroll pt-16">
        <ThreadPrimitive.Empty>
          <div className="flex flex-grow flex-col items-center justify-center">
            <Avatar.Root className="flex h-12 w-12 items-center justify-center rounded-[24px] border border-white/15 shadow">
              <Avatar.AvatarFallback>C</Avatar.AvatarFallback>
            </Avatar.Root>
            <p className="mt-4 text-xl text-white">How can I help you today?</p>
          </div>
        </ThreadPrimitive.Empty>

        <ThreadPrimitive.Messages
          components={{
            UserMessage,
            EditComposer,
            AssistantMessage,
          }}
        />
      </ThreadPrimitive.Viewport>

      <ComposerPrimitive.Root className="mx-auto flex w-full max-w-screen-md items-end rounded-3xl bg-white/5 pl-2">
        <ComposerPrimitive.Input
          placeholder="Message ChatGPT"
          className="h-12 max-h-40 flex-grow resize-none bg-transparent p-3.5 text-sm text-white outline-none placeholder:text-white/50"
        />
        <ThreadPrimitive.If running={false}>
          <ComposerPrimitive.Send className="m-2 flex size-8 items-center justify-center rounded-full bg-white transition-opacity disabled:opacity-10">
            <ArrowUpIcon className="size-5 text-black [&_path]:stroke-black [&_path]:stroke-[1]" />
          </ComposerPrimitive.Send>
        </ThreadPrimitive.If>
        <ThreadPrimitive.If running>
          <ComposerPrimitive.Cancel className="m-2 flex size-8 items-center justify-center rounded-full bg-white">
            <div className="size-2.5 bg-black" />
          </ComposerPrimitive.Cancel>
        </ThreadPrimitive.If>
      </ComposerPrimitive.Root>
      <p className="p-2 text-center text-xs text-[#cdcdcd]">
        ChatGPT can make mistakes. Check important info.
      </p>
    </ThreadPrimitive.Root>
  );
};

const UserMessage: FC = () => {
  return (
    <MessagePrimitive.Root className="relative mx-auto flex w-full max-w-screen-md flex-col items-end gap-1">
      <div className="flex items-start gap-4">
        <ActionBarPrimitive.Root
          hideWhenRunning
          autohide="not-last"
          autohideFloat="single-branch"
          className="mt-2"
        >
          <ActionBarPrimitive.Edit asChild>
            <ActionButton tooltip="Edit">
              <Pencil1Icon />
            </ActionButton>
          </ActionBarPrimitive.Edit>
        </ActionBarPrimitive.Root>

        <div className="rounded-3xl bg-white/5 px-5 py-2 text-[#eee]">
          <MessagePrimitive.Parts />
        </div>
      </div>

      <BranchPicker className="mr-3 mt-2" />
    </MessagePrimitive.Root>
  );
};

const EditComposer: FC = () => {
  return (
    <ComposerPrimitive.Root className="mx-auto flex w-full max-w-screen-md flex-col justify-end gap-1 rounded-3xl bg-white/15">
      <ComposerPrimitive.Input className="flex h-8 w-full resize-none bg-transparent p-5 pb-0 text-white outline-none" />

      <div className="m-3 mt-2 flex items-center justify-center gap-2 self-end">
        <ComposerPrimitive.Cancel className="rounded-full bg-zinc-900 px-3 py-2 text-sm font-semibold text-white hover:bg-zinc-800">
          Cancel
        </ComposerPrimitive.Cancel>
        <ComposerPrimitive.Send className="rounded-full bg-white px-3 py-2 text-sm font-semibold text-black hover:bg-white/90">
          Send
        </ComposerPrimitive.Send>
      </div>
    </ComposerPrimitive.Root>
  );
};

const AssistantMessage: FC = () => {
  return (
    <MessagePrimitive.Root className="relative mx-auto flex w-full max-w-screen-md gap-3">
      <Avatar.Root className="flex size-8 flex-shrink-0 items-center justify-center rounded-[24px] border border-white/15 shadow">
        <Avatar.AvatarFallback className="text-xs text-white">
          C
        </Avatar.AvatarFallback>
      </Avatar.Root>

      <div className="pt-1">
        <div className="text-[#eee]">
          <MessagePrimitive.Parts />
        </div>

        <div className="flex pt-2">
          <BranchPicker />

          <ActionBarPrimitive.Root
            hideWhenRunning
            autohide="not-last"
            autohideFloat="single-branch"
            className="flex items-center gap-1 rounded-lg data-[floating]:absolute data-[floating]:border-2 data-[floating]:p-1"
          >
            <ActionBarPrimitive.Reload asChild>
              <ActionButton tooltip="Reload">
                <ReloadIcon />
              </ActionButton>
            </ActionBarPrimitive.Reload>
            <ActionBarPrimitive.Copy asChild>
              <ActionButton tooltip="Copy">
                <MessagePrimitive.If copied>
                  <CheckIcon />
                </MessagePrimitive.If>
                <MessagePrimitive.If copied={false}>
                  <CopyIcon />
                </MessagePrimitive.If>
              </ActionButton>
            </ActionBarPrimitive.Copy>
          </ActionBarPrimitive.Root>
        </div>
      </div>
    </MessagePrimitive.Root>
  );
};

const BranchPicker: FC<{ className?: string }> = ({ className }) => {
  return (
    <BranchPickerPrimitive.Root
      hideWhenSingleBranch
      className={cn(
        "inline-flex items-center text-sm font-semibold text-[#b4b4b4]",
        className,
      )}
    >
      <BranchPickerPrimitive.Previous asChild>
        <ActionButton tooltip="Previous">
          <ChevronLeftIcon />
        </ActionButton>
      </BranchPickerPrimitive.Previous>
      <BranchPickerPrimitive.Number />/<BranchPickerPrimitive.Count />
      <BranchPickerPrimitive.Next asChild>
        <ActionButton tooltip="Next">
          <ChevronRightIcon />
        </ActionButton>
      </BranchPickerPrimitive.Next>
    </BranchPickerPrimitive.Root>
  );
};

type ActionButtonProps = ComponentPropsWithoutRef<typeof Button> & {
  tooltip: string;
};

const ActionButton: FC<ActionButtonProps> = ({
  tooltip,
  className,
  children,
  ...rest
}) => {
  return (
    <Tooltip>
      <TooltipTrigger asChild>
        <Button
          variant="ghost"
          size="icon"
          className={cn("size-auto p-1 text-[#b4b4b4]", className)}
          {...rest}
        >
          {children}
          <span className="sr-only">{tooltip}</span>
        </Button>
      </TooltipTrigger>
      <TooltipContent side="bottom">{tooltip}</TooltipContent>
    </Tooltip>
  );
};



================================================
FILE: apps/docs/components/claude/Claude.tsx
================================================
"use client";

import { cn } from "@/lib/utils";
import {
  ActionBarPrimitive,
  ComposerPrimitive,
  MessagePrimitive,
  ThreadPrimitive,
  useMessage,
} from "@assistant-ui/react";
import * as Avatar from "@radix-ui/react-avatar";
import { ArrowUpIcon, ClipboardIcon, ReloadIcon } from "@radix-ui/react-icons";
import type { FC } from "react";
import { MarkdownText } from "../assistant-ui/markdown-text";

export const Claude: FC = () => {
  return (
    <ThreadPrimitive.Root className="flex h-full flex-col items-stretch bg-[#2b2a27] px-4 pt-16 font-serif">
      <ThreadPrimitive.Viewport className="flex flex-grow flex-col overflow-y-scroll">
        <ThreadPrimitive.Messages components={{ Message: ChatMessage }} />
        <ThreadPrimitive.If empty={false}>
          <p className="mx-auto w-full max-w-screen-md p-2 text-right text-xs text-[#b8b5a9]">
            Claude can make mistakes. Please double-check responses.
          </p>
        </ThreadPrimitive.If>
      </ThreadPrimitive.Viewport>

      <ComposerPrimitive.Root className="mx-auto flex w-full max-w-screen-md flex-col rounded-t-xl border border-[#6c6a6040] bg-[#393937] p-0.5">
        <div className="flex">
          <ComposerPrimitive.Input
            placeholder="Reply to Claude..."
            className="h-12 flex-grow resize-none bg-transparent p-3.5 text-sm text-white outline-none placeholder:text-white/50"
          />
          <ComposerPrimitive.Send
            type="submit"
            className="m-2 flex h-8 w-8 items-center justify-center rounded-lg bg-[#ae5630] text-2xl font-bold disabled:opacity-0"
          >
            <ArrowUpIcon
              width={16}
              height={16}
              className="text-[#ddd] [&_path]:stroke-white [&_path]:stroke-[0.5]"
            />
          </ComposerPrimitive.Send>
        </div>
        <p className="-mt-1 mb-3 px-3.5 text-sm text-white/70">
          Claude 3 Sonnet
        </p>
      </ComposerPrimitive.Root>
    </ThreadPrimitive.Root>
  );
};

const ChatMessage: FC = () => {
  const role = useMessage((m) => m.role);

  return (
    <MessagePrimitive.Root className="relative mx-auto mb-4 flex w-full max-w-screen-md flex-col gap-3">
      <div
        className={cn(
          "relative flex gap-2 rounded-2xl bg-gradient-to-b from-[#21201c] from-50% to-[#1a1915] px-3 py-2.5",
          role === "user" && "self-start",
          role === "assistant" &&
            "bg-[linear-gradient(to_bottom,_hsla(60_1.8%_22%_/_0.75)_0%,_hsla(60_1.8%_22%_/_0)_90%)] pb-4 font-serif",
        )}
      >
        {role === "assistant" && (
          <div className="absolute inset-0 rounded-2xl border-[0.5px] border-[hsla(50_5.8%_40%/0.15)] bg-[radial-gradient(ellipse_at_left_top,_hsla(60_1.8%_22%/0.5)_0%,_hsla(60_1.8%_22%/0.3)_60%)] shadow-[0_4px_24px_rgba(0,0,0,0.015)]" />
        )}
        <div className="relative flex gap-2">
          <MessagePrimitive.If user>
            <Avatar.Root className="flex h-6 w-6 flex-shrink-0 items-center justify-center rounded-[24px] bg-white">
              <Avatar.AvatarFallback className="text-xs">
                U
              </Avatar.AvatarFallback>
            </Avatar.Root>
          </MessagePrimitive.If>

          <p className="text-[#eee]">
            <MessagePrimitive.Parts components={{ Text: MarkdownText }} />
          </p>
        </div>
      </div>

      <MessagePrimitive.If assistant>
        <ActionBarPrimitive.Root
          autohide="not-last"
          className="absolute -bottom-3 mr-3 flex items-center gap-3 self-end rounded-lg border border-[#6c6a6040] bg-[#393937] px-2 py-1"
        >
          <ActionBarPrimitive.Reload className="flex items-center gap-1 font-mono text-xs text-[#b4b4b4] hover:text-white">
            <ReloadIcon width={12} height={12} />
            Retry
          </ActionBarPrimitive.Reload>

          <ActionBarPrimitive.Copy className="flex items-center gap-1 font-mono text-xs text-[#b4b4b4] hover:text-white">
            <ClipboardIcon width={12} height={12} />
            Copy
          </ActionBarPrimitive.Copy>
        </ActionBarPrimitive.Root>
      </MessagePrimitive.If>
    </MessagePrimitive.Root>
  );
};



================================================
FILE: apps/docs/components/docs/DataAttributesTable.tsx
================================================
import { Box, Code, Table, Text } from "@radix-ui/themes";
import React from "react";

type KeyboardDef = {
  attribute: string;
  values: string;
};

export function DataAttributesTable({ data }: { data: KeyboardDef[] }) {
  return (
    <Box my="5" asChild>
      <Table.Root variant="surface">
        <Table.Header>
          <Table.Row>
            <Table.ColumnHeaderCell style={{ width: "37%" }}>
              Data attribute
            </Table.ColumnHeaderCell>
            <Table.ColumnHeaderCell>Values</Table.ColumnHeaderCell>
          </Table.Row>
        </Table.Header>

        <Table.Body>
          {data.map(({ attribute, values }, i) => {
            const key = `${attribute}-${i}`;
            return (
              <Table.Row key={key}>
                <Table.RowHeaderCell>
                  <Code size="2">{attribute}</Code>
                </Table.RowHeaderCell>

                <Table.Cell>
                  {Array.isArray(values) ? (
                    <Code size="2" color="gray">
                      {values.map(
                        (value, index) =>
                          `"${value}" ${values.length !== index + 1 ? " | " : ""}`,
                      )}
                    </Code>
                  ) : (
                    <Text as="p" size="2">
                      {values}
                    </Text>
                  )}
                </Table.Cell>
              </Table.Row>
            );
          })}
        </Table.Body>
      </Table.Root>
    </Box>
  );
}



================================================
FILE: apps/docs/components/docs/index.ts
================================================
export { KeyboardTable } from "./KeyboardTable";
export { DataAttributesTable } from "./DataAttributesTable";
export { ParametersTable } from "./ParametersTable";



================================================
FILE: apps/docs/components/docs/KeyboardTable.tsx
================================================
import { Box, Flex, Kbd, Table } from "@radix-ui/themes";
import type React from "react";

type KeyboardDef = {
  keys: string[];
  description: React.ReactNode;
};

export function KeyboardTable({ data }: { data: KeyboardDef[] }) {
  return (
    <Box my="5" asChild>
      <Table.Root variant="surface">
        <Table.Header>
          <Table.Row>
            <Table.ColumnHeaderCell style={{ width: "37%" }}>
              Key
            </Table.ColumnHeaderCell>
            <Table.ColumnHeaderCell>Description</Table.ColumnHeaderCell>
          </Table.Row>
        </Table.Header>

        <Table.Body>
          {data.map(({ keys, description }, i) => {
            const key = `${description}-${i}`;
            return (
              <Table.Row key={key}>
                <Table.Cell>
                  <Flex gap="2">
                    {keys.map((k) => (
                      <Kbd key={k}>{k}</Kbd>
                    ))}
                  </Flex>
                </Table.Cell>

                <Table.Cell>{description}</Table.Cell>
              </Table.Row>
            );
          })}
        </Table.Body>
      </Table.Root>
    </Box>
  );
}



================================================
FILE: apps/docs/components/docs/ParametersTable.tsx
================================================
import { cn } from "@/lib/utils";
import Link from "next/link";
import type { FC, ReactNode } from "react";

type ParameterDef = {
  name: string;
  type?: string;
  description: string | ReactNode;
  required?: boolean;
  default?: string;
  children?: Array<ParametersTableProps>;
};

type ParameterProps = {
  parameter: ParameterDef;
  isLast: boolean;
};

const COMMON_PARAMS: Record<string, ParameterDef> = {
  asChild: {
    name: "asChild",
    type: "boolean",
    default: "false",
    description: (
      <>
        Change the default rendered element for the one passed as a child,
        merging their props and behavior.
        <br />
        <br />
        Read the{" "}
        <Link
          className="font-semibold underline"
          href="/docs/api-reference/primitives/composition"
        >
          Composition
        </Link>{" "}
        guide for more details.
      </>
    ),
  },
};

const Parameter: FC<ParameterProps> = ({
  parameter: partialParameter,
  isLast,
}) => {
  const parameter = {
    ...COMMON_PARAMS[partialParameter.name],
    ...partialParameter,
  };

  return (
    <div
      className={cn("flex flex-col gap-1 px-3.5 py-3.5", !isLast && "border-b")}
    >
      <div className="relative flex gap-2">
        <h3 className="font-mono text-sm font-semibold">
          {parameter.name}
          {!parameter.required && !parameter.default && "?"}
          {!!parameter.type && ":"}
        </h3>
        <div className="text-foreground/70 w-full font-mono text-sm">
          {parameter.type}
          {parameter.default && ` = ${parameter.default}`}
        </div>
      </div>
      <div>
        <p className="text-foreground/70 text-sm">{parameter.description}</p>
      </div>
      {parameter.children?.map((property) => (
        <ParametersBox key={property.type} {...property} />
      ))}
    </div>
  );
};

const ParametersList = ({
  parameters,
}: {
  parameters: Array<ParameterDef>;
}) => {
  return parameters.map((parameter, idx) => (
    <Parameter
      key={parameter.name}
      parameter={parameter}
      isLast={idx === parameters.length - 1}
    />
  ));
};
const ParametersBox: FC<ParametersTableProps> = ({ type, parameters }) => {
  return (
    <div
      className={cn(
        "relative m-2 mb-1 flex flex-col rounded-lg border",
        type && "mt-4 pt-3",
      )}
    >
      {!!type && (
        <h3 className="bg-background text-foreground/70 absolute right-3 top-0 z-50 -translate-y-1/2 rounded-md border px-4 py-2 font-mono text-xs font-semibold">
          {type}
        </h3>
      )}
      <ParametersList parameters={parameters} />
    </div>
  );
};

export type ParametersTableProps = {
  type?: string | undefined;
  parameters: Array<ParameterDef>;
};

export const ParametersTable: FC<ParametersTableProps> = ({
  type,
  parameters,
}) => {
  return (
    <div className={cn("not-prose -mx-2 mt-4", type && "mt-6")}>
      <ParametersBox type={type} parameters={parameters} />
    </div>
  );
};



================================================
FILE: apps/docs/components/docs/parameters/context.tsx
================================================
import { ParametersTableProps } from "../ParametersTable";

export const AssistantRuntimeState: ParametersTableProps = {
  type: "AssistantRuntime",
  parameters: [
    {
      name: "switchToNewThread",
      type: "() => void",
      description: "Switch to a new thread.",
      required: true,
    },
  ],
};

export const AssistantToolUIsState: ParametersTableProps = {
  type: "AssistantToolUIsState",
  parameters: [
    {
      name: "getToolUI",
      type: "(toolName: string) => ToolCallMessagePartProps",
      description: "Gets the current tool UI for a given tool name.",
      required: true,
      children: [
        {
          type: "ToolCallMessagePartProps<TArgs, TResult>",
          parameters: [
            {
              name: "part",
              type: "ToolCallMessagePart<TArgs, TResult>",
              description: "The tool call message part.",
            },
            {
              name: "status",
              type: "MessagePartStatus",
              description: "The tool call status.",
            },
            {
              name: "addResult",
              type: "(result: TResult | ToolResponse<TResult>) => void",
              description: "Adds a result to the tool call.",
            },
          ],
        },
      ],
    },
    {
      name: "setToolUI",
      type: "(toolName: string, render: ToolCallMessagePartComponent) => Unsubscribe",
      description: "Sets the tool UI.",
      required: true,
    },
  ],
};

export const ThreadState: ParametersTableProps = {
  type: "ThreadState",
  parameters: [
    {
      name: "isRunning",
      type: "boolean",
      required: true,
      description: "Whether the thread is running.",
    },
    {
      name: "isDisabled",
      type: "boolean",
      required: true,
      description: "Whether the thread is disabled.",
    },
  ],
};

export const ThreadMessagesState: ParametersTableProps = {
  type: "ThreadMessagesState",
  parameters: [
    {
      name: "messages",
      type: "readonly ThreadMessage[]",
      required: true,
      description: "The messages in the thread.",
    },
  ],
};

export const ThreadRuntimeState: ParametersTableProps = {
  type: "ThreadRuntime",
  parameters: [
    {
      name: "getBranches",
      type: "(messageId: string) => readonly string[]",
      required: true,
      description: "A function to get the branches for a message.",
    },
    {
      name: "switchToBranch",
      type: "(branchId: string) => void",
      required: true,
      description: "A function to switch to a branch.",
    },
    {
      name: "append",
      type: "(message: AppendMessage) => void",
      required: true,
      description: "A function to append a message to the thread.",
    },
    {
      name: "startRun",
      type: "(parentId: string | null) => void",
      required: true,
      description: "A function to start a run.",
    },
    {
      name: "cancelRun",
      type: "() => void",
      required: true,
      description: "A function to cancel a run.",
    },
    {
      name: "addToolResult",
      type: "(options: AddToolResultOptions) => void",
      required: true,
      description: "A function to add a tool result.",
    },
  ],
};

export const BaseComposerState: ParametersTableProps = {
  type: "BaseComposerState",
  parameters: [
    {
      name: "text",
      type: "string",
      required: true,
      description: "The current text of the composer.",
    },
    {
      name: "setText",
      type: "(text: string) => void",
      required: true,
      description: "A function to set the text of the composer.",
    },
    {
      name: "attachments",
      type: "readonly Attachment[]",
      required: true,
      description: "The current attachments of the composer.",
    },
    {
      name: "addAttachment",
      type: "(attachment: Attachment) => void",
      required: true,
      description: "A function to add an attachment to the composer.",
    },
    {
      name: "removeAttachment",
      type: "(attachmentId: string) => void",
      required: true,
      description: "A function to remove an attachment from the composer.",
    },
    {
      name: "reset",
      type: "() => void",
      required: true,
      description: "A function to reset the composer.",
    },
  ],
};

export const ComposerState: ParametersTableProps = {
  type: "ComposerState",
  parameters: [
    ...BaseComposerState.parameters,
    {
      name: "canCancel",
      type: "true",
      required: true,
      description: "Whether the composer can be canceled.",
    },
    {
      name: "isEditing",
      type: "true",
      required: true,
      description: "Whether the composer is in edit mode.",
    },
    {
      name: "send",
      type: "() => void",
      required: true,
      description: "A function to send the message.",
    },
    {
      name: "cancel",
      type: "() => void",
      required: true,
      description: "A function to cancel the run.",
    },
    {
      name: "focus",
      type: "() => void",
      required: true,
      description: "A function to focus the composer.",
    },
    {
      name: "onFocus",
      type: "(listener: () => void) => Unsubscribe",
      required: true,
      description: "A function to subscribe to focus events.",
    },
  ],
};

export const EditComposerState: ParametersTableProps = {
  type: "EditComposerState",
  parameters: [
    ...BaseComposerState.parameters,
    {
      name: "canCancel",
      type: "boolean",
      required: true,
      description: "Whether the composer can be canceled.",
    },
    {
      name: "isEditing",
      type: "boolean",
      required: true,
      description: "Whether the composer is in edit mode.",
    },
    {
      name: "edit",
      type: "() => void",
      required: true,
      description: "A function to enter edit mode.",
    },
    {
      name: "send",
      type: "() => void",
      required: true,
      description: "A function to send the message.",
    },
    {
      name: "cancel",
      type: "() => void",
      required: true,
      description: "A function to exit the edit mode.",
    },
  ],
};

export const ThreadViewportState: ParametersTableProps = {
  type: "ThreadViewportState",
  parameters: [
    {
      name: "isAtBottom",
      type: "boolean",
      required: true,
      description: "Whether the thread is at the bottom.",
    },
    {
      name: "scrollToBottom",
      type: "() => void",
      required: true,
      description: "A function to scroll to the bottom.",
    },
    {
      name: "onScrollToBottom",
      type: "(callback: () => void) => Unsubscribe",
      required: true,
      description: "A function to subscribe to scroll to bottom events.",
    },
  ],
};

export const MessagePartState: ParametersTableProps = {
  type: "MessagePartState",
  parameters: [
    {
      name: "part",
      type: "Readonly<MessagePartState>",
      required: true,
      description: "The current message part.",
    },
    {
      name: "status",
      type: "MessageStatus",
      required: true,
      description: "The current message part status.",
      children: [
        {
          type: "MessageStatus",
          parameters: [
            {
              name: "type",
              type: "'running' | 'requires-action' | 'complete' | 'incomplete'",
              required: true,
              description: "The status.",
            },
            {
              name: "finish-reason",
              type: "'stop' | 'cancelled' | 'length' | 'content-filter' | 'tool-calls' | 'other' | 'unknown'",
              required: false,
              description: "The finish reason if the status is 'incomplete'.",
            },
            {
              name: "error",
              type: "unknown",
              required: false,
              description: "The error object if the status is 'error'.",
            },
          ],
        },
      ],
    },
  ],
};

export const MessageState: ParametersTableProps = {
  type: "MessageState",
  parameters: [
    {
      name: "message",
      type: "Readonly<ThreadMessage>",
      required: true,
      description: "The current message.",
    },
    {
      name: "parentId",
      type: "string | null",
      required: true,
      description: "The parent message id.",
    },
    {
      name: "branches",
      type: "readonly string[]",
      required: true,
      description: "The branches for the message.",
    },
    {
      name: "isLast",
      type: "boolean",
      required: true,
      description: "Whether the message is the last in the thread.",
    },
  ],
};

export const MessageUtilsState: ParametersTableProps = {
  type: "MessageUtilsState",
  parameters: [
    {
      name: "isCopied",
      type: "boolean",
      required: true,
      description: "Whether the message is copied.",
    },
    {
      name: "setIsCopied",
      type: "(value: boolean) => void",
      required: true,
      description: "A function to set the is copied.",
    },
    {
      name: "isHovering",
      type: "boolean",
      required: true,
      description: "Whether the message is being hovered.",
    },
    {
      name: "setIsHovering",
      type: "(value: boolean) => void",
      required: true,
      description: "A function to set the is hovering.",
    },
    {
      name: "isSpeaking",
      type: "boolean",
      required: true,
      description: "Whether the message is currently being spoken.",
    },
    {
      name: "stopSpeaking",
      type: "() => void",
      required: true,
      description: "A function to stop the message from being spoken.",
    },
    {
      name: "addUtterance",
      type: "(utterance: SpeechSynthesisAdapter.Utterance) => void",
      required: true,
      description: "A function to add a speech utterance.",
    },
  ],
};

export const ComposerAttachmentState: ParametersTableProps = {
  type: "ComposerAttachmentState",
  parameters: [
    {
      name: "attachment",
      type: "ComposerAttachment",
      required: true,
      description: "The current composer attachment.",
    },
  ],
};

export const MessageAttachmentState: ParametersTableProps = {
  type: "MessageAttachmentState",
  parameters: [
    {
      name: "attachment",
      type: "MessageAttachment",
      required: true,
      description: "The current message attachment.",
    },
  ],
};



================================================
FILE: apps/docs/components/docs/parameters/runtime.tsx
================================================
import { ParametersTable } from "@/components/docs";

export const AssistantRuntimeProviderProps = () => {
  return (
    <ParametersTable
      type="AssistantRuntimeProviderProps"
      parameters={[
        {
          name: "runtime",
          type: "AssistantRuntime",
          required: true,
          description: "The runtime to provide to the rest of your app.",
          children: [
            {
              type: "AssistantRuntime",
              parameters: [
                {
                  name: "capabilities",
                  type: "RuntimeCapabilities",
                  required: true,
                  description: "The capabilities of the runtime.",
                  children: [
                    {
                      type: "RuntimeCapability",
                      parameters: [
                        {
                          name: "edit",
                          type: "boolean",
                          required: true,
                          description:
                            "Whether the runtime supports editing messages.",
                        },
                        {
                          name: "reload",
                          type: "boolean",
                          required: true,
                          description:
                            "Whether the runtime supports reloading messages.",
                        },
                        {
                          name: "cancel",
                          type: "boolean",
                          required: true,
                          description:
                            "Whether the runtime supports cancelling runs.",
                        },
                        {
                          name: "unstable_copy",
                          type: "boolean",
                          required: true,
                          description:
                            "Whether the runtime supports copying messages.",
                        },
                        {
                          name: "speak",
                          type: "boolean",
                          required: true,
                          description:
                            "Whether the runtime supports speaking messages.",
                        },
                        {
                          name: "attachments",
                          type: "boolean",
                          required: true,
                          description:
                            "Whether the runtime supports attachments.",
                        },
                      ],
                    },
                  ],
                },
                {
                  name: "messages",
                  type: "readonly ThreadMessage[]",
                  required: true,
                  description: "The messages in the thread.",
                },
                {
                  name: "isDisabled",
                  type: "boolean",
                  required: true,
                  description: "Whether the thread is disabled.",
                },
                {
                  name: "getBranches",
                  type: "(messageId: string) => readonly string[]",
                  required: true,
                  description: "A function to get the branches for a message.",
                },
                {
                  name: "switchToBranch",
                  type: "(branchId: string) => void",
                  required: true,
                  description: "A function to switch to a branch.",
                },
                {
                  name: "append",
                  type: "(message: AppendMessage) => void",
                  required: true,
                  description: "A function to append a message to the thread.",
                },
                {
                  name: "startRun",
                  type: "(parentId: string | null) => void",
                  required: true,
                  description: "A function to start a run.",
                },
                {
                  name: "cancelRun",
                  type: "() => void",
                  required: true,
                  description: "A function to cancel a run.",
                },
                {
                  name: "addToolResult",
                  type: "(options: AddToolResultOptions) => void",
                  required: true,
                  description: "A function to add a tool result.",
                },
                {
                  name: "subscribe",
                  type: "(callback: () => void) => Unsubscribe",
                  required: true,
                  description: "A function to subscribe to updates.",
                },
                {
                  name: "registerModelContextProvider",
                  type: "(provider: ModelContextProvider) => Unsubscribe",
                  required: true,
                  description:
                    "A function to register a model context provider.",
                },
              ],
            },
          ],
        },
      ]}
    />
  );
};



================================================
FILE: apps/docs/components/docs-chat/assistant-modal.tsx
================================================
"use client";

import { BotIcon, ChevronDownIcon } from "lucide-react";

import { type FC, forwardRef } from "react";
import { AssistantModalPrimitive } from "@assistant-ui/react";

import { Thread } from "./thread";
import { TooltipIconButton } from "@/components/assistant-ui/tooltip-icon-button";

export const AssistantModal: FC = () => {
  return (
    <AssistantModalPrimitive.Root>
      <AssistantModalPrimitive.Anchor className="fixed bottom-4 right-4 size-11">
        <AssistantModalPrimitive.Trigger asChild>
          <AssistantModalButton />
        </AssistantModalPrimitive.Trigger>
      </AssistantModalPrimitive.Anchor>
      <AssistantModalPrimitive.Content
        sideOffset={16}
        className="bg-popover text-popover-foreground data-[state=closed]:animate-out data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out data-[state=open]:zoom-in data-[state=open]:slide-in-from-bottom-1/2 data-[state=open]:slide-in-from-right-1/2 data-[state=closed]:slide-out-to-bottom-1/2 data-[state=closed]:slide-out-to-right-1/2 z-50 h-[500px] w-[400px] overflow-clip rounded-xl border p-0 shadow-md outline-none [&>.aui-thread-root]:bg-inherit"
      >
        <Thread />
      </AssistantModalPrimitive.Content>
    </AssistantModalPrimitive.Root>
  );
};

type AssistantModalButtonProps = { "data-state"?: "open" | "closed" };

const AssistantModalButton = forwardRef<
  HTMLButtonElement,
  AssistantModalButtonProps
>(({ "data-state": state, ...rest }, ref) => {
  const tooltip = state === "open" ? "Close Assistant" : "Open Assistant";

  return (
    <TooltipIconButton
      variant="default"
      tooltip={tooltip}
      side="left"
      {...rest}
      className="size-full rounded-full shadow transition-transform hover:scale-110 active:scale-90"
      ref={ref}
    >
      <BotIcon
        data-state={state}
        className="absolute size-6 transition-all data-[state=closed]:rotate-0 data-[state=open]:rotate-90 data-[state=closed]:scale-100 data-[state=open]:scale-0"
      />

      <ChevronDownIcon
        data-state={state}
        className="absolute size-6 transition-all data-[state=closed]:-rotate-90 data-[state=open]:rotate-0 data-[state=closed]:scale-0 data-[state=open]:scale-100"
      />
      <span className="sr-only">{tooltip}</span>
    </TooltipIconButton>
  );
});

AssistantModalButton.displayName = "AssistantModalButton";



================================================
FILE: apps/docs/components/docs-chat/DocsChat.tsx
================================================
"use client";

import {
  AssistantRuntimeProvider,
  ChatModelAdapter,
  useLocalRuntime,
} from "@assistant-ui/react";
import { AssistantModal } from "./assistant-modal";

function asAsyncIterable<T>(source: ReadableStream<T>): AsyncIterable<T> {
  return {
    [Symbol.asyncIterator]: () => {
      const reader = source.getReader();
      return {
        async next(): Promise<IteratorResult<T, undefined>> {
          const { done, value } = await reader.read();
          return done
            ? { done: true, value: undefined }
            : { done: false, value };
        },
      };
    },
  };
}

const MyCustomAdapter: ChatModelAdapter = {
  async *run({ messages, abortSignal }) {
    const messagesToSend = messages.map((m) => ({
      role: m.role,
      content: m.content
        .filter((c) => c.type === "text")
        .map((c) => c.text)
        .join(" "),
    }));

    const response = await fetch("/api/entelligence", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        messages: messagesToSend,
      }),
      signal: abortSignal,
    });

    let text = "";
    for await (const chunk of asAsyncIterable(
      response.body!.pipeThrough(new TextDecoderStream()),
    )) {
      text += chunk;
      yield { content: [{ type: "text", text }] };
    }

    void fetch("/api/entelligence-history", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        question: messagesToSend.at(-1)?.content,
        answer: text,
        previousQuestion: messagesToSend.at(-3)?.content,
      }),
    });
  },
};

export const DocsChat = () => {
  const runtime = useLocalRuntime(MyCustomAdapter);

  return (
    <AssistantRuntimeProvider runtime={runtime}>
      <AssistantModal />
    </AssistantRuntimeProvider>
  );
};



================================================
FILE: apps/docs/components/docs-chat/syntax-highlighter.tsx
================================================
import { makePrismAsyncSyntaxHighlighter } from "@assistant-ui/react-syntax-highlighter/full";
import { coldarkDark } from "react-syntax-highlighter/dist/esm/styles/prism";

export const SyntaxHighlighter = makePrismAsyncSyntaxHighlighter({
  style: coldarkDark,
  customStyle: {
    margin: 0,
    backgroundColor: "black",
  },
});



================================================
FILE: apps/docs/components/docs-chat/thread.tsx
================================================
import {
  ActionBarPrimitive,
  BranchPickerPrimitive,
  ComposerPrimitive,
  MessagePrimitive,
  ThreadPrimitive,
} from "@assistant-ui/react";
import type { FC } from "react";
import {
  ArrowDownIcon,
  CheckIcon,
  ChevronLeftIcon,
  ChevronRightIcon,
  CopyIcon,
  PencilIcon,
  RefreshCwIcon,
  SendHorizontalIcon,
} from "lucide-react";
import { cn } from "@/lib/utils";

import { Button } from "@/components/ui/button";
import { MarkdownText } from "@/components/assistant-ui/markdown-text";
import { TooltipIconButton } from "@/components/assistant-ui/tooltip-icon-button";

import entelligenceLogo from "@/app/(home)/logos/cust/entelligence.svg";
import Image from "next/image";

export const Thread: FC = () => {
  return (
    <ThreadPrimitive.Root
      className="bg-background box-border h-full"
      style={{
        ["--thread-max-width" as string]: "42rem",
      }}
    >
      <ThreadPrimitive.Viewport className="flex h-full flex-col items-center overflow-y-scroll scroll-smooth bg-inherit px-4 pt-8">
        <ThreadWelcome />

        <ThreadPrimitive.Messages
          components={{
            UserMessage: UserMessage,
            EditComposer: EditComposer,
            AssistantMessage: AssistantMessage,
          }}
        />

        <ThreadPrimitive.If empty={false}>
          <div className="min-h-8 flex-grow" />
        </ThreadPrimitive.If>

        <div className="sticky bottom-0 mt-3 flex w-full max-w-[var(--thread-max-width)] flex-col items-center justify-end rounded-t-lg bg-inherit pb-2">
          <ThreadScrollToBottom />
          <Composer />
          <a
            href="https://entelligence.ai/assistant-ui&assistant-ui?ref=assistant-ui"
            className="mt-2 flex justify-center gap-1 self-center text-xs opacity-25"
          >
            In partnership with{" "}
            <Image
              src={entelligenceLogo}
              className="pt-0.5 invert dark:invert-0"
              alt="Entelligence Logo"
              width={70}
            />
          </a>
        </div>
      </ThreadPrimitive.Viewport>
    </ThreadPrimitive.Root>
  );
};

const ThreadScrollToBottom: FC = () => {
  return (
    <ThreadPrimitive.ScrollToBottom asChild>
      <TooltipIconButton
        tooltip="Scroll to bottom"
        variant="outline"
        className="absolute -top-8 rounded-full disabled:invisible"
      >
        <ArrowDownIcon />
      </TooltipIconButton>
    </ThreadPrimitive.ScrollToBottom>
  );
};

const ThreadWelcome: FC = () => {
  return (
    <ThreadPrimitive.Empty>
      <div className="flex w-full max-w-[var(--thread-max-width)] flex-grow flex-col">
        <div className="flex w-full flex-grow flex-col items-center justify-center">
          <p className="mt-4 font-medium">
            Ask any question about assistant-ui
          </p>
        </div>
        <ThreadWelcomeSuggestions />
      </div>
    </ThreadPrimitive.Empty>
  );
};

const ThreadWelcomeSuggestions: FC = () => {
  return (
    <div className="mt-3 flex w-full items-stretch justify-center gap-4">
      <ThreadPrimitive.Suggestion
        className="hover:bg-muted/80 flex max-w-sm grow basis-0 flex-col items-center justify-center rounded-lg border p-3 transition-colors ease-in"
        prompt="How can I install assistant-ui?"
        method="replace"
        autoSend
      >
        <span className="line-clamp-2 text-ellipsis text-sm font-semibold">
          How can I install assistant-ui?
        </span>
      </ThreadPrimitive.Suggestion>
      <ThreadPrimitive.Suggestion
        className="hover:bg-muted/80 flex max-w-sm grow basis-0 flex-col items-center justify-center rounded-lg border p-3 transition-colors ease-in"
        prompt="Why should I use assistant-ui?"
        method="replace"
        autoSend
      >
        <span className="line-clamp-2 text-ellipsis text-sm font-semibold">
          Why should I use assistant-ui?
        </span>
      </ThreadPrimitive.Suggestion>
    </div>
  );
};

const Composer: FC = () => {
  return (
    <ComposerPrimitive.Root className="focus-within:border-ring/20 flex w-full flex-wrap items-end rounded-lg border bg-inherit px-2.5 shadow-sm transition-colors ease-in">
      <ComposerPrimitive.Input
        rows={1}
        autoFocus
        placeholder="Ask a question..."
        className="placeholder:text-muted-foreground max-h-40 flex-grow resize-none border-none bg-transparent px-2 py-4 text-sm outline-none focus:ring-0 disabled:cursor-not-allowed"
      />
      <ComposerAction />
    </ComposerPrimitive.Root>
  );
};

const ComposerAction: FC = () => {
  return (
    <>
      <ThreadPrimitive.If running={false}>
        <ComposerPrimitive.Send asChild>
          <TooltipIconButton
            tooltip="Send"
            variant="default"
            className="my-2.5 size-8 p-2 transition-opacity ease-in"
          >
            <SendHorizontalIcon />
          </TooltipIconButton>
        </ComposerPrimitive.Send>
      </ThreadPrimitive.If>
      <ThreadPrimitive.If running>
        <ComposerPrimitive.Cancel asChild>
          <TooltipIconButton
            tooltip="Cancel"
            variant="default"
            className="my-2.5 size-8 p-2 transition-opacity ease-in"
          >
            <CircleStopIcon />
          </TooltipIconButton>
        </ComposerPrimitive.Cancel>
      </ThreadPrimitive.If>
    </>
  );
};

const UserMessage: FC = () => {
  return (
    <MessagePrimitive.Root className="grid w-full max-w-[var(--thread-max-width)] auto-rows-auto grid-cols-[minmax(72px,1fr)_auto] gap-y-2 py-4 [&:where(>*)]:col-start-2">
      <UserActionBar />

      <div className="bg-muted text-foreground col-start-2 row-start-2 max-w-[calc(var(--thread-max-width)*0.8)] break-words rounded-3xl px-5 py-2.5">
        <MessagePrimitive.Parts />
      </div>

      <BranchPicker className="col-span-full col-start-1 row-start-3 -mr-1 justify-end" />
    </MessagePrimitive.Root>
  );
};

const UserActionBar: FC = () => {
  return (
    <ActionBarPrimitive.Root
      hideWhenRunning
      autohide="not-last"
      className="col-start-1 row-start-2 mr-3 mt-2.5 flex flex-col items-end"
    >
      <ActionBarPrimitive.Edit asChild>
        <TooltipIconButton tooltip="Edit">
          <PencilIcon />
        </TooltipIconButton>
      </ActionBarPrimitive.Edit>
    </ActionBarPrimitive.Root>
  );
};

const EditComposer: FC = () => {
  return (
    <ComposerPrimitive.Root className="bg-muted my-4 flex w-full max-w-[var(--thread-max-width)] flex-col gap-2 rounded-xl">
      <ComposerPrimitive.Input className="text-foreground flex h-8 w-full resize-none bg-transparent p-4 pb-0 outline-none" />

      <div className="mx-3 mb-3 flex items-center justify-center gap-2 self-end">
        <ComposerPrimitive.Cancel asChild>
          <Button variant="ghost">Cancel</Button>
        </ComposerPrimitive.Cancel>
        <ComposerPrimitive.Send asChild>
          <Button>Send</Button>
        </ComposerPrimitive.Send>
      </div>
    </ComposerPrimitive.Root>
  );
};

const AssistantMessage: FC = () => {
  return (
    <MessagePrimitive.Root className="relative grid w-full max-w-[var(--thread-max-width)] grid-cols-[auto_auto_1fr] grid-rows-[auto_1fr] py-4">
      <div className="text-foreground col-span-2 col-start-2 row-start-1 my-1.5 max-w-[calc(var(--thread-max-width)*0.8)] break-words leading-7">
        <MessagePrimitive.Parts components={{ Text: MarkdownText }} />
      </div>

      <AssistantActionBar />

      <BranchPicker className="col-start-2 row-start-2 -ml-2 mr-2" />
    </MessagePrimitive.Root>
  );
};

const AssistantActionBar: FC = () => {
  return (
    <ActionBarPrimitive.Root
      hideWhenRunning
      autohide="not-last"
      autohideFloat="single-branch"
      className="text-muted-foreground data-[floating]:bg-background col-start-3 row-start-2 -ml-1 flex gap-1 data-[floating]:absolute data-[floating]:rounded-md data-[floating]:border data-[floating]:p-1 data-[floating]:shadow-sm"
    >
      <ActionBarPrimitive.Copy asChild>
        <TooltipIconButton tooltip="Copy">
          <MessagePrimitive.If copied>
            <CheckIcon />
          </MessagePrimitive.If>
          <MessagePrimitive.If copied={false}>
            <CopyIcon />
          </MessagePrimitive.If>
        </TooltipIconButton>
      </ActionBarPrimitive.Copy>
      <ActionBarPrimitive.Reload asChild>
        <TooltipIconButton tooltip="Refresh">
          <RefreshCwIcon />
        </TooltipIconButton>
      </ActionBarPrimitive.Reload>
    </ActionBarPrimitive.Root>
  );
};

const BranchPicker: FC<BranchPickerPrimitive.Root.Props> = ({
  className,
  ...rest
}) => {
  return (
    <BranchPickerPrimitive.Root
      hideWhenSingleBranch
      className={cn(
        "text-muted-foreground inline-flex items-center text-xs",
        className,
      )}
      {...rest}
    >
      <BranchPickerPrimitive.Previous asChild>
        <TooltipIconButton tooltip="Previous">
          <ChevronLeftIcon />
        </TooltipIconButton>
      </BranchPickerPrimitive.Previous>
      <span className="font-medium">
        <BranchPickerPrimitive.Number /> / <BranchPickerPrimitive.Count />
      </span>
      <BranchPickerPrimitive.Next asChild>
        <TooltipIconButton tooltip="Next">
          <ChevronRightIcon />
        </TooltipIconButton>
      </BranchPickerPrimitive.Next>
    </BranchPickerPrimitive.Root>
  );
};

const CircleStopIcon = () => {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 16 16"
      fill="currentColor"
      width="16"
      height="16"
    >
      <rect width="10" height="10" x="3" y="3" rx="2" />
    </svg>
  );
};



================================================
FILE: apps/docs/components/genui/GenUI.tsx
================================================
export const GenUI = () => {
  return (
    <iframe
      title="Gen UI Example"
      className="h-full w-full border-none"
      src="https://assistant-ui-rsc-example.vercel.app/"
    />
  );
};



================================================
FILE: apps/docs/components/magicui/marquee.tsx
================================================
import { cn } from "@/lib/utils";
import { ComponentPropsWithoutRef } from "react";

interface MarqueeProps extends ComponentPropsWithoutRef<"div"> {
  /**
   * Optional CSS class name to apply custom styles
   */
  className?: string;
  /**
   * Whether to reverse the animation direction
   * @default false
   */
  reverse?: boolean;
  /**
   * Whether to pause the animation on hover
   * @default false
   */
  pauseOnHover?: boolean;
  /**
   * Content to be displayed in the marquee
   */
  children: React.ReactNode;
  /**
   * Whether to animate vertically instead of horizontally
   * @default false
   */
  vertical?: boolean;
  /**
   * Number of times to repeat the content
   * @default 4
   */
  repeat?: number;
}

export function Marquee({
  className,
  reverse = false,
  pauseOnHover = false,
  children,
  vertical = false,
  repeat = 4,
  ...props
}: MarqueeProps) {
  return (
    <div
      {...props}
      className={cn(
        "group flex overflow-hidden p-2 [--duration:40s] [--gap:1rem] [gap:var(--gap)]",
        {
          "flex-row": !vertical,
          "flex-col": vertical,
        },
        className,
      )}
    >
      {Array(repeat)
        .fill(0)
        .map((_, i) => (
          <div
            key={i}
            className={cn("flex shrink-0 justify-around [gap:var(--gap)]", {
              "animate-marquee flex-row": !vertical,
              "animate-marquee-vertical flex-col": vertical,
              "group-hover:[animation-play-state:paused]": pauseOnHover,
              "[animation-direction:reverse]": reverse,
            })}
          >
            {children}
          </div>
        ))}
    </div>
  );
}



================================================
FILE: apps/docs/components/magicui/shine-border.tsx
================================================
"use client";

import { cn } from "@/lib/utils";

type TColorProp = string | string[];

interface ShineBorderProps {
  borderRadius?: number;
  borderWidth?: number;
  duration?: number;
  color?: TColorProp;
  className?: string;
  children?: React.ReactNode;
}

/**
 * @name Shine Border
 * @description It is an animated background border effect component with easy to use and configurable props.
 * @param borderRadius defines the radius of the border.
 * @param borderWidth defines the width of the border.
 * @param duration defines the animation duration to be applied on the shining border
 * @param color a string or string array to define border color.
 * @param className defines the class name to be applied to the component
 * @param children contains react node elements.
 */
export function ShineBorder({
  borderRadius = 8,
  borderWidth = 1,
  duration = 14,
  color = "#000000",
  className,
  children,
}: ShineBorderProps) {
  return (
    <div
      style={
        {
          "--border-radius": `${borderRadius}px`,
        } as React.CSSProperties
      }
      className={cn(
        "bg-background relative min-h-[60px] rounded-[var(--border-radius)] border p-3",
        className,
      )}
    >
      <div
        style={
          {
            "--border-width": `${borderWidth}px`,
            "--border-radius": `${borderRadius}px`,
            "--duration": `${duration}s`,
            "--mask-linear-gradient": `linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0)`,
            "--background-radial-gradient": `radial-gradient(transparent,transparent, ${color instanceof Array ? color.join(",") : color},transparent,transparent)`,
          } as React.CSSProperties
        }
        className={`before:animate-shine pointer-events-none before:absolute before:inset-0 before:size-full before:rounded-[var(--border-radius)] before:p-[var(--border-width)] before:will-change-[background-position] before:content-[""] before:![-webkit-mask-composite:xor] before:[background-image:var(--background-radial-gradient)] before:[background-size:300%_300%] before:![mask-composite:exclude] before:[mask:var(--mask-linear-gradient)]`}
      ></div>
      {children}
    </div>
  );
}



================================================
FILE: apps/docs/components/magicui/terminal.tsx
================================================
"use client";

import { cn } from "@/lib/utils";
import { motion, MotionProps } from "motion/react";
import { useEffect, useRef, useState } from "react";

interface AnimatedSpanProps extends MotionProps {
  children: React.ReactNode;
  delay?: number;
  className?: string;
}

export const AnimatedSpan = ({
  children,
  delay = 0,
  className,
  ...props
}: AnimatedSpanProps) => (
  <motion.div
    initial={{ opacity: 0, y: -5 }}
    animate={{ opacity: 1, y: 0 }}
    transition={{ duration: 0.3, delay: delay / 1000 }}
    className={cn("grid text-sm font-normal tracking-tight", className)}
    {...props}
  >
    {children}
  </motion.div>
);

interface TypingAnimationProps extends MotionProps {
  children: string;
  className?: string;
  duration?: number;
  delay?: number;
  as?: React.ElementType;
}

export const TypingAnimation = ({
  children,
  className,
  duration = 60,
  delay = 0,
  as: Component = "span",
  ...props
}: TypingAnimationProps) => {
  if (typeof children !== "string") {
    throw new Error("TypingAnimation: children must be a string. Received:");
  }

  const MotionComponent = motion.create(Component, {
    forwardMotionProps: true,
  });

  const [displayedText, setDisplayedText] = useState<string>("");
  const [started, setStarted] = useState(false);
  const elementRef = useRef<HTMLElement | null>(null);

  useEffect(() => {
    const startTimeout = setTimeout(() => {
      setStarted(true);
    }, delay);
    return () => clearTimeout(startTimeout);
  }, [delay]);

  useEffect(() => {
    if (!started) return;

    let i = 0;
    const typingEffect = setInterval(() => {
      if (i < children.length) {
        setDisplayedText(children.substring(0, i + 1));
        i++;
      } else {
        clearInterval(typingEffect);
      }
    }, duration);

    return () => {
      clearInterval(typingEffect);
    };
  }, [children, duration, started]);

  return (
    <MotionComponent
      ref={elementRef}
      className={cn("text-sm font-normal tracking-tight", className)}
      {...props}
    >
      {displayedText}
    </MotionComponent>
  );
};

interface TerminalProps {
  children: React.ReactNode;
  className?: string;
}

export const Terminal = ({ children, className }: TerminalProps) => {
  return (
    <div
      className={cn(
        "border-border bg-background z-0 h-full max-h-[400px] w-full max-w-lg rounded-xl border",
        className,
      )}
    >
      <div className="border-border flex flex-col gap-y-2 border-b p-4">
        <div className="flex flex-row gap-x-2">
          <div className="h-2 w-2 rounded-full bg-red-500"></div>
          <div className="h-2 w-2 rounded-full bg-yellow-500"></div>
          <div className="h-2 w-2 rounded-full bg-green-500"></div>
        </div>
      </div>
      <pre className="p-4">
        <code className="grid gap-y-1 overflow-auto">{children}</code>
      </pre>
    </div>
  );
};



================================================
FILE: apps/docs/components/modal/ModalChat.tsx
================================================
import { AssistantModal } from "../assistant-ui/assistant-modal";

export const ModalChat = () => {
  return (
    <div className="flex h-full w-full items-center justify-center p-4">
      <AssistantModal />
      <p className="bold text-lg">
        The Assistant Modal is available in the bottom right corner of the
        screen.
      </p>
    </div>
  );
};



================================================
FILE: apps/docs/components/perplexity/Perplexity.tsx
================================================
import { Thread } from "./thread";

export const Perplexity = () => {
  return (
    <div className="flex h-full w-full flex-col">
      <Thread />
    </div>
  );
};



================================================
FILE: apps/docs/components/perplexity/thread.tsx
================================================
"use client";

import {
  ActionBarPrimitive,
  BranchPickerPrimitive,
  ComposerPrimitive,
  MessagePrimitive,
  ThreadPrimitive,
} from "@assistant-ui/react";
import type { FC } from "react";
import {
  ArrowDownIcon,
  ArrowRightIcon,
  ArrowUpIcon,
  CheckIcon,
  ChevronLeftIcon,
  ChevronRightIcon,
  CopyIcon,
  PaperclipIcon,
  RefreshCwIcon,
  SparkleIcon,
} from "lucide-react";
import { cn } from "@/lib/utils";

import { MarkdownText } from "@/components/assistant-ui/markdown-text";
import { TooltipIconButton } from "@/components/assistant-ui/tooltip-icon-button";
import {
  ComposerAttachments,
  UserMessageAttachments,
} from "@/components/assistant-ui/attachment";

export const Thread: FC = () => {
  return (
    <ThreadPrimitive.Root
      className="box-border h-full bg-[#191a1a]"
      style={{
        ["--thread-max-width" as string]: "42rem",
      }}
    >
      <ThreadPrimitive.Empty>
        <ThreadWelcome />
      </ThreadPrimitive.Empty>
      <ThreadPrimitive.If empty={false}>
        <ThreadPrimitive.Viewport className="flex h-full flex-col items-center overflow-y-scroll scroll-smooth bg-inherit px-4 pt-8">
          <ThreadPrimitive.Messages
            components={{
              UserMessage: UserMessage,
              AssistantMessage: AssistantMessage,
            }}
          />

          <div className="min-h-8 flex-grow" />

          <div className="sticky bottom-0 mt-3 flex w-full max-w-[var(--thread-max-width)] flex-col items-center justify-end rounded-t-lg bg-inherit pb-4">
            <ThreadScrollToBottom />
            <Composer />
          </div>
        </ThreadPrimitive.Viewport>
      </ThreadPrimitive.If>
    </ThreadPrimitive.Root>
  );
};

const ThreadScrollToBottom: FC = () => {
  return (
    <ThreadPrimitive.ScrollToBottom asChild>
      <TooltipIconButton
        tooltip="Scroll to bottom"
        variant="outline"
        className="absolute -top-8 rounded-full disabled:invisible"
      >
        <ArrowDownIcon />
      </TooltipIconButton>
    </ThreadPrimitive.ScrollToBottom>
  );
};

const ThreadWelcome: FC = () => {
  return (
    <div className="flex h-full w-full items-center justify-center">
      <div className="flex w-full max-w-[var(--thread-max-width)] flex-grow flex-col gap-12">
        <div className="flex w-full flex-grow flex-col items-center justify-center">
          <p className="font-regular font-display text-4xl md:text-5xl">
            What do you want to know?
          </p>
        </div>
        <ComposerPrimitive.Root className="focus-within:ring-border w-full rounded-lg border bg-[#202222] px-2 shadow-sm outline-none transition-all duration-200 focus-within:ring-1 focus:outline-none">
          <ComposerPrimitive.Input
            rows={1}
            autoFocus
            placeholder="Ask anything..."
            className="placeholder:text-muted-foreground max-h-40 w-full flex-grow resize-none border-none bg-transparent px-2 py-4 text-lg outline-none focus:ring-0 disabled:cursor-not-allowed"
          />
          <div className="mx-1.5 flex gap-2">
            <div className="flex-grow" />
            <ComposerPrimitive.AddAttachment asChild>
              <TooltipIconButton
                className="rounded-max text-muted-foreground my-2.5 size-8 p-2 transition-opacity ease-in"
                tooltip="Add Attachment"
                variant="ghost"
              >
                <PaperclipIcon className="!size-4.5" />
              </TooltipIconButton>
            </ComposerPrimitive.AddAttachment>
            <ComposerPrimitive.Send asChild>
              <TooltipIconButton
                className="my-2.5 size-8 rounded-full p-2 transition-opacity"
                tooltip="Send"
                variant="default"
              >
                <ArrowRightIcon />
              </TooltipIconButton>
            </ComposerPrimitive.Send>
          </div>
        </ComposerPrimitive.Root>
      </div>
    </div>
  );
};

const Composer: FC = () => {
  return (
    <div className="bg-foreground/5 w-full rounded-full p-2">
      <ComposerPrimitive.Root className="focus-within:border-ring/20 flex w-full flex-wrap items-end rounded-full border bg-inherit px-2.5 shadow-sm transition-colors ease-in">
        <ComposerAttachments />
        <ComposerPrimitive.Input
          rows={1}
          autoFocus
          placeholder="Ask follow-up"
          className="placeholder:text-muted-foreground max-h-40 flex-grow resize-none border-none bg-transparent px-4 py-4 text-lg outline-none focus:ring-0 disabled:cursor-not-allowed"
        />
        <div className="flex gap-3">
          <ComposerPrimitive.AddAttachment asChild>
            <TooltipIconButton
              className="text-muted-foreground my-2.5 size-10 p-1 transition-opacity ease-in"
              tooltip="Add Attachment"
              variant="ghost"
            >
              <PaperclipIcon className="!size-6" />
            </TooltipIconButton>
          </ComposerPrimitive.AddAttachment>
          <ComposerAction />
        </div>
      </ComposerPrimitive.Root>
    </div>
  );
};

const ComposerAction: FC = () => {
  return (
    <>
      <ThreadPrimitive.If running={false}>
        <ComposerPrimitive.Send asChild>
          <TooltipIconButton
            tooltip="Send"
            variant="default"
            className="my-2.5 size-10 rounded-full p-2 transition-opacity ease-in"
          >
            <ArrowUpIcon className="!size-5" />
          </TooltipIconButton>
        </ComposerPrimitive.Send>
      </ThreadPrimitive.If>
      <ThreadPrimitive.If running>
        <ComposerPrimitive.Cancel asChild>
          <TooltipIconButton
            tooltip="Cancel"
            variant="default"
            className="my-2.5 size-10 rounded-full p-2 transition-opacity ease-in"
          >
            <CircleStopIcon />
          </TooltipIconButton>
        </ComposerPrimitive.Cancel>
      </ThreadPrimitive.If>
    </>
  );
};

const UserMessage: FC = () => {
  return (
    <MessagePrimitive.Root className="relative w-full max-w-[var(--thread-max-width)] gap-y-2 py-4">
      <UserMessageAttachments />

      <div className="text-foreground break-words rounded-3xl py-2.5 text-3xl">
        <MessagePrimitive.Parts />
      </div>
    </MessagePrimitive.Root>
  );
};

const AssistantMessage: FC = () => {
  return (
    <MessagePrimitive.Root className="relative grid w-full max-w-[var(--thread-max-width)] grid-cols-[auto_auto_1fr] grid-rows-[auto_1fr] py-4">
      <div className="text-foreground col-span-2 col-start-2 row-start-1 my-1.5 max-w-[calc(var(--thread-max-width)*0.8)] break-words leading-7">
        <h1 className="mb-4 inline-flex items-center gap-2 text-2xl">
          <SparkleIcon /> Answer
        </h1>

        <MessagePrimitive.Parts components={{ Text: MarkdownText }} />
      </div>

      <AssistantActionBar />

      <BranchPicker className="col-start-2 row-start-2 -ml-2 mr-2" />
    </MessagePrimitive.Root>
  );
};

const AssistantActionBar: FC = () => {
  return (
    <ActionBarPrimitive.Root
      hideWhenRunning
      autohide="not-last"
      autohideFloat="single-branch"
      className="text-muted-foreground col-start-3 row-start-2 -ml-1 flex gap-1"
    >
      {/* <MessagePrimitive.If speaking={false}>
        <ActionBarPrimitive.Speak asChild>
          <TooltipIconButton tooltip="Read aloud">
            <AudioLinesIcon />
          </TooltipIconButton>
        </ActionBarPrimitive.Speak>
      </MessagePrimitive.If>
      <MessagePrimitive.If speaking>
        <ActionBarPrimitive.StopSpeaking asChild>
          <TooltipIconButton tooltip="Stop">
            <StopCircleIcon />
          </TooltipIconButton>
        </ActionBarPrimitive.StopSpeaking>
      </MessagePrimitive.If> */}
      <ActionBarPrimitive.Copy asChild>
        <TooltipIconButton tooltip="Copy">
          <MessagePrimitive.If copied>
            <CheckIcon />
          </MessagePrimitive.If>
          <MessagePrimitive.If copied={false}>
            <CopyIcon />
          </MessagePrimitive.If>
        </TooltipIconButton>
      </ActionBarPrimitive.Copy>
      <ActionBarPrimitive.Reload asChild>
        <TooltipIconButton tooltip="Refresh">
          <RefreshCwIcon />
        </TooltipIconButton>
      </ActionBarPrimitive.Reload>
    </ActionBarPrimitive.Root>
  );
};

const BranchPicker: FC<BranchPickerPrimitive.Root.Props> = ({
  className,
  ...rest
}) => {
  return (
    <BranchPickerPrimitive.Root
      hideWhenSingleBranch
      className={cn(
        "text-muted-foreground inline-flex items-center text-xs",
        className,
      )}
      {...rest}
    >
      <BranchPickerPrimitive.Previous asChild>
        <TooltipIconButton tooltip="Previous">
          <ChevronLeftIcon />
        </TooltipIconButton>
      </BranchPickerPrimitive.Previous>
      <span className="font-medium">
        <BranchPickerPrimitive.Number /> / <BranchPickerPrimitive.Count />
      </span>
      <BranchPickerPrimitive.Next asChild>
        <TooltipIconButton tooltip="Next">
          <ChevronRightIcon />
        </TooltipIconButton>
      </BranchPickerPrimitive.Next>
    </BranchPickerPrimitive.Root>
  );
};

const CircleStopIcon = () => {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 16 16"
      fill="currentColor"
      width="16"
      height="16"
    >
      <rect width="10" height="10" x="3" y="3" rx="2" />
    </svg>
  );
};



================================================
FILE: apps/docs/components/samples/assistant-modal-sample.tsx
================================================
"use client";
import { SampleFrame } from "./sample-frame";

import { BotIcon, ChevronDownIcon } from "lucide-react";

import { type FC, forwardRef } from "react";
import { AssistantModalPrimitive } from "@assistant-ui/react";

import { Thread } from "@/components/assistant-ui/thread";
import { TooltipIconButton } from "@/components/assistant-ui/tooltip-icon-button";

export const AssistantModalSample = () => {
  return (
    <SampleFrame sampleText="Sample Assistant Modal">
      <div className="pt-10">
        <AssistantModal />
      </div>
    </SampleFrame>
  );
};

export const AssistantModal: FC = () => {
  return (
    <AssistantModalPrimitive.Root>
      <AssistantModalPrimitive.Anchor className="absolute bottom-4 right-4 size-11">
        <AssistantModalPrimitive.Trigger asChild>
          <AssistantModalButton />
        </AssistantModalPrimitive.Trigger>
      </AssistantModalPrimitive.Anchor>
      <AssistantModalPrimitive.Content
        sideOffset={16}
        className="bg-popover text-popover-foreground data-[state=closed]:animate-out data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out data-[state=open]:zoom-in data-[state=open]:slide-in-from-bottom-1/2 data-[state=open]:slide-in-from-right-1/2 data-[state=closed]:slide-out-to-bottom-1/2 data-[state=closed]:slide-out-to-right-1/2 z-50 h-[500px] w-[400px] overflow-clip rounded-xl border p-0 shadow-md outline-none [&>.aui-thread-root]:bg-inherit"
      >
        <Thread />
      </AssistantModalPrimitive.Content>
    </AssistantModalPrimitive.Root>
  );
};

type AssistantModalButtonProps = { "data-state"?: "open" | "closed" };

const AssistantModalButton = forwardRef<
  HTMLButtonElement,
  AssistantModalButtonProps
>(({ "data-state": state, ...rest }, ref) => {
  const tooltip = state === "open" ? "Close Assistant" : "Open Assistant";

  return (
    <TooltipIconButton
      variant="default"
      tooltip={tooltip}
      side="left"
      {...rest}
      className="size-full rounded-full shadow transition-transform hover:scale-110 active:scale-90"
      ref={ref}
    >
      <BotIcon
        data-state={state}
        className="absolute size-6 transition-all data-[state=closed]:rotate-0 data-[state=open]:rotate-90 data-[state=closed]:scale-100 data-[state=open]:scale-0"
      />

      <ChevronDownIcon
        data-state={state}
        className="absolute size-6 transition-all data-[state=closed]:-rotate-90 data-[state=open]:rotate-0 data-[state=closed]:scale-0 data-[state=open]:scale-100"
      />
      <span className="sr-only">{tooltip}</span>
    </TooltipIconButton>
  );
});

AssistantModalButton.displayName = "AssistantModalButton";



================================================
FILE: apps/docs/components/samples/attachment-sample.tsx
================================================
"use client";
import {
  ComposerAddAttachment,
  ComposerAttachments,
} from "../assistant-ui/attachment";
import { ComposerPrimitive, ThreadPrimitive } from "@assistant-ui/react";
import { SampleFrame } from "./sample-frame";
import { TooltipIconButton } from "@/components/assistant-ui/tooltip-icon-button";
import { FC } from "react";
import { ArrowDownIcon, SendHorizontalIcon } from "lucide-react";

export const AttachmentSample = () => {
  return (
    <SampleFrame sampleText="Sample Attachment">
      <Thread />
    </SampleFrame>
  );
};

export const Thread: FC = () => {
  return (
    <ThreadPrimitive.Root
      className="bg-background box-border h-full"
      style={{
        ["--thread-max-width" as string]: "42rem",
      }}
    >
      <ThreadPrimitive.Viewport className="flex h-full flex-col items-center overflow-y-scroll scroll-smooth bg-inherit p-4">
        <div className="sticky bottom-0 mt-3 flex w-full max-w-[var(--thread-max-width)] flex-col items-center justify-end rounded-t-lg bg-inherit pb-4">
          <ThreadScrollToBottom />
          <Composer />
        </div>
      </ThreadPrimitive.Viewport>
    </ThreadPrimitive.Root>
  );
};

const ThreadScrollToBottom: FC = () => {
  return (
    <ThreadPrimitive.ScrollToBottom asChild>
      <TooltipIconButton
        tooltip="Scroll to bottom"
        variant="outline"
        className="absolute -top-8 rounded-full disabled:invisible"
      >
        <ArrowDownIcon />
      </TooltipIconButton>
    </ThreadPrimitive.ScrollToBottom>
  );
};

const Composer: FC = () => {
  return (
    <ComposerPrimitive.Root className="focus-within:border-ring/20 flex w-full flex-wrap items-end rounded-lg border bg-inherit px-2.5 shadow-sm transition-colors ease-in">
      <ComposerAttachments />
      <ComposerAddAttachment />
      <ComposerPrimitive.Input
        rows={1}
        autoFocus
        placeholder="Write a message..."
        className="placeholder:text-muted-foreground max-h-40 flex-grow resize-none border-none bg-transparent px-2 py-4 text-sm outline-none focus:ring-0 disabled:cursor-not-allowed"
      />
      <ComposerAction />
    </ComposerPrimitive.Root>
  );
};

const ComposerAction: FC = () => {
  return (
    <>
      <ThreadPrimitive.If running={false}>
        <ComposerPrimitive.Send asChild>
          <TooltipIconButton
            tooltip="Send"
            variant="default"
            className="my-2.5 size-8 p-2 transition-opacity ease-in"
          >
            <SendHorizontalIcon />
          </TooltipIconButton>
        </ComposerPrimitive.Send>
      </ThreadPrimitive.If>
      <ThreadPrimitive.If running>
        <ComposerPrimitive.Cancel asChild>
          <TooltipIconButton
            tooltip="Cancel"
            variant="default"
            className="my-2.5 size-8 p-2 transition-opacity ease-in"
          >
            <CircleStopIcon />
          </TooltipIconButton>
        </ComposerPrimitive.Cancel>
      </ThreadPrimitive.If>
    </>
  );
};

const CircleStopIcon = () => {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 16 16"
      fill="currentColor"
      width="16"
      height="16"
    >
      <rect width="10" height="10" x="3" y="3" rx="2" />
    </svg>
  );
};



================================================
FILE: apps/docs/components/samples/branching-sample.tsx
================================================
"use client";
import { Thread } from "../assistant-ui/thread";
import { SampleFrame } from "./sample-frame";

export const BranchingSample = () => {
  return (
    <SampleFrame
      sampleText="Sample Branching"
      description="Try submitting then editing a message to see the branching in action."
    >
      <Thread />
    </SampleFrame>
  );
};



================================================
FILE: apps/docs/components/samples/sample-frame.tsx
================================================
"use client";

export const SampleFrame = ({
  sampleText,
  description,
  children,
}: {
  sampleText?: string;
  description?: string;
  children: React.ReactNode;
}) => {
  return (
    <div className="bg-muted/50 relative rounded-lg border p-4">
      <div className="bg-primary text-primary-foreground absolute -top-2 left-4 rounded px-2 py-0.5 text-xs">
        {sampleText || "Sample"}
      </div>
      {description && (
        <div className="text-muted-foreground py-2 text-sm">{description}</div>
      )}
      <div className="flex flex-col gap-4">{children}</div>
    </div>
  );
};



================================================
FILE: apps/docs/components/samples/speech-sample.tsx
================================================
"use client";
import {
  ComposerAddAttachment,
  ComposerAttachments,
  UserMessageAttachments,
} from "../assistant-ui/attachment";
import {
  ActionBarPrimitive,
  ComposerPrimitive,
  MessagePrimitive,
  ThreadPrimitive,
} from "@assistant-ui/react";
import { SampleFrame } from "./sample-frame";
import { TooltipIconButton } from "@/components/assistant-ui/tooltip-icon-button";
import { FC } from "react";
import {
  ArrowDownIcon,
  CopyIcon,
  AudioLinesIcon,
  CheckIcon,
  PencilIcon,
  SendHorizontalIcon,
  StopCircleIcon,
  RefreshCwIcon,
} from "lucide-react";
import { MarkdownText } from "../assistant-ui/markdown-text";

export const SpeechSample = () => {
  return (
    <SampleFrame
      sampleText="Sample Text to Speech"
      description="Try submitting a message, then clicking on the speech icon in the assistant message."
    >
      <Thread />
    </SampleFrame>
  );
};

export const Thread: FC = () => {
  return (
    <ThreadPrimitive.Root
      className="bg-background box-border h-full"
      style={{
        ["--thread-max-width" as string]: "42rem",
      }}
    >
      <ThreadPrimitive.Viewport className="flex h-full flex-col items-center overflow-y-scroll scroll-smooth bg-inherit p-4">
        <ThreadPrimitive.Messages
          components={{
            UserMessage: UserMessage,
            EditComposer: Composer,
            AssistantMessage: AssistantMessage,
          }}
        />
        <div className="sticky bottom-0 mt-3 flex w-full max-w-[var(--thread-max-width)] flex-col items-center justify-end rounded-t-lg bg-inherit pb-4">
          <ThreadScrollToBottom />
          <Composer />
        </div>
      </ThreadPrimitive.Viewport>
    </ThreadPrimitive.Root>
  );
};

const ThreadScrollToBottom: FC = () => {
  return (
    <ThreadPrimitive.ScrollToBottom asChild>
      <TooltipIconButton
        tooltip="Scroll to bottom"
        variant="outline"
        className="absolute -top-8 rounded-full disabled:invisible"
      >
        <ArrowDownIcon />
      </TooltipIconButton>
    </ThreadPrimitive.ScrollToBottom>
  );
};

const Composer: FC = () => {
  return (
    <ComposerPrimitive.Root className="focus-within:border-ring/20 flex w-full flex-wrap items-end rounded-lg border bg-inherit px-2.5 shadow-sm transition-colors ease-in">
      <ComposerAttachments />
      <ComposerAddAttachment />
      <ComposerPrimitive.Input
        rows={1}
        autoFocus
        placeholder="Write a message..."
        className="placeholder:text-muted-foreground max-h-40 flex-grow resize-none border-none bg-transparent px-2 py-4 text-sm outline-none focus:ring-0 disabled:cursor-not-allowed"
      />
      <ComposerAction />
    </ComposerPrimitive.Root>
  );
};

const ComposerAction: FC = () => {
  return (
    <>
      <ThreadPrimitive.If running={false}>
        <ComposerPrimitive.Send asChild>
          <TooltipIconButton
            tooltip="Send"
            variant="default"
            className="my-2.5 size-8 p-2 transition-opacity ease-in"
          >
            <SendHorizontalIcon />
          </TooltipIconButton>
        </ComposerPrimitive.Send>
      </ThreadPrimitive.If>
      <ThreadPrimitive.If running>
        <ComposerPrimitive.Cancel asChild>
          <TooltipIconButton
            tooltip="Cancel"
            variant="default"
            className="my-2.5 size-8 p-2 transition-opacity ease-in"
          >
            <CircleStopIcon />
          </TooltipIconButton>
        </ComposerPrimitive.Cancel>
      </ThreadPrimitive.If>
    </>
  );
};

const UserMessage: FC = () => {
  return (
    <MessagePrimitive.Root className="grid w-full max-w-[var(--thread-max-width)] auto-rows-auto grid-cols-[minmax(72px,1fr)_auto] gap-y-2 py-4 [&:where(>*)]:col-start-2">
      <UserActionBar />

      <UserMessageAttachments />

      <div className="bg-muted text-foreground col-start-2 row-start-2 max-w-[calc(var(--thread-max-width)*0.8)] break-words rounded-3xl px-5 py-2.5">
        <MessagePrimitive.Parts />
      </div>
    </MessagePrimitive.Root>
  );
};

const UserActionBar: FC = () => {
  return (
    <ActionBarPrimitive.Root
      hideWhenRunning
      autohide="not-last"
      className="col-start-1 row-start-2 mr-3 mt-2.5 flex flex-col items-end"
    >
      <ActionBarPrimitive.Edit asChild>
        <TooltipIconButton tooltip="Edit">
          <PencilIcon />
        </TooltipIconButton>
      </ActionBarPrimitive.Edit>
    </ActionBarPrimitive.Root>
  );
};

const AssistantMessage: FC = () => {
  return (
    <MessagePrimitive.Root className="relative grid w-full max-w-[var(--thread-max-width)] grid-cols-[auto_auto_1fr] grid-rows-[auto_1fr] py-4">
      <div className="text-foreground col-span-2 col-start-2 row-start-1 my-1.5 max-w-[calc(var(--thread-max-width)*0.8)] break-words leading-7">
        <MessagePrimitive.Parts components={{ Text: MarkdownText }} />
      </div>

      <AssistantActionBar />
    </MessagePrimitive.Root>
  );
};

const AssistantActionBar: FC = () => {
  return (
    <ActionBarPrimitive.Root
      hideWhenRunning
      autohide="not-last"
      autohideFloat="single-branch"
      className="text-muted-foreground data-[floating]:bg-background col-start-3 row-start-2 -ml-1 flex gap-1 data-[floating]:absolute data-[floating]:rounded-md data-[floating]:border data-[floating]:p-1 data-[floating]:shadow-sm"
    >
      <MessagePrimitive.If speaking={false}>
        <ActionBarPrimitive.Speak asChild>
          <TooltipIconButton tooltip="Read aloud">
            <AudioLinesIcon />
          </TooltipIconButton>
        </ActionBarPrimitive.Speak>
      </MessagePrimitive.If>
      <MessagePrimitive.If speaking>
        <ActionBarPrimitive.StopSpeaking asChild>
          <TooltipIconButton tooltip="Stop">
            <StopCircleIcon />
          </TooltipIconButton>
        </ActionBarPrimitive.StopSpeaking>
      </MessagePrimitive.If>
      <ActionBarPrimitive.Copy asChild>
        <TooltipIconButton tooltip="Copy">
          <MessagePrimitive.If copied>
            <CheckIcon />
          </MessagePrimitive.If>
          <MessagePrimitive.If copied={false}>
            <CopyIcon />
          </MessagePrimitive.If>
        </TooltipIconButton>
      </ActionBarPrimitive.Copy>
      <ActionBarPrimitive.Reload asChild>
        <TooltipIconButton tooltip="Refresh">
          <RefreshCwIcon />
        </TooltipIconButton>
      </ActionBarPrimitive.Reload>
    </ActionBarPrimitive.Root>
  );
};

const CircleStopIcon = () => {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 16 16"
      fill="currentColor"
      width="16"
      height="16"
    >
      <rect width="10" height="10" x="3" y="3" rx="2" />
    </svg>
  );
};



================================================
FILE: apps/docs/components/samples/thread-sample.tsx
================================================
"use client";
import { Thread } from "../assistant-ui/thread";
import { SampleFrame } from "./sample-frame";

export const ThreadSample = () => {
  return (
    <SampleFrame>
      <Thread />
    </SampleFrame>
  );
};



================================================
FILE: apps/docs/components/samples/threadlist-sample.tsx
================================================
"use client";
import { Thread } from "../assistant-ui/thread";
import { ThreadList } from "../assistant-ui/thread-list";
import { SampleFrame } from "./sample-frame";

export const ThreadListSample = () => {
  return (
    <SampleFrame sampleText="Sample ThreadList">
      <div className="grid h-full grid-cols-[200px_1fr]">
        <ThreadList />
        <Thread />
      </div>
    </SampleFrame>
  );
};



================================================
FILE: apps/docs/components/samples/tool-ui-sample.tsx
================================================
"use client";
import { Thread } from "../assistant-ui/thread";
import { SampleFrame } from "./sample-frame";

export const ToolUISample = () => {
  return (
    <SampleFrame
      sampleText="Sample Tool UI"
      description="Ask 'what is the weather in Tokyo?'"
    >
      <Thread />
    </SampleFrame>
  );
};



================================================
FILE: apps/docs/components/shadcn/ModelPicker.tsx
================================================
"use client";
import {} from "@radix-ui/react-select";
import Image from "next/image";
import type { FC } from "react";
import anthropic from "../../assets/providers/anthropic.svg";
import fireworks from "../../assets/providers/fireworks.svg";
import google from "../../assets/providers/google.svg";
import deepseek from "../../assets/providers/deepseek.svg";
import meta from "../../assets/providers/meta.svg";
import mistral from "../../assets/providers/mistral.svg";
import openai from "../../assets/providers/openai.svg";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "../ui/select";

const models = [
  {
    name: "GPT 4o-mini",
    value: "gpt-4o-mini",
    icon: openai,
  },
  {
    name: "Deepseek R1",
    value: "deepseek-r1",
    icon: deepseek,
  },
  {
    name: "Claude 3.5 Sonnet",
    value: "claude-3.5-sonnet",
    icon: anthropic,
  },
  {
    name: "Gemini 2.0 Flash",
    value: "gemini-2.0-flash",
    icon: google,
  },
  {
    name: "Llama 3 8b",
    value: "llama-3-8b",
    icon: meta,
  },
  {
    name: "Firefunction V2",
    value: "firefunction-v2",
    icon: fireworks,
  },
  {
    name: "Mistral 7b",
    value: "mistral-7b",
    icon: mistral,
  },
];
export const ModelPicker: FC = () => {
  return (
    <Select defaultValue={models[0]?.value ?? ""}>
      <SelectTrigger className="max-w-[300px]">
        <SelectValue />
      </SelectTrigger>
      <SelectContent className="">
        {models.map((model) => (
          <SelectItem key={model.value} value={model.value}>
            <span className="flex items-center gap-2">
              <Image
                src={model.icon}
                alt={model.name}
                className="inline size-4"
              />
              <span>{model.name}</span>
            </span>
          </SelectItem>
        ))}
      </SelectContent>
    </Select>
  );
};



================================================
FILE: apps/docs/components/shadcn/Shadcn.tsx
================================================
"use client";

import { MenuIcon, ShareIcon } from "lucide-react";
import type { TooltipContentProps } from "@radix-ui/react-tooltip";
import Image from "next/image";
import { ComponentPropsWithRef, type FC } from "react";

import { Button } from "@/components/ui/button";
import { cn } from "@/lib/utils";
import icon from "@/public/favicon/icon.svg";
import { Sheet, SheetContent, SheetTrigger } from "../ui/sheet";
import { Tooltip, TooltipContent, TooltipTrigger } from "../ui/tooltip";
import { ModelPicker } from "./ModelPicker";
import { Thread } from "@/components/assistant-ui/thread";
import { ThreadList } from "@/components/assistant-ui/thread-list";

type ButtonWithTooltipProps = ComponentPropsWithRef<typeof Button> & {
  tooltip: string;
  side?: TooltipContentProps["side"];
};

const ButtonWithTooltip: FC<ButtonWithTooltipProps> = ({
  children,
  tooltip,
  side = "top",
  ...rest
}) => {
  return (
    <Tooltip>
      <TooltipTrigger asChild>
        <Button {...rest}>
          {children}
          <span className="sr-only">{tooltip}</span>
        </Button>
      </TooltipTrigger>
      <TooltipContent side={side}>{tooltip}</TooltipContent>
    </Tooltip>
  );
};

const TopLeft: FC = () => {
  return (
    <div className="flex h-full w-full items-center gap-2 px-3 text-sm font-semibold">
      <Image
        src={icon}
        alt="logo"
        className="inline size-4 dark:hue-rotate-180 dark:invert"
      />
      <span>assistant-ui</span>
    </div>
  );
};

const MainLeft: FC = () => {
  return <ThreadList />;
};

const LeftBarSheet: FC = () => {
  return (
    <Sheet>
      <SheetTrigger asChild>
        <Button variant="outline" size="icon" className="shrink-0 md:hidden">
          <MenuIcon className="size-4" />
          <span className="sr-only">Toggle navigation menu</span>
        </Button>
      </SheetTrigger>
      <SheetContent side="left" className="flex flex-col">
        <div className="mt-6 flex flex-col gap-1">
          <TopLeft />
          <MainLeft />
        </div>
      </SheetContent>
    </Sheet>
  );
};

const Header: FC = () => {
  return (
    <header className="flex gap-2">
      <LeftBarSheet />
      <ModelPicker />
      <ButtonWithTooltip
        variant="outline"
        size="icon"
        tooltip="Share"
        side="bottom"
        className="ml-auto shrink-0"
      >
        <ShareIcon className="size-4" />
      </ButtonWithTooltip>
    </header>
  );
};

export const Shadcn = () => {
  const sideStyle = "bg-muted/40 px-3 py-2";
  const topStyle = "border-b";
  const leftStyle = "border-r hidden md:block";

  return (
    <div className="grid h-full w-full grid-flow-col grid-rows-[auto_1fr] md:grid-cols-[250px_1fr]">
      <div className={cn(sideStyle, leftStyle, topStyle)}>
        <TopLeft />
      </div>
      <div className={cn(sideStyle, leftStyle)}>
        <MainLeft />
      </div>
      <div className={cn(sideStyle, topStyle)}>
        <Header />
      </div>
      <div className="bg-background overflow-hidden">
        <Thread />
      </div>
    </div>
  );
};



================================================
FILE: apps/docs/components/testimonials/TestimonialContainer.tsx
================================================
"use client";

import { Testimonial } from "@/components/testimonials/testimonials";
import { cn } from "@/lib/utils";
import Image from "next/image";
import { FC } from "react";

export const TestimonialContainer: FC<{
  testimonials: Testimonial[];
  className?: string;
}> = ({ testimonials, className }) => {
  return (
    <div className={cn("relative columns-1 gap-4 overflow-hidden", className)}>
      {testimonials.map((testimonial, idx) => (
        <TestimonialView key={idx} {...testimonial} />
      ))}
    </div>
  );
};
const TestimonialView: FC<Testimonial> = (testimonial) => {
  return (
    <div className="mb-4 break-inside-avoid-column">
      <a target="_blank" href={testimonial.url}>
        <div className="bg-card hover:bg-border flex flex-col gap-3 rounded-lg border p-6 shadow transition-colors">
          <div className="relative flex items-center gap-2">
            <Image
              alt={"@" + testimonial.username + "'s twitter image"}
              loading="lazy"
              width="64"
              height="64"
              className="h-10 w-10 rounded-full border"
              src={testimonial.avatar}
            />
            <p className="text-sm font-medium">{testimonial.username}</p>
            <div className="bg-background absolute -left-1 -top-1 flex h-5 w-5 items-center justify-center rounded-full">
              <XLogo />
            </div>
          </div>
          <p className="text-muted-foreground whitespace-pre-line">
            {testimonial.message}
          </p>
        </div>
      </a>
    </div>
  );
};
const XLogo: FC = () => {
  return (
    <svg
      className="h-[12px] w-[12px]"
      fill="currentColor"
      viewBox="0 0 24 24"
      aria-hidden="true"
    >
      <path d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z"></path>
    </svg>
  );
};



================================================
FILE: apps/docs/components/testimonials/testimonials.ts
================================================
import profileRawWorks from "./profiles/iVBtd9hs_400x400.jpg";
import profileManuuonly from "./profiles/g2f-gI5N_400x400.jpg";
import profileParrthiv from "./profiles/_-WcCpRw_400x400.jpg";
import profileEliasdevs from "./profiles/vnGL1NHF_400x400.jpg";
import profileKyritzb from "./profiles/0nZ-ergb_400x400.jpg";
import profileRahulchhabra07 from "./profiles/F3t4GW4t_400x400.jpg";
import profileAgihousesf from "./profiles/8rrHE4fe_400x400.jpg";
import profileGardeninggnome from "./profiles/uuRXSsia_400x400.jpg";
import profileAditya_advani from "./profiles/_5AVrIjJ_400x400.jpg";
import profileMahmudisalim from "./profiles/Y7hXHG3i_400x400.jpg";
import profileSimonfarshid from "./profiles/Mc0m3zkD_400x400.jpg";
import { StaticImageData } from "next/image";

export type Testimonial = {
  platform: "X";
  avatar: StaticImageData;
  username: string;
  message: string;
  url: string;
};

export const TESTIMONIALS: Testimonial[] = [
  {
    platform: "X",
    avatar: profileRawWorks,
    username: "@raw_works",
    message: "i needed this 7 months ago!",
    url: "https://x.com/raw_works/status/1797111840188809472",
  },
  {
    platform: "X",
    avatar: profileManuuonly,
    username: "@manuuonly",
    message:
      "was just thinking of researching a tool that could help me do this.. awesome, great product!",
    url: "https://x.com/manuuonly/status/1797511225523454243",
  },
  {
    platform: "X",
    avatar: profileParrthiv,
    username: "@paRRthiv",
    message: "Amazing 🤩\n\nAnd generative UI is a super amazing 😍",
    url: "https://x.com/paRRthiv/status/1797629569366929538",
  },
  {
    platform: "X",
    avatar: profileEliasdevs,
    username: "@eliasdevs",
    message:
      "I can't highlight how simple @simonfarshid makes it to add generative chat to react apps all while still using @vercel AI SDK. I was able to get it into production in 2 hours and users can now chat with ai about their resumes!",
    url: "https://x.com/eliasdevs/status/1800691268194013219",
  },
  {
    platform: "X",
    avatar: profileKyritzb,
    username: "@kyritzb",
    message: "THANK YOU :)\n\nDUDE WAS SO QUICK NOW I CAN KEEP BUILDING",
    url: "https://x.com/kyritzb/status/1802884178276753585",
  },
  {
    platform: "X",
    avatar: profileRahulchhabra07,
    username: "@rahulchhabra07",
    message: "So cool ❤️",
    url: "https://x.com/rahulchhabra07/status/1797088346805870984",
  },
  {
    platform: "X",
    avatar: profileAgihousesf,
    username: "@AGIHouseSF",
    message:
      "Great tool for your next hackathon: 5 different UIs for chat, all ready to go!",
    url: "https://x.com/AGIHouseSF/status/1797111970363322796",
  },
  {
    platform: "X",
    avatar: profileGardeninggnome,
    username: "@gardening_gnome",
    message: "Quite awesome. Want to learn more about the generative UI",
    url: "https://x.com/gardening_gnome/status/1797112443786924348",
  },
  {
    platform: "X",
    avatar: profileAditya_advani,
    username: "@aditya_advani",
    message: "Chat UX for your next React Chat App. Perfect project!",
    url: "https://x.com/aditya_advani/status/1797111877828583754",
  },
  {
    platform: "X",
    avatar: profileMahmudisalim,
    username: "@Masmoudi_Salim",
    message: "Clean feeling",
    url: "https://x.com/Masmoudi_Salim/status/1797111633212530695",
  },
  {
    platform: "X",
    avatar: profileSimonfarshid,
    username: "@simonfarshid",
    message:
      "Go check out http://assistant-ui.com if you need a chatbot UI with magic baked in ✨",
    url: "https://x.com/simonfarshid/status/1801482963886182555",
  },
];

export const BLOG_TESTIMONIALS: Testimonial[] = [
  {
    platform: "X",
    avatar: profileRawWorks,
    username: "@raw_works",
    message: "i needed this 7 months ago!",
    url: "https://x.com/raw_works/status/1797111840188809472",
  },
  {
    platform: "X",
    avatar: profileEliasdevs,
    username: "@eliasdevs",
    message: "I was able to get it into production in 2 hours",
    url: "https://x.com/eliasdevs/status/1800691268194013219",
  },
  {
    platform: "X",
    avatar: profileManuuonly,
    username: "@manuuonly",
    message:
      "was just thinking of researching a tool that could help me do this. awesome, great product!",
    url: "https://x.com/manuuonly/status/1797511225523454243",
  },
];



================================================
FILE: apps/docs/components/tools/weather-tool.tsx
================================================
"use client";
import { useAssistantTool } from "@assistant-ui/react";
import { Sun, Moon, Loader2, MapPin } from "lucide-react";
import { z } from "zod";

// Weather data powered by Open-Meteo (https://open-meteo.com/)
export const GeocodeLocationToolUI = () => {
  useAssistantTool({
    toolName: "geocode_location",
    description: "Geocode a location using Open-Meteo's geocoding API",
    parameters: z.object({
      query: z.string(),
    }),
    execute: async (args: { query: string }) => {
      try {
        const response = await fetch(
          `https://geocoding-api.open-meteo.com/v1/search?name=${encodeURIComponent(args.query)}`,
        );
        const data = await response.json();

        if (!data.results || data.results.length === 0) {
          throw new Error("No results found");
        }

        // Return the first result
        return {
          success: true,
          result: data?.results?.[0],
        };
      } catch (error) {
        return {
          success: false,
          error:
            error instanceof Error
              ? error.message
              : "Failed to geocode location",
        };
      }
    },
    render: ({ result }) => {
      if (result?.error) {
        return (
          <div className="bg-muted/50 flex min-h-[68px] items-center gap-3 rounded-md border-2 border-red-400 p-3">
            <span className="text-red-500">⚠️</span>
            <div className="flex flex-col">
              <span className="text-sm font-semibold">Geocoding Error</span>
              <span className="text-muted-foreground text-sm">
                {result?.error || "Unknown error"}
              </span>
            </div>
          </div>
        );
      }
      if (!result?.result) {
        return (
          <div className="bg-muted/50 flex min-h-[68px] items-center gap-3 rounded-md border-2 border-blue-400 p-3">
            <Loader2 className="h-5 w-5 flex-shrink-0 animate-spin text-blue-500" />
            <div className="flex flex-col">
              <span className="text-sm font-semibold">
                Geocoding location...
              </span>
              <span className="text-muted-foreground text-sm">
                Please wait while we find your location
              </span>
            </div>
          </div>
        );
      }

      const { name, latitude, longitude } = result?.result;
      return (
        <div className="bg-muted/50 hover:bg-muted/70 flex min-h-[68px] items-center gap-3 rounded-md border-2 border-blue-400 p-3 transition-all duration-300 hover:border-blue-500 hover:shadow-md">
          <MapPin className="h-5 w-5 flex-shrink-0 text-blue-500" />
          <div className="flex flex-col">
            <span className="text-sm font-semibold">{name}</span>
            <span className="text-muted-foreground text-sm">
              {latitude}°N, {longitude}°E
            </span>
          </div>
        </div>
      );
    },
  });
  return null;
};

export const WeatherSearchToolUI = () => {
  useAssistantTool({
    toolName: "weather_search",
    description:
      "Find the weather in a location given a longitude and latitude",
    parameters: z.object({
      query: z.string(),
      longitude: z.number(),
      latitude: z.number(),
    }),
    execute: async (args: {
      query: string;
      longitude: number;
      latitude: number;
    }) => {
      try {
        const response = await fetch(
          `https://api.open-meteo.com/v1/forecast?latitude=${args.latitude}&longitude=${args.longitude}&hourly=temperature_2m&models=jma_seamless`,
        );

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();

        if (data.hourly && data.hourly.time && data.hourly.temperature_2m) {
          const now = new Date();
          const nowUtcString = now.toISOString().substring(0, 14) + "00";

          let currentHourIndex = data.hourly.time.findIndex(
            (t: string) => t >= nowUtcString,
          );

          currentHourIndex =
            currentHourIndex > 0
              ? currentHourIndex - 1
              : currentHourIndex === -1
                ? data.hourly.time.length - 1
                : 0;

          const currentTemp = data.hourly.temperature_2m[currentHourIndex];

          return {
            success: true,
            temperature: currentTemp,
            timestamp: data.hourly.time[currentHourIndex],
          };
        } else {
          throw new Error("Invalid API response format");
        }
      } catch (error) {
        return {
          success: false,
          error:
            error instanceof Error ? error.message : "Failed to fetch weather",
        };
      }
    },
    render: ({ args, result }) => {
      const isLoading = !result;
      const error = result?.success === false ? result.error : null;
      const temp = result?.success ? result.temperature : null;
      const isDay = result?.success
        ? new Date(result.timestamp).getHours() >= 6 &&
          new Date(result.timestamp).getHours() < 18
        : true;

      return (
        <div className="bg-muted/50 hover:bg-muted/70 mt-4 flex min-h-[68px] items-center gap-3 rounded-md border-2 border-blue-400 p-3 transition-all duration-300 hover:border-blue-500 hover:shadow-md">
          {isLoading ? (
            <Loader2 className="text-muted-foreground h-5 w-5 animate-spin" />
          ) : error ? (
            <span className="text-red-500">⚠️</span>
          ) : isDay ? (
            <Sun className="h-5 w-5 flex-shrink-0 text-yellow-500" />
          ) : (
            <Moon className="h-5 w-5 flex-shrink-0 text-blue-300" />
          )}
          <div className="flex flex-col">
            <span className="text-sm font-semibold">
              {isLoading
                ? "Searching for weather..."
                : error
                  ? "Error Fetching Weather"
                  : `Weather in ${args?.query}`}
            </span>
            <span className="text-muted-foreground text-sm">
              {isLoading
                ? "Loading..."
                : error
                  ? error
                  : temp !== null
                    ? `${temp}°C`
                    : "N/A"}
            </span>
          </div>
        </div>
      );
    },
  });
  return null;
};



================================================
FILE: apps/docs/components/ui/avatar.tsx
================================================
"use client";

import * as React from "react";
import * as AvatarPrimitive from "@radix-ui/react-avatar";

import { cn } from "@/lib/utils";

function Avatar({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Root>) {
  return (
    <AvatarPrimitive.Root
      data-slot="avatar"
      className={cn(
        "relative flex size-8 shrink-0 overflow-hidden rounded-full",
        className,
      )}
      {...props}
    />
  );
}

function AvatarImage({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Image>) {
  return (
    <AvatarPrimitive.Image
      data-slot="avatar-image"
      className={cn("aspect-square size-full", className)}
      {...props}
    />
  );
}

function AvatarFallback({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {
  return (
    <AvatarPrimitive.Fallback
      data-slot="avatar-fallback"
      className={cn(
        "bg-muted flex size-full items-center justify-center rounded-full",
        className,
      )}
      {...props}
    />
  );
}

export { Avatar, AvatarImage, AvatarFallback };



================================================
FILE: apps/docs/components/ui/badge.tsx
================================================
import * as React from "react";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const badgeVariants = cva(
  "inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  },
);

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  );
}

export { Badge, badgeVariants };



================================================
FILE: apps/docs/components/ui/button.tsx
================================================
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-[color,box-shadow] disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40",
        outline:
          "border border-input bg-background shadow-xs hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
);

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean;
  }) {
  const Comp = asChild ? Slot : "button";

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  );
}

export { Button, buttonVariants };



================================================
FILE: apps/docs/components/ui/card.tsx
================================================
import * as React from "react";

import { cn } from "@/lib/utils";

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "bg-card text-card-foreground rounded-xl border shadow",
      className,
    )}
    {...props}
  />
));
Card.displayName = "Card";

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
));
CardHeader.displayName = "CardHeader";

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
));
CardTitle.displayName = "CardTitle";

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-muted-foreground text-sm", className)}
    {...props}
  />
));
CardDescription.displayName = "CardDescription";

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
));
CardContent.displayName = "CardContent";

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
));
CardFooter.displayName = "CardFooter";

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardDescription,
  CardContent,
};



================================================
FILE: apps/docs/components/ui/dialog.tsx
================================================
"use client";

import * as React from "react";
import * as DialogPrimitive from "@radix-ui/react-dialog";
import { XIcon } from "lucide-react";

import { cn } from "@/lib/utils";

function Dialog({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Root>) {
  return <DialogPrimitive.Root data-slot="dialog" {...props} />;
}

function DialogTrigger({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {
  return <DialogPrimitive.Trigger data-slot="dialog-trigger" {...props} />;
}

function DialogPortal({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Portal>) {
  return <DialogPrimitive.Portal data-slot="dialog-portal" {...props} />;
}

function DialogClose({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Close>) {
  return <DialogPrimitive.Close data-slot="dialog-close" {...props} />;
}

function DialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {
  return (
    <DialogPrimitive.Overlay
      data-slot="dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/80",
        className,
      )}
      {...props}
    />
  );
}

function DialogContent({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Content>) {
  return (
    <DialogPortal data-slot="dialog-portal">
      <DialogOverlay />
      <DialogPrimitive.Content
        data-slot="dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed left-[50%] top-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className,
        )}
        {...props}
      >
        {children}
        <DialogPrimitive.Close className="ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground rounded-xs focus:outline-hidden absolute right-4 top-4 opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 disabled:pointer-events-none [&_svg:not([class*='size-'])]:size-4 [&_svg]:pointer-events-none [&_svg]:shrink-0">
          <XIcon />
          <span className="sr-only">Close</span>
        </DialogPrimitive.Close>
      </DialogPrimitive.Content>
    </DialogPortal>
  );
}

function DialogHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  );
}

function DialogFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className,
      )}
      {...props}
    />
  );
}

function DialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Title>) {
  return (
    <DialogPrimitive.Title
      data-slot="dialog-title"
      className={cn("text-lg font-semibold leading-none", className)}
      {...props}
    />
  );
}

function DialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Description>) {
  return (
    <DialogPrimitive.Description
      data-slot="dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  );
}

export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
};



================================================
FILE: apps/docs/components/ui/resizable.tsx
================================================
"use client";

import * as React from "react";
import { GripVerticalIcon } from "lucide-react";
import * as ResizablePrimitive from "react-resizable-panels";

import { cn } from "@/lib/utils";

function ResizablePanelGroup({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) {
  return (
    <ResizablePrimitive.PanelGroup
      data-slot="resizable-panel-group"
      className={cn(
        "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
        className,
      )}
      {...props}
    />
  );
}

function ResizablePanel({
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.Panel>) {
  return <ResizablePrimitive.Panel data-slot="resizable-panel" {...props} />;
}

function ResizableHandle({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean;
}) {
  return (
    <ResizablePrimitive.PanelResizeHandle
      data-slot="resizable-handle"
      className={cn(
        "bg-border focus-visible:ring-ring focus-visible:outline-hidden relative flex w-px items-center justify-center after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:ring-1 focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
        className,
      )}
      {...props}
    >
      {withHandle && (
        <div className="bg-border rounded-xs z-10 flex h-4 w-3 items-center justify-center border">
          <GripVerticalIcon className="size-2.5" />
        </div>
      )}
    </ResizablePrimitive.PanelResizeHandle>
  );
}

export { ResizablePanelGroup, ResizablePanel, ResizableHandle };



================================================
FILE: apps/docs/components/ui/select.tsx
================================================
"use client";

import * as React from "react";
import {
  CaretSortIcon,
  CheckIcon,
  ChevronDownIcon,
  ChevronUpIcon,
} from "@radix-ui/react-icons";
import * as SelectPrimitive from "@radix-ui/react-select";

import { cn } from "@/lib/utils";

const Select = SelectPrimitive.Root;

const SelectGroup = SelectPrimitive.Group;

const SelectValue = SelectPrimitive.Value;

const SelectTrigger = React.forwardRef<
  React.ComponentRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "border-input ring-offset-background placeholder:text-muted-foreground focus:ring-ring flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border bg-transparent px-3 py-2 text-sm shadow-sm focus:outline-none focus:ring-1 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className,
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <CaretSortIcon className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
));
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName;

const SelectScrollUpButton = React.forwardRef<
  React.ComponentRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className,
    )}
    {...props}
  >
    <ChevronUpIcon />
  </SelectPrimitive.ScrollUpButton>
));
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName;

const SelectScrollDownButton = React.forwardRef<
  React.ComponentRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className,
    )}
    {...props}
  >
    <ChevronDownIcon />
  </SelectPrimitive.ScrollDownButton>
));
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName;

const SelectContent = React.forwardRef<
  React.ComponentRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border shadow-md",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className,
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]",
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
));
SelectContent.displayName = SelectPrimitive.Content.displayName;

const SelectLabel = React.forwardRef<
  React.ComponentRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", className)}
    {...props}
  />
));
SelectLabel.displayName = SelectPrimitive.Label.displayName;

const SelectItem = React.forwardRef<
  React.ComponentRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "focus:bg-accent focus:text-accent-foreground relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className,
    )}
    {...props}
  >
    <span className="absolute right-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <CheckIcon className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>
    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
));
SelectItem.displayName = SelectPrimitive.Item.displayName;

const SelectSeparator = React.forwardRef<
  React.ComponentRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("bg-muted -mx-1 my-1 h-px", className)}
    {...props}
  />
));
SelectSeparator.displayName = SelectPrimitive.Separator.displayName;

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
};



================================================
FILE: apps/docs/components/ui/sheet.tsx
================================================
"use client";

import * as React from "react";
import * as SheetPrimitive from "@radix-ui/react-dialog";
import { Cross2Icon } from "@radix-ui/react-icons";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const Sheet = SheetPrimitive.Root;

const SheetTrigger = SheetPrimitive.Trigger;

const SheetClose = SheetPrimitive.Close;

const SheetPortal = SheetPrimitive.Portal;

const SheetOverlay = React.forwardRef<
  React.ComponentRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/80",
      className,
    )}
    {...props}
    ref={ref}
  />
));
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName;

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  },
);

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ComponentRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      <SheetPrimitive.Close className="ring-offset-background focus:ring-ring data-[state=open]:bg-secondary absolute right-4 top-4 rounded-sm opacity-70 transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:pointer-events-none">
        <Cross2Icon className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
      {children}
    </SheetPrimitive.Content>
  </SheetPortal>
));
SheetContent.displayName = SheetPrimitive.Content.displayName;

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className,
    )}
    {...props}
  />
);
SheetHeader.displayName = "SheetHeader";

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className,
    )}
    {...props}
  />
);
SheetFooter.displayName = "SheetFooter";

const SheetTitle = React.forwardRef<
  React.ComponentRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-foreground text-lg font-semibold", className)}
    {...props}
  />
));
SheetTitle.displayName = SheetPrimitive.Title.displayName;

const SheetDescription = React.forwardRef<
  React.ComponentRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-muted-foreground text-sm", className)}
    {...props}
  />
));
SheetDescription.displayName = SheetPrimitive.Description.displayName;

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
};



================================================
FILE: apps/docs/components/ui/tooltip.tsx
================================================
"use client";

import * as React from "react";
import * as TooltipPrimitive from "@radix-ui/react-tooltip";

import { cn } from "@/lib/utils";

function TooltipProvider({
  delayDuration = 0,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {
  return (
    <TooltipPrimitive.Provider
      data-slot="tooltip-provider"
      delayDuration={delayDuration}
      {...props}
    />
  );
}

function Tooltip({
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Root>) {
  return (
    <TooltipProvider>
      <TooltipPrimitive.Root data-slot="tooltip" {...props} />
    </TooltipProvider>
  );
}

function TooltipTrigger({
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {
  return <TooltipPrimitive.Trigger data-slot="tooltip-trigger" {...props} />;
}

function TooltipContent({
  className,
  sideOffset = 0,
  children,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Content>) {
  return (
    <TooltipPrimitive.Portal>
      <TooltipPrimitive.Content
        data-slot="tooltip-content"
        sideOffset={sideOffset}
        className={cn(
          "bg-primary text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit text-balance rounded-md px-3 py-1.5 text-xs",
          className,
        )}
        {...props}
      >
        {children}
        <TooltipPrimitive.Arrow className="bg-primary fill-primary z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]" />
      </TooltipPrimitive.Content>
    </TooltipPrimitive.Portal>
  );
}

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };



================================================
FILE: apps/docs/content/blog/2024-07-29-hello/index.mdx
================================================
---
title: Hello, assistant-ui
description: assistant-ui is an open-source AI chat component for React.
author: Simon Farshid
date: 2024-07-29T12:00:00
---

import Image from "next/image";
import { TestimonialContainer } from "@/components/testimonials/TestimonialContainer";
import { BLOG_TESTIMONIALS } from "@/components/testimonials/testimonials";
import npmDownloads from "./npm-downloads.png";
import assistantUi from "./assistant-ui-screenshot.png";

After spending the last two years building Gen-AI prototypes and products, I realized that all software will soon have a natural language interface. OpenAI's ChatGPT sets the quality bar high and I wanted to have a similar UX in my own apps. No solution on the market came anywhere close, so I built assistant-ui.

assistant-ui is an open-source, embeddable, customizable AI chat component for React web apps. You can use it to build GPT wrappers, in-app copilots, or agentic systems. It supports rich content (markdown, code highlighting, charts, tables), generative UI, message editing, ..., across all the major model providers.

<Image
  src={assistantUi}
  alt="screenshot of assistant-ui"
  width={398}
  height={498}
  className="mx-auto rounded-xl border drop-shadow"
/>

Earlier last month, I released the project to the world. The feedback from early adopters has been overwhelmingly positive:

<div className="not-prose mx-auto max-w-md">
  <TestimonialContainer testimonials={BLOG_TESTIMONIALS} />
</div>

It didn't take long for developers to start building with assistant-ui. Here are some of my favorite products from the community:

- [Helicone](https://helicone.ai/) - open-source LLM observability platform
- [screenpipe](https://screenpi.pe/) - AI to remember everything you see, say or hear
- [myresume.guru](http://myresume.guru) - AI resume optimizer to land your dream job
- [Entelligence](https://entelligence.ai/) - AI mentor for software engineers

With 250+ stars on [GitHub](https://github.com/assistant-ui/assistant-ui) and over 1k [npm](https://www.npmjs.com/package/@assistant-ui/react) weekly downloads, we got a vibrant growing community of developers who care about the user experience.

<Image
  src={npmDownloads}
  alt="graph showing 1355 weekly npm downloads"
  width={381}
  height={94}
  className="mx-auto dark:hue-rotate-180 dark:invert"
/>

I want to thank the following contributors who got the project to where it is today:

- [@m13v](https://github.com/m13v) for contributing two examples and several how-to videos
- [@okisdev](https://github.com/okisdev) for multiple bugfixes
- [@Rajaniraiyn](https://github.com/Rajaniraiyn) for improving streaming support for REST APIs
- @ccbkai for integrating Chrome's `window.ai` with assistant-ui
- [@stingfeng](https://github.com/stingfeng/dify-extensions) for building a [Dify](https://dify.ai) integration
- [@Ephibbs](https://github.com/Ephibbs/flowtoken) for building a Perplexity-style text streaming library ([Demo](https://assistant-ui-flowtoken-demo.vercel.app/))
- … and so many others

assistant-ui builds on top of [Radix UI](https://www.radix-ui.com/), [Tailwind](https://tailwindcss.com/), [shadcn/ui](https://ui.shadcn.com/), [Vercel AI SDK](https://sdk.vercel.ai/docs/introduction) and other amazing open-source projects.

Over the coming month, I'll be rolling out multimodal support, so you can use your voice and upload images. There's so much more in the pipeline that I can't wait to unveil!

Today, several companies like [Helicone (YC W23)](https://x.com/justinstorre/status/1816849882612904156) are using assistant-ui to power a core part of their product. If your company wants to do the same, please [get in touch](https://cal.com/simon-farshid/assistant-ui).

If you're building conversational AI, join us on [Discord](https://discord.gg/S9dwgCNEFs). If you're technical and want to shape how we interact with AIs of the future, [send me an email](mailto:simon@assistant-ui.com).



================================================
FILE: apps/docs/content/blog/2024-09-11/index.mdx
================================================
---
title: Build conversational AI agents with LangGraph and assistant-ui
description: Announcing our collaboration with LangChain
author: Harrison Chase
date: 2024-09-11T12:00:00
---

import { Redirect } from "./redirect";

<Redirect />



================================================
FILE: apps/docs/content/blog/2024-09-11/redirect.tsx
================================================
import { redirect } from "next/navigation";

export const Redirect = () => {
  redirect("https://medium.com/relta/github-assistant-49ae388ad758");
};



================================================
FILE: apps/docs/content/blog/2024-12-15/index.mdx
================================================
---
title: Announcing github-assistant
description: github-assistant answers questions about your GitHub repositories.
author: Amir Zohrenejad
date: 2024-12-15T12:00:00
---

import { Redirect } from "./redirect";

<Redirect />



================================================
FILE: apps/docs/content/blog/2024-12-15/redirect.tsx
================================================
import { redirect } from "next/navigation";

export const Redirect = () => {
  redirect("https://blog.langchain.dev/assistant-ui/");
};



================================================
FILE: apps/docs/content/blog/2025-01-31-changelog/index.mdx
================================================
---
title: January 2025 Changelog
description: shadcn/ui, Thread Management, Improvements to AI SDK and LangGraph support
author: Simon Farshid
date: 2025-01-31T12:00:00
---

import { Callout } from "fumadocs-ui/components/callout";

<Callout emoji="🎉">
  This is the first edition of our changelog. We post these updates on a monthly
  basis. If you want more frequent updates about our new features, join our
  Discord where we have a `#changelog` channel that is updated on a daily basis.
</Callout>

## Summary

In January, we shipped 36 new versions of our package `@assistant-ui/react`. We also crossed 10k weekly downloads on npm for the first time. 🎉

## shadcn/ui CLI support

You can now install all components using the shadcn CLI, e.g.

```sh
npx shadcn@latest add "https://r.assistant-ui.com/thread"
```

We began a migration towards distributing our components as unstyled primitives and using the shadcn CLI to drop styles in your project.

## Styled components moved to @assistant-ui/react-ui

All styled components (Thread, ThreadList, AssistantModal, makeMarkdownText, etc.) have been moved to a new package, `@assistant-ui/react-ui`.

To ease the migration, we added a migration codemod:

```sh
npx assistant-ui upgrade
```

This will update your codebase to use the new package. This new package remains supported, however, based on the learnings from existing users, we recommend all new projects to use our shadcn/ui CLI instead.

## Customizing the max-width of the Thread

You can now customize the max-width of the thread via `--aui-thread-max-width` CSS variable.

## Thread Management

One of our main focus areas in this month was on the new Thread Management API. The new ThreadList API is available under `runtime.threads`. It allows you to create, switch to, rename, archive, and delete threads.

We shipped a `<ThreadList />` component which gives the user the UI to manage their threads.

We also shipped a few hooks `useThreadListItem()`, `useThreadListItemRuntime()`, `useRemoteThreadListRuntime()` and `useCloudThreadListRuntime()`.

## Assistant Cloud

We rolled out the new Assistant Cloud service to early users. This is a managed service for persistence, chat history, and thread management.
Our runtimes are being upgraded to support Assistant Cloud natively by letting you pass a `cloud` object to the runtime hook.

Keep an eye out for the public announcement of Assistant Cloud in a few days.

## Improvements to our LangGraph Integration

- We now have full support for LangGraph's `interrupt()`/`Command` API. You can check out the new example repository [here](https://github.com/assistant-ui/assistant-ui-langgraph-interrupt).
- We now also support starting LangGraph runs without a user message (based on button input or other events).
- Cancellation of runs is now supported via an `abortSignal` being passed to the LangGraph runtime adapter.

## Improvements to our AI SDK Integration

We now give you access to annotations and data packets in the assistant message:

```tsx
type AssistantMessage = {
  metadata: {
    unstable_annotations: [...],
    unstable_data: [...],
  }
}
```

## AI SDK recommended for new projects

For new projects, we recommend using the AI SDK integration. Previously, we recommended our custom SDK called `useEdgeRuntime`.  
With our improved AI SDK integration, we believe it is time to recommend AI SDK for new projects, giving you access to the AI SDK ecosystem.

The edge runtime remains maintained and supported for existing projects.

## Misc

- **Refactors & API Enhancements**:

  - Renamed `ModelConfig` to `ModelContext`.
  - Moved `switchToThread / switchToNewThread` under `runtime.threads`.
  - Deprecated `UIContentPart`.
  - `ToolCallContentPart.args` is now a `JSONObject`.
  - `MessagePrimitive.tools.Override` introduced.
  - Added `AppendMessage.sourceId` to provide better tracking.
  - Reverse order of threads in `useRemoteThreadListRuntime` for better visibility.
  - Added `threads.getById` and `threads.main` APIs.
  - Introduced `AssistantCloudThreadHistoryAdapter` to handle cloud-based thread history.
  - Auto-injection of history adapter in the local runtime.
  - Tool call `id` + `args` are now optional in `ThreadMessageLike`.
  - Added `ThreadListPrimitive.Root`.
  - `ComposerRuntime.clearAttachments` API added.
  - Improved input support for IME keyboards (e.g., Chinese, Japanese, Korean).
  - Moved repository to a new GitHub organization (`assistant-ui/assistant-ui`).

- **External Store & Data Handling**:

  - Enhanced `ExternalStoreAdapter` to support metadata and attachments.
  - Renamed `getExternalStoreMessage` to `getExternalStoreMessages`.
  - Tool call `args` streaming support in our Python SDK.

- **User Interface & Styling**:

  - Styled UI assistant message footer.
  - Improved attachment filename handling to prevent overflow.
  - Renamed CSS class to `aui-thread-welcome-suggestions`.

- **Performance Optimizations**:

  - Memoized `MessageRepository.getMessages()` for better efficiency.
  - Marked `ChatAdapter` types as readonly.

- **Bug Fixes**:

  - Fixed event subscription issues in thread lists.
  - Fixed import errors in React server environments.
  - Prevented excessive classes being included via TailwindCSS.
  - Fixed AI SDK annotation packet errors.



================================================
FILE: apps/docs/content/docs/about-assistantui.mdx
================================================
---
title: "About assistant-ui"
---

import { Sparkles, PanelsTopLeft, Database, Terminal } from "lucide-react";

assistant-ui helps you create beautiful, enterprise-grade AI chat interfaces in minutes. Whether you're building a chatGPT clone, a customer support chatbot, an AI assistant, or a complex multi agent application, assistant-ui provides the frontend primative components and state management layers to focus on what makes your application unique.

## Key Features

<Cards>

    <Card icon={<PanelsTopLeft className="text-purple-300" />} title='Instant Chat UI'>

    Pre-built beautiful, customizable chat interfaces out of the box. Easy to quickly iterate on your idea.

    </Card>

    <Card icon={<PanelsTopLeft className="text-blue-300" />} title='Chat State Management'>

    Powerful state management for chat interactions, optimized for streaming responses and efficient rendering.

    </Card>

    <Card icon={<Database className="text-green-300" />} title='High Performance'>

    Optimized for speed and efficiency with minimal bundle size, ensuring your AI chat interfaces remain responsive.

    </Card>

    <Card icon={<Terminal className="text-orange-300" />} title='Framework Agnostic'>

    Easily integrate with any backend system, whether using Vercel AI SDK, direct LLM connections, or custom solutions.
     Works with any React-based framework.

    </Card>

</Cards>

<Callout title="Want to try it out?">
  [Get Started in 30 Seconds](/docs/getting-started).
</Callout>

## AI Accessible Documentation

Our docs are easily accessible to AI assistants through several methods:

- **[MCP Docs Server](/docs/mcp-docs-server)** - Direct MCP integration for IDEs and agents
- **`/llms.txt`** - Structured index of all documentation pages
- **`/llms-full.txt`** - Complete documentation in a single file
- **`.mdx` suffix** - Add `.mdx` to any page's URL for raw markdown content





================================================
FILE: apps/docs/content/docs/architecture.mdx
================================================
---
title: "Architecture"
---

import { Sparkles, PanelsTopLeft, Database, Terminal } from "lucide-react";

## assistant-ui is built on these main pillars:

<div className="grid grid-cols-1 md:grid-cols-3 gap-4 my-8">
    <Card title='1. Frontend components'>
        Shadcn UI chat components with built-in state management
    </Card>

    <Card title='2. Runtime'>
        State management layer connecting UI to LLMs and backend services
    </Card>

    <Card title='3. Assistant Cloud'>
        Hosted service for thread persistence, history, and user management
    </Card>
</div>



### 1. Frontend components
Stylized and functional chat components built on top of Shadcn components that have context state management provided by the assistantUI runtime provider. These pre-built React components come with intelligent state management. [View our components](/docs/ui/Thread)

### 2. Runtime
A React state management context for assistant chat. The runtime handles data conversions between the local state and calls to backends and LLMs. We offer different runtime solutions that work with various frameworks like Vercel AI SDK, LangGraph, LangChain, Helicone, local runtime, and an ExternalStore when you need full control of the frontend message state. [You can view the runtimes we support](/docs/runtimes/pick-a-runtime)

### 3. Assistant Cloud
A hosted service that enhances your assistant experience with comprehensive thread management and message history. Assistant Cloud stores complete message history, automatically persists threads, supports human-in-the-loop workflows, and integrates with common auth providers to seamlessly allow users to resume conversations at any point. [Cloud Docs](/docs/cloud/overview)


### There are three common ways to architect your assistant-ui application:

#### **1. Direct Integration with External Providers**

```mermaid
graph TD
    A[Frontend Components] --> B[Runtime]
    B --> D[External Providers or LLM APIs]
    
    
    classDef default color:#f8fafc,text-align:center
    
    style A fill:#e879f9,stroke:#2e1065,stroke-width:2px,color:#2e1065,font-weight:bold
    style B fill:#93c5fd,stroke:#1e3a8a,stroke-width:2px,color:#1e3a8a,font-weight:bold
    style D fill:#fca5a5,stroke:#7f1d1d,stroke-width:2px,color:#7f1d1d,font-weight:bold
    
    class A,B,C,D,E default
```

#### **2. Using your own API endpoint**

```mermaid
graph TD
    A[Frontend Components] --> B[Runtime]
    B --> E[Your API Backend]
    E --> D[External Providers or LLM APIs]
    
    
    classDef default color:#f8fafc,text-align:center
    
    style A fill:#e879f9,stroke:#2e1065,stroke-width:2px,color:#2e1065,font-weight:bold
    style B fill:#93c5fd,stroke:#1e3a8a,stroke-width:2px,color:#1e3a8a,font-weight:bold
    style D fill:#fca5a5,stroke:#7f1d1d,stroke-width:2px,color:#7f1d1d,font-weight:bold
    style E fill:#fca5a5,stroke:#7f1d1d,stroke-width:2px,color:#7f1d1d,font-weight:bold
    
    class A,B,C,D,E default
```

#### **3. With Assistant Cloud**

```mermaid
graph TD
    A[Frontend Components] --> B[Runtime]
    B --> C[Cloud]
    E --> C
    C --> D[External Providers or LLM APIs]
    B --> E[Your API Backend]
    
    classDef default color:#f8fafc,text-align:center
    
    style A fill:#e879f9,stroke:#2e1065,stroke-width:2px,color:#2e1065,font-weight:bold
    style B fill:#93c5fd,stroke:#1e3a8a,stroke-width:2px,color:#1e3a8a,font-weight:bold
    style C fill:#86efac,stroke:#064e3b,stroke-width:2px,color:#064e3b,font-weight:bold
    style D fill:#fca5a5,stroke:#7f1d1d,stroke-width:2px,color:#7f1d1d,font-weight:bold
    style E fill:#fca5a5,stroke:#7f1d1d,stroke-width:2px,color:#7f1d1d,font-weight:bold
    
    class A,B,C,D,E default
```


================================================
FILE: apps/docs/content/docs/getting-started.mdx
================================================
---
title: Getting Started
---

import { Step, Steps } from "fumadocs-ui/components/steps";
import { Tab, Tabs } from "fumadocs-ui/components/tabs";
import { Callout } from "fumadocs-ui/components/callout";
import { Card, Cards } from "fumadocs-ui/components/card";

## Start with a new project

![animated gif showing the steps to create a new project](../../../../.github/assets/assistant-ui-starter.gif)

<Steps>
  <Step>

### Initialize assistant-ui

**Create a new project:**

```sh
# Create a new project with the default template
npx assistant-ui@latest create

# Or start with a template:
# LangGraph
npx assistant-ui@latest create -t langgraph

# MCP support
npx assistant-ui@latest create -t mcp
```

**Add assistant-ui to an existing React project:**

```sh
# Add assistant-ui to an existing React project
npx assistant-ui@latest init
```

  </Step>
  <Step>

### Add API key

Add a new `.env` file to your project with your OpenAI API key:

```
OPENAI_API_KEY="sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"

# chat history -- sign up for free on https://cloud.assistant-ui.com
# NEXT_PUBLIC_ASSISTANT_BASE_URL="https://..."
```

  </Step>
  <Step>

### Start the app

```sh
npm run dev
```

  </Step>
</Steps>

## Manual installation

<Callout>
  We recommend `npx assistant-ui init` to setup existing projects.
</Callout>

<Steps>
  <Step>

### Add assistant-ui

<Tabs items={["With Tailwind (Recommended)", "Without Tailwind"]}>
  <Tab>

```sh npm2yarn
npx assistant-ui add thread thread-list
```

  </Tab>
  <Tab>
     <Steps>
        <Step>

Add the following packages:

```sh
npm install \
  @assistant-ui/react \
  @assistant-ui/react-markdown \
  @assistant-ui/styles \
  @radix-ui/react-tooltip \
  @radix-ui/react-slot \
  lucide-react \
  remark-gfm \
  class-variance-authority \
  clsx
```

        </Step>

        <Step>

Copy the following components into your project:

```tsx title="components/ui/button.tsx"
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const buttonVariants = cva("aui-button", {
  variants: {
    variant: {
      default: "aui-button-primary",
      outline: "aui-button-outline",
      ghost: "aui-button-ghost",
    },
    size: {
      default: "aui-button-medium",
      icon: "aui-button-icon",
    },
  },
  defaultVariants: {
    variant: "default",
    size: "default",
  },
});

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean;
  }) {
  const Comp = asChild ? Slot : "button";

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  );
}

export { Button, buttonVariants };
```

```tsx title="components/ui/tooltip.tsx"
"use client";

import * as React from "react";
import * as TooltipPrimitive from "@radix-ui/react-tooltip";

import { cn } from "@/lib/utils";

const TooltipProvider = TooltipPrimitive.Provider;

const Tooltip = TooltipPrimitive.Root;

const TooltipTrigger = TooltipPrimitive.Trigger;

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Portal>
    <TooltipPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn("aui-tooltip-content", className)}
      {...props}
    />
  </TooltipPrimitive.Portal>
));
TooltipContent.displayName = TooltipPrimitive.Content.displayName;

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };
```

```tsx title="components/assistant-ui/thread.tsx"
import {
  ActionBarPrimitive,
  BranchPickerPrimitive,
  ComposerPrimitive,
  MessagePrimitive,
  ThreadPrimitive,
} from "@assistant-ui/react";
import type { FC } from "react";
import {
  ArrowDownIcon,
  CheckIcon,
  ChevronLeftIcon,
  ChevronRightIcon,
  CopyIcon,
  PencilIcon,
  RefreshCwIcon,
  SendHorizontalIcon,
} from "lucide-react";
import { cn } from "@/lib/utils";

import { Button } from "@/components/ui/button";
import { MarkdownText } from "@/components/assistant-ui/markdown-text";
import { TooltipIconButton } from "@/components/assistant-ui/tooltip-icon-button";

export const Thread: FC = () => {
  return (
    <ThreadPrimitive.Root
      className="aui-root aui-thread-root"
      style={{
        ["--thread-max-width" as string]: "42rem",
      }}
    >
      <ThreadPrimitive.Viewport className="aui-thread-viewport">
        <ThreadWelcome />

        <ThreadPrimitive.Messages
          components={{
            UserMessage: UserMessage,
            EditComposer: EditComposer,
            AssistantMessage: AssistantMessage,
          }}
        />

        <ThreadPrimitive.If empty={false}>
          <div className="aui-thread-viewport-spacer" />
        </ThreadPrimitive.If>

        <div className="aui-thread-viewport-footer">
          <ThreadScrollToBottom />
          <Composer />
        </div>
      </ThreadPrimitive.Viewport>
    </ThreadPrimitive.Root>
  );
};

const ThreadScrollToBottom: FC = () => {
  return (
    <ThreadPrimitive.ScrollToBottom asChild>
      <TooltipIconButton
        tooltip="Scroll to bottom"
        variant="outline"
        className="aui-thread-scroll-to-bottom"
      >
        <ArrowDownIcon />
      </TooltipIconButton>
    </ThreadPrimitive.ScrollToBottom>
  );
};

const ThreadWelcome: FC = () => {
  return (
    <ThreadPrimitive.Empty>
      <div className="aui-thread-welcome-root">
        <div className="aui-thread-welcome-center">
          <p className="aui-thread-welcome-message">
            How can I help you today?
          </p>
        </div>
        <ThreadWelcomeSuggestions />
      </div>
    </ThreadPrimitive.Empty>
  );
};

const ThreadWelcomeSuggestions: FC = () => {
  return (
    <div className="aui-thread-welcome-suggestions">
      <ThreadPrimitive.Suggestion
        className="aui-thread-welcome-suggestion"
        prompt="What is the weather in Tokyo?"
        method="replace"
        autoSend
      >
        <span className="aui-thread-welcome-suggestion-text">
          What is the weather in Tokyo?
        </span>
      </ThreadPrimitive.Suggestion>
      <ThreadPrimitive.Suggestion
        className="aui-thread-welcome-suggestion"
        prompt="What is assistant-ui?"
        method="replace"
        autoSend
      >
        <span className="aui-thread-welcome-suggestion-text">
          What is assistant-ui?
        </span>
      </ThreadPrimitive.Suggestion>
    </div>
  );
};

const Composer: FC = () => {
  return (
    <ComposerPrimitive.Root className="aui-composer-root">
      <ComposerPrimitive.Input
        rows={1}
        autoFocus
        placeholder="Write a message..."
        className="aui-composer-input"
      />
      <ComposerAction />
    </ComposerPrimitive.Root>
  );
};

const ComposerAction: FC = () => {
  return (
    <>
      <ThreadPrimitive.If running={false}>
        <ComposerPrimitive.Send asChild>
          <TooltipIconButton
            tooltip="Send"
            variant="default"
            className="aui-composer-send"
          >
            <SendHorizontalIcon />
          </TooltipIconButton>
        </ComposerPrimitive.Send>
      </ThreadPrimitive.If>
      <ThreadPrimitive.If running>
        <ComposerPrimitive.Cancel asChild>
          <TooltipIconButton
            tooltip="Cancel"
            variant="default"
            className="aui-composer-cancel"
          >
            <CircleStopIcon />
          </TooltipIconButton>
        </ComposerPrimitive.Cancel>
      </ThreadPrimitive.If>
    </>
  );
};

const UserMessage: FC = () => {
  return (
    <MessagePrimitive.Root className="aui-user-message-root">
      <UserActionBar />

      <div className="aui-user-message-content">
        <MessagePrimitive.Parts />
      </div>

      <BranchPicker className="aui-user-branch-picker" />
    </MessagePrimitive.Root>
  );
};

const UserActionBar: FC = () => {
  return (
    <ActionBarPrimitive.Root
      hideWhenRunning
      autohide="not-last"
      className="aui-user-action-bar-root"
    >
      <ActionBarPrimitive.Edit asChild>
        <TooltipIconButton tooltip="Edit">
          <PencilIcon />
        </TooltipIconButton>
      </ActionBarPrimitive.Edit>
    </ActionBarPrimitive.Root>
  );
};

const EditComposer: FC = () => {
  return (
    <ComposerPrimitive.Root className="aui-edit-composer-root">
      <ComposerPrimitive.Input className="aui-edit-composer-input" />

      <div className="aui-edit-composer-footer">
        <ComposerPrimitive.Cancel asChild>
          <Button variant="ghost">Cancel</Button>
        </ComposerPrimitive.Cancel>
        <ComposerPrimitive.Send asChild>
          <Button>Send</Button>
        </ComposerPrimitive.Send>
      </div>
    </ComposerPrimitive.Root>
  );
};

const AssistantMessage: FC = () => {
  return (
    <MessagePrimitive.Root className="aui-assistant-message-root">
      <div className="aui-assistant-message-content">
        <MessagePrimitive.Parts components={{ Text: MarkdownText }} />
      </div>

      <AssistantActionBar />

      <BranchPicker className="aui-assistant-branch-picker" />
    </MessagePrimitive.Root>
  );
};

const AssistantActionBar: FC = () => {
  return (
    <ActionBarPrimitive.Root
      hideWhenRunning
      autohide="not-last"
      autohideFloat="single-branch"
      className="aui-assistant-action-bar-root"
    >
      <ActionBarPrimitive.Copy asChild>
        <TooltipIconButton tooltip="Copy">
          <MessagePrimitive.If copied>
            <CheckIcon />
          </MessagePrimitive.If>
          <MessagePrimitive.If copied={false}>
            <CopyIcon />
          </MessagePrimitive.If>
        </TooltipIconButton>
      </ActionBarPrimitive.Copy>
      <ActionBarPrimitive.Reload asChild>
        <TooltipIconButton tooltip="Refresh">
          <RefreshCwIcon />
        </TooltipIconButton>
      </ActionBarPrimitive.Reload>
    </ActionBarPrimitive.Root>
  );
};

const BranchPicker: FC<BranchPickerPrimitive.Root.Props> = ({
  className,
  ...rest
}) => {
  return (
    <BranchPickerPrimitive.Root
      hideWhenSingleBranch
      className={cn("aui-branch-picker-root", className)}
      {...rest}
    >
      <BranchPickerPrimitive.Previous asChild>
        <TooltipIconButton tooltip="Previous">
          <ChevronLeftIcon />
        </TooltipIconButton>
      </BranchPickerPrimitive.Previous>
      <span className="aui-branch-picker-state">
        <BranchPickerPrimitive.Number /> / <BranchPickerPrimitive.Count />
      </span>
      <BranchPickerPrimitive.Next asChild>
        <TooltipIconButton tooltip="Next">
          <ChevronRightIcon />
        </TooltipIconButton>
      </BranchPickerPrimitive.Next>
    </BranchPickerPrimitive.Root>
  );
};

const CircleStopIcon = () => {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 16 16"
      fill="currentColor"
      width="16"
      height="16"
    >
      <rect width="10" height="10" x="3" y="3" rx="2" />
    </svg>
  );
};
```

```tsx title="components/assistant-ui/thread-list.tsx"
import type { FC } from "react";
import {
  ThreadListItemPrimitive,
  ThreadListPrimitive,
} from "@assistant-ui/react";
import { ArchiveIcon, PlusIcon } from "lucide-react";

import { Button } from "@/components/ui/button";
import { TooltipIconButton } from "@/components/assistant-ui/tooltip-icon-button";

export const ThreadList: FC = () => {
  return (
    <ThreadListPrimitive.Root className="aui-root aui-thread-list-root">
      <ThreadListNew />
      <ThreadListItems />
    </ThreadListPrimitive.Root>
  );
};

const ThreadListNew: FC = () => {
  return (
    <ThreadListPrimitive.New asChild>
      <Button className="aui-thread-list-new" variant="ghost">
        <PlusIcon />
        New Thread
      </Button>
    </ThreadListPrimitive.New>
  );
};

const ThreadListItems: FC = () => {
  return <ThreadListPrimitive.Items components={{ ThreadListItem }} />;
};

const ThreadListItem: FC = () => {
  return (
    <ThreadListItemPrimitive.Root className="aui-thread-list-item">
      <ThreadListItemPrimitive.Trigger className="aui-thread-list-item-trigger">
        <ThreadListItemTitle />
      </ThreadListItemPrimitive.Trigger>
      <ThreadListItemArchive />
    </ThreadListItemPrimitive.Root>
  );
};

const ThreadListItemTitle: FC = () => {
  return (
    <p className="aui-thread-list-item-title">
      <ThreadListItemPrimitive.Title fallback="New Chat" />
    </p>
  );
};

const ThreadListItemArchive: FC = () => {
  return (
    <ThreadListItemPrimitive.Archive asChild>
      <TooltipIconButton
        className="aui-thread-list-item-archive"
        variant="ghost"
        tooltip="Archive thread"
      >
        <ArchiveIcon />
      </TooltipIconButton>
    </ThreadListItemPrimitive.Archive>
  );
};
```

```tsx title="components/assistant-ui/markdown-text.tsx"
"use client";

import "@assistant-ui/react-markdown/styles/dot.css";

import {
  CodeHeaderProps,
  MarkdownTextPrimitive,
  unstable_memoizeMarkdownComponents as memoizeMarkdownComponents,
  useIsMarkdownCodeBlock,
} from "@assistant-ui/react-markdown";
import remarkGfm from "remark-gfm";
import { FC, memo, useState } from "react";
import { CheckIcon, CopyIcon } from "lucide-react";

import { TooltipIconButton } from "@/components/assistant-ui/tooltip-icon-button";
import { cn } from "@/lib/utils";

const MarkdownTextImpl = () => {
  return (
    <MarkdownTextPrimitive
      remarkPlugins={[remarkGfm]}
      className="aui-md"
      components={defaultComponents}
    />
  );
};

export const MarkdownText = memo(MarkdownTextImpl);

const CodeHeader: FC<CodeHeaderProps> = ({ language, code }) => {
  const { isCopied, copyToClipboard } = useCopyToClipboard();
  const onCopy = () => {
    if (!code || isCopied) return;
    copyToClipboard(code);
  };

  return (
    <div className="aui-code-header-root">
      <span className="aui-code-header-language">{language}</span>
      <TooltipIconButton tooltip="Copy" onClick={onCopy}>
        {!isCopied && <CopyIcon />}
        {isCopied && <CheckIcon />}
      </TooltipIconButton>
    </div>
  );
};

const useCopyToClipboard = ({
  copiedDuration = 3000,
}: {
  copiedDuration?: number;
} = {}) => {
  const [isCopied, setIsCopied] = useState<boolean>(false);

  const copyToClipboard = (value: string) => {
    if (!value) return;

    navigator.clipboard.writeText(value).then(() => {
      setIsCopied(true);
      setTimeout(() => setIsCopied(false), copiedDuration);
    });
  };

  return { isCopied, copyToClipboard };
};

const defaultComponents = memoizeMarkdownComponents({
  h1: ({ className, ...props }) => (
    <h1 className={cn("aui-md-h1", className)} {...props} />
  ),
  h2: ({ className, ...props }) => (
    <h2 className={cn("aui-md-h2", className)} {...props} />
  ),
  h3: ({ className, ...props }) => (
    <h3 className={cn("aui-md-h3", className)} {...props} />
  ),
  h4: ({ className, ...props }) => (
    <h4 className={cn("aui-md-h4", className)} {...props} />
  ),
  h5: ({ className, ...props }) => (
    <h5 className={cn("aui-md-h5", className)} {...props} />
  ),
  h6: ({ className, ...props }) => (
    <h6 className={cn("aui-md-h6", className)} {...props} />
  ),
  p: ({ className, ...props }) => (
    <p className={cn("aui-md-p", className)} {...props} />
  ),
  a: ({ className, ...props }) => (
    <a className={cn("aui-md-a", className)} {...props} />
  ),
  blockquote: ({ className, ...props }) => (
    <blockquote className={cn("aui-md-blockquote", className)} {...props} />
  ),
  ul: ({ className, ...props }) => (
    <ul className={cn("aui-md-ul", className)} {...props} />
  ),
  ol: ({ className, ...props }) => (
    <ol className={cn("aui-md-ol", className)} {...props} />
  ),
  hr: ({ className, ...props }) => (
    <hr className={cn("aui-md-hr", className)} {...props} />
  ),
  table: ({ className, ...props }) => (
    <table className={cn("aui-md-table", className)} {...props} />
  ),
  th: ({ className, ...props }) => (
    <th className={cn("aui-md-th", className)} {...props} />
  ),
  td: ({ className, ...props }) => (
    <td className={cn("aui-md-td", className)} {...props} />
  ),
  tr: ({ className, ...props }) => (
    <tr className={cn("aui-md-tr", className)} {...props} />
  ),
  sup: ({ className, ...props }) => (
    <sup className={cn("aui-md-sup", className)} {...props} />
  ),
  pre: ({ className, ...props }) => (
    <pre className={cn("aui-md-pre", className)} {...props} />
  ),
  code: function Code({ className, ...props }) {
    const isCodeBlock = useIsMarkdownCodeBlock();
    return (
      <code
        className={cn(!isCodeBlock && "aui-md-inline-code", className)}
        {...props}
      />
    );
  },
  CodeHeader,
});
```

```tsx title="components/assistant-ui/tooltip-icon-button.tsx"
"use client";

import { ComponentPropsWithoutRef, forwardRef } from "react";

import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { Button } from "@/components/ui/button";
import { cn } from "@/lib/utils";

export type TooltipIconButtonProps = ComponentPropsWithoutRef<typeof Button> & {
  tooltip: string;
  side?: "top" | "bottom" | "left" | "right";
};

export const TooltipIconButton = forwardRef<
  HTMLButtonElement,
  TooltipIconButtonProps
>(({ children, tooltip, side = "bottom", className, ...rest }, ref) => {
  return (
    <TooltipProvider>
      <Tooltip>
        <TooltipTrigger asChild>
          <Button
            variant="ghost"
            size="icon"
            {...rest}
            className={cn("", className)}
            ref={ref}
          >
            {children}
            <span className="aui-sr-only">{tooltip}</span>
          </Button>
        </TooltipTrigger>
        <TooltipContent side={side}>{tooltip}</TooltipContent>
      </Tooltip>
    </TooltipProvider>
  );
});

TooltipIconButton.displayName = "TooltipIconButton";
```

```ts title="lib/utils.ts"
import { type ClassValue, clsx } from "clsx";

export function cn(...inputs: ClassValue[]) {
  return clsx(inputs);
}
```

        </Step>

        <Step>
       The components above reference CSS class names like `aui-thread-root`, `aui-composer-input`, etc. These are normally replaced by our CLI with Tailwind class names, but in this case you'll use our pre-compiled CSS files without a need for Tailwind:

```ts
import "@assistant-ui/styles/index.css";
import "@assistant-ui/styles/markdown.css";
// import "@assistant-ui/styles/modal.css";  // for future reference, only if you use our modal component
```

        </Step>
     </Steps>

  </Tab>
</Tabs>

  </Step>
  <Step>

### Setup Backend Endpoint

Install provider SDK:

<Tabs id="provider" items={["OpenAI", "Anthropic", "Azure", "AWS", "Gemini", "GCP", "Groq", "Fireworks", "Cohere", "Ollama", "Chrome AI"]}>

```sh title="Terminal" tab="OpenAI"
npm install ai @assistant-ui/react-ai-sdk @ai-sdk/openai
```

```sh title="Terminal" tab="Anthropic"
npm install ai @assistant-ui/react-ai-sdk @ai-sdk/anthropic
```

```sh title="Terminal" tab="Azure"
npm install ai @assistant-ui/react-ai-sdk @ai-sdk/azure
```

```sh title="Terminal" tab="AWS"
npm install ai @assistant-ui/react-ai-sdk @ai-sdk/amazon-bedrock
```

```sh title="Terminal" tab="Gemini"
npm install ai @assistant-ui/react-ai-sdk @ai-sdk/google
```

```sh title="Terminal" tab="GCP"
npm install ai @assistant-ui/react-ai-sdk @ai-sdk/google-vertex
```

```sh title="Terminal" tab="Groq"
npm install ai @assistant-ui/react-ai-sdk @ai-sdk/openai
```

```sh title="Terminal" tab="Fireworks"
npm install ai @assistant-ui/react-ai-sdk @ai-sdk/openai
```

```sh title="Terminal" tab="Cohere"
npm install ai @assistant-ui/react-ai-sdk @ai-sdk/cohere
```

```sh title="Terminal" tab="Ollama"
npm install ai @assistant-ui/react-ai-sdk ollama-ai-provider
```

```sh title="Terminal" tab="Chrome AI"
npm install ai @assistant-ui/react-ai-sdk chrome-ai
```

</Tabs>

Add an API endpoint:

<Tabs id="provider" items={["OpenAI", "Anthropic", "Azure", "AWS", "Gemini", "GCP", "Groq", "Fireworks", "Cohere", "Ollama", "Chrome AI"]}>
```ts title="/app/api/chat/route.ts" tab="OpenAI"
import { openai } from "@ai-sdk/openai";
import { streamText } from "ai";

export const maxDuration = 30;

export async function POST(req: Request) {
  const { messages } = await req.json();
  const result = streamText({
    model: openai("gpt-4o-mini"),
    messages,
  });
  return result.toDataStreamResponse();
}
```

```ts title="/app/api/chat/route.ts" tab="Anthropic"
import { anthropic } from "@ai-sdk/anthropic";
import { streamText } from "ai";

export const maxDuration = 30;

export async function POST(req: Request) {
  const { messages } = await req.json();
  const result = streamText({
    model: anthropic("claude-3-5-sonnet-20240620"),
    messages,
  });
  return result.toDataStreamResponse();
}
```

```ts title="/app/api/chat/route.ts" tab="Azure"
import { azure } from "@ai-sdk/azure";
import { streamText } from "ai";

export const maxDuration = 30;

export async function POST(req: Request) {
  const { messages } = await req.json();
  const result = streamText({
    model: azure("your-deployment-name"),
    messages,
  });
  return result.toDataStreamResponse();
}
```

```ts title="/app/api/chat/route.ts" tab="AWS"
import { bedrock } from "@ai-sdk/amazon-bedrock";
import { streamText } from "ai";

export const maxDuration = 30;

export async function POST(req: Request) {
  const { messages } = await req.json();
  const result = streamText({
    model: bedrock("anthropic.claude-3-5-sonnet-20240620-v1:0"),
    messages,
  });
  return result.toDataStreamResponse();
}
```

```ts title="/app/api/chat/route.ts" tab="Gemini"
import { google } from "@ai-sdk/google";
import { streamText } from "ai";

export const maxDuration = 30;

export async function POST(req: Request) {
  const { messages } = await req.json();
  const result = streamText({
    model: google("gemini-2.0-flash"),
    messages,
  });
  return result.toDataStreamResponse();
}
```

```ts title="/app/api/chat/route.ts" tab="GCP"
import { vertex } from "@ai-sdk/google-vertex";
import { streamText } from "ai";

export const maxDuration = 30;

export async function POST(req: Request) {
  const { messages } = await req.json();
  const result = streamText({
    model: vertex("gemini-1.5-pro"),
    messages,
  });
  return result.toDataStreamResponse();
}
```

```ts title="/app/api/chat/route.ts" tab="Groq"
import { createOpenAI } from "@ai-sdk/openai";
import { streamText } from "ai";

export const maxDuration = 30;

const groq = createOpenAI({
  apiKey: process.env.GROQ_API_KEY ?? "",
  baseURL: "https://api.groq.com/openai/v1",
});

export async function POST(req: Request) {
  const { messages } = await req.json();
  const result = streamText({
    model: groq("llama3-70b-8192"),
    messages,
  });
  return result.toDataStreamResponse();
}
```

```ts title="/app/api/chat/route.ts" tab="Fireworks"
import { createOpenAI } from "@ai-sdk/openai";
import { streamText } from "ai";

export const maxDuration = 30;

const fireworks = createOpenAI({
  apiKey: process.env.FIREWORKS_API_KEY ?? "",
  baseURL: "https://api.fireworks.ai/inference/v1",
});

export async function POST(req: Request) {
  const { messages } = await req.json();
  const result = streamText({
    model: fireworks("accounts/fireworks/models/firefunction-v2"),
    messages,
  });
  return result.toDataStreamResponse();
}
```

```ts title="/app/api/chat/route.ts" tab="Cohere"
import { cohere } from "@ai-sdk/cohere";
import { streamText } from "ai";

export const maxDuration = 30;

export async function POST(req: Request) {
  const { messages } = await req.json();
  const result = streamText({
    model: cohere("command-r-plus"),
    messages,
  });
  return result.toDataStreamResponse();
}
```

```ts title="/app/api/chat/route.ts" tab="Ollama"
import { ollama } from "ollama-ai-provider";
import { streamText } from "ai";

export const maxDuration = 30;

export async function POST(req: Request) {
  const { messages } = await req.json();
  const result = streamText({
    model: ollama("llama3"),
    messages,
  });
  return result.toDataStreamResponse();
}
```

```ts title="/app/api/chat/route.ts" tab="Chrome AI"
import { chromeai } from "chrome-ai";
import { streamText } from "ai";

export const maxDuration = 30;

export async function POST(req: Request) {
  const { messages } = await req.json();
  const result = streamText({
    model: chromeai(),
    messages,
  });
  return result.toDataStreamResponse();
}
```

</Tabs>

Define environment variables:

<Tabs id="provider" items={["OpenAI", "Anthropic", "Azure", "AWS", "Gemini", "GCP", "Groq", "Fireworks", "Cohere", "Ollama", "Chrome AI"]}>

```sh title="/.env.local" tab="OpenAI"
OPENAI_API_KEY="sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
```

```sh title="/.env.local" tab="Anthropic"
ANTHROPIC_API_KEY="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
```

```sh title="/.env.local" tab="Azure"
AZURE_RESOURCE_NAME="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
AZURE_API_KEY="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
```

```sh title="/.env.local" tab="AWS"
AWS_ACCESS_KEY_ID="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
AWS_SECRET_ACCESS_KEY="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
AWS_REGION="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
```

```sh title="/.env.local" tab="Gemini"
GOOGLE_GENERATIVE_AI_API_KEY="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
```

```sh title="/.env.local" tab="GCP"
GOOGLE_VERTEX_PROJECT="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
GOOGLE_VERTEX_LOCATION="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
GOOGLE_APPLICATION_CREDENTIALS="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
```

```sh title="/.env.local" tab="Groq"
GROQ_API_KEY="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
```

```sh title="/.env.local" tab="Fireworks"
FIREWORKS_API_KEY="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
```

```sh title="/.env.local" tab="Cohere"
COHERE_API_KEY="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
```

```sh tab="Ollama"
<none>
```

```sh tab="Chrome AI"
<none>
```

</Tabs>

If you aren't using Next.js, you can also deploy this endpoint to Cloudflare Workers, or any other serverless platform.

  </Step>

  <Step>

### Use it in your app

<Tabs items={["Thread", "AssistantModal"]}>

```tsx title="/app/page.tsx" tab="Thread"
import { AssistantRuntimeProvider } from "@assistant-ui/react";
import { useChatRuntime } from "@assistant-ui/react-ai-sdk";
import { ThreadList } from "@/components/assistant-ui/thread-list";
import { Thread } from "@/components/assistant-ui/thread";

const MyApp = () => {
  const runtime = useChatRuntime({
    api: "/api/chat",
  });

  return (
    <AssistantRuntimeProvider runtime={runtime}>
      <div className="grid h-dvh grid-cols-[200px_1fr] gap-x-2 px-4 py-4">
        <ThreadList />
        <Thread />
      </div>
    </AssistantRuntimeProvider>
  );
};
```

```tsx title="/app/page.tsx" tab="AssistantModal"
// run `npx shadcn@latest add "https://r.assistant-ui.com/assistant-modal"`

import { AssistantRuntimeProvider } from "@assistant-ui/react";
import { useChatRuntime } from "@assistant-ui/react-ai-sdk";
import { AssistantModal } from "@/components/assistant-ui/assistant-modal";

const MyApp = () => {
  const runtime = useChatRuntime({
    api: "/api/chat",
  });

  return (
    <AssistantRuntimeProvider runtime={runtime}>
      <AssistantModal />
    </AssistantRuntimeProvider>
  );
};
```

</Tabs>

</Step>
</Steps>

## What's Next?

<Cards>
  <Card
    title="Pick a Runtime"
    description="Choose the right runtime for your needs"
    href="/docs/runtimes/pick-a-runtime"
  />
  <Card
    title="Generative UI"
    description="Create rich UI components for tool executions"
    href="/docs/guides/ToolUI"
  />
  <Card
    title="Add Persistence"
    description="Save and restore chat conversations"
    href="/docs/cloud/overview"
  />
  <Card
    title="Examples"
    description="Explore full implementations and demos"
    href="https://github.com/assistant-ui/assistant-ui/tree/main/examples"
  />
</Cards>



================================================
FILE: apps/docs/content/docs/index.mdx
================================================
---
title: "Documentation"
---

import { redirect } from "next/navigation";

<>{redirect("/docs/getting-started")}</>



================================================
FILE: apps/docs/content/docs/mcp-docs-server.mdx
================================================
---
title: "MCP Docs Server"
description: "Learn how to use the assistant-ui MCP documentation server in your IDE to access documentation and examples directly."
---

import { Tabs, Tab } from "fumadocs-ui/components/tabs";

`@assistant-ui/mcp-docs-server` provides direct access to assistant-ui's documentation and examples in Cursor, Windsurf, VSCode, Zed, Claude Code, or any other IDE or tool that supports MCP.

The MCP server tools have been designed to allow an agent to query the specific information it needs to complete an assistant-ui related task - for example: implementing chat components, integrating with different runtimes, understanding component architecture, and troubleshooting issues.

## How it works

Once it's installed in your IDE you can write prompts and assume the agent will understand everything about assistant-ui.

### Add features

- "Add a chat interface with streaming support to my app"
- "Implement branching conversations with the BranchPicker component"
- "Add attachment support to my assistant using the Attachment primitive"

### Ask about integrations

- "How do I integrate assistant-ui with the Vercel AI SDK?
  Show me a working example for my Next.js app"
- "Does assistant-ui support React Server Components? How do I use it?"
- "Can I use assistant-ui with LangGraph? Show me how to set up the runtime"

### Debug or update existing code

- "My Thread component isn't updating when new messages arrive, what could be wrong?"
- "How do I customize the styling of the AssistantModal component?"
- "I need to add tool UI rendering to my assistant, show me how to implement it"

**And more** - if you have a question, try asking your IDE and let it look it up for you.

## Installation

Choose your IDE or tool to get started with the assistant-ui MCP docs server.

### Claude Code

Add the MCP server using the Claude Code CLI:

```bash
# Add to current project only
claude mcp add assistant-ui -- npx -y @assistant-ui/mcp-docs-server

# Or add globally for all projects
claude mcp add --scope user assistant-ui -- npx -y @assistant-ui/mcp-docs-server
```

To manage the server:
```bash
# View configured servers
claude mcp list

# Get server details
claude mcp get assistant-ui

# Remove the server
claude mcp remove assistant-ui
```

### Claude Desktop

Add to your Claude Desktop configuration:
- macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`
- Windows: `%APPDATA%\Claude\claude_desktop_config.json`

```json
{
  "mcpServers": {
    "assistant-ui": {
      "command": "npx",
      "args": ["-y", "@assistant-ui/mcp-docs-server"]
    }
  }
}
```

### IDEs

For Cursor, Windsurf, VSCode, and Zed, manually add the following configuration:

- **Cursor**: Edit `.cursor/mcp.json` in your project root, or `~/.cursor/mcp.json` for global configuration
- **Windsurf**: Edit `~/.codeium/windsurf/mcp_config.json` (only supports global configuration)
- **VSCode**: Edit `~/.vscode/mcp.json` in your project root
- **Zed**: Edit `settings.json` (open via `cmd+,` or `zed: open settings`)

### MacOS/Linux

{/*
LLM CONTEXT: This Tabs component shows MCP server configuration for different IDEs on MacOS/Linux.
Each tab displays the JSON configuration needed to set up the assistant-ui MCP docs server in that specific IDE.
The tabs help users find the correct configuration format for their IDE (Cursor, Windsurf, VSCode, or Zed).
Each tab shows the exact JSON structure and file paths needed for that IDE's MCP configuration.
*/}

<Tabs items={["cursor", "windsurf", "vscode", "zed"]}>
  <Tab>
```json
{
  "mcpServers": {
    "assistant-ui": {
      "command": "npx",
      "args": ["-y", "@assistant-ui/mcp-docs-server"]
    }
  }
}
```
  </Tab>
  <Tab>
```json
{
  "mcpServers": {
    "assistant-ui": {
      "command": "npx",
      "args": ["-y", "@assistant-ui/mcp-docs-server"]
    }
  }
}
```
  </Tab>
  <Tab>
```json
{
  "servers": {
    "assistant-ui": {
      "command": "npx",
      "args": ["-y", "@assistant-ui/mcp-docs-server"],
      "type": "stdio"
    }
  }
}
```
  </Tab>
  <Tab>
```json
{
  "context_servers": {
    "assistant-ui": {
      "command": {
        "path": "npx",
        "args": ["-y", "@assistant-ui/mcp-docs-server"],
        "env": {}
      },
      "settings": {}
    }
  }
}
```
  </Tab>
</Tabs>

### Windows

{/*
LLM CONTEXT: This Tabs component shows MCP server configuration for different IDEs on Windows.
Each tab displays the Windows-specific JSON configuration needed to set up the assistant-ui MCP docs server.
The tabs help Windows users find the correct configuration format for their IDE, using cmd instead of direct npx.
Each tab shows the Windows-specific command structure needed for that IDE's MCP configuration.
On latest Windsurf and Cursor the direct npx command works, while it's still unconfirmed if this has been fixed for VSCode.
*/}

<Tabs items={["cursor", "windsurf", "vscode", "zed"]}>
  <Tab>
```json
{
  "mcpServers": {
    "assistant-ui": {
      "command": "npx",
      "args": ["-y", "@assistant-ui/mcp-docs-server"]
    }
  }
}
```
  </Tab>
  <Tab>
```json
{
  "mcpServers": {
    "assistant-ui": {
      "command": "npx",
      "args": ["-y", "@assistant-ui/mcp-docs-server"]
    }
  }
}
```
  </Tab>
  <Tab>
```json
{
  "servers": {
    "assistant-ui": {
      "command": "cmd",
      "args": ["/c", "npx", "-y", "@assistant-ui/mcp-docs-server"],
      "type": "stdio"
    }
  }
}
```
  </Tab>
  <Tab>
```json
{
  "context_servers": {
    "assistant-ui": {
      "command": {
        "path": "cmd",
        "args": ["/c", "npx", "-y", "@assistant-ui/mcp-docs-server"],
        "env": {}
      },
      "settings": {}
    }
  }
}
```
  </Tab>
</Tabs>

## After Configuration

### Claude Code

The MCP server starts automatically once added. You can verify it's working by mentioning assistant-ui in your prompts - Claude will have direct access to the documentation and examples.

### Claude Desktop

1. Restart Claude Desktop after updating the configuration
2. The MCP server will start automatically when Claude Desktop launches
3. You can verify it's working by asking about assistant-ui - Claude will have direct access to the documentation and examples

### Cursor

1. Open Cursor settings by pressing `Cmd/Ctrl + ,`
2. Navigate to the MCP settings section
3. Find "assistant-ui" in the list of MCP servers and click "enable"
4. The server should start automatically. You'll see a status indicator showing it's running
5. If you have an agent chat open, you'll need to re-open it or start a new chat to use the MCP server

The MCP server will automatically start whenever you open Cursor. You can verify it's working by mentioning assistant-ui documentation or examples in your prompts - the agent should now have direct access to this information.

### Windsurf

1. Fully quit and re-open Windsurf
2. The MCP server should start automatically. You can verify this in the MCP settings panel
3. If tool calls start failing, go to Windsurf's MCP settings and re-start the MCP server. This is a common Windsurf MCP issue and isn't specific to this server. Currently, Cursor's MCP implementation tends to be more stable than Windsurf's

In both IDEs it may take a minute for the MCP server to start the first time as it needs to download the package from npm.

### VSCode

1. Open VSCode settings by pressing `Cmd/Ctrl + ,`
2. Search for "MCP" in the settings search bar
3. Enable the "Chat > MCP" option by checking the checkbox
4. Open GitHub Copilot Chat and switch to "Agent" mode (MCP only works in Agent mode)
5. Open the `mcp.json` file and click the "start" button that appears in the editor
6. Once started, you can click the tools button in the Copilot pane to see available tools

The tools button should show "assistantUIDocs" and "assistantUIExamples" as available tools when the server is running correctly.

### Zed

1. Open Zed settings by pressing `Cmd/Ctrl + ,` or using `zed: open settings`
2. The MCP server configuration should be in your `settings.json` under the `context_servers` key
3. The server will start automatically when you use the Assistant Panel
4. You can also add servers through the Agent Panel's Settings view (accessible via `agent: open configuration`)
5. In the Assistant Panel, you can verify the server is available by checking the tools dropdown

Zed will automatically start the MCP server when needed. The assistant-ui documentation and examples will be available to the AI assistant in your conversations.

### Claude Desktop

1. Restart Claude Desktop after updating the configuration
2. The MCP server will start automatically when Claude Desktop launches
3. You can verify it's working by asking about assistant-ui - Claude will have direct access to the documentation and examples

## Available Agent Tools

### assistantUIDocs

Access assistant-ui's complete documentation:

- Getting started guides and installation instructions
- Component API references (Thread, AssistantModal, Composer, etc.)
- Runtime documentation (AI SDK, LangGraph, OpenAI Assistants)
- Integration guides and best practices
- Architecture and concept explanations

### assistantUIExamples

Browse complete code examples:

- Integration with Vercel AI SDK
- React Server Components implementation
- LangGraph runtime setup
- OpenAI Assistants integration
- Local Ollama usage
- External store management
- React Hook Form integration
- Tool UI implementation patterns

Each example includes full source code, configuration files, and implementation details that can be directly referenced or adapted for your project.

## Common Issues

1. **Server Not Starting**

   - Ensure npx is installed and working
   - Check for conflicting MCP servers
   - Verify your configuration file syntax
   - On Windows, make sure to use the Windows-specific configuration

2. **Tool Calls Failing**
   - Restart the MCP server and/or your IDE
   - Update to the latest version of your IDE

{/*
Attribution:
  This docs page, and `@assistant-ui/mcp-docs-server`, is inspired by and based on Mastra's excellent mcp docs server and docs page: https://github.com/mastra/mcp-docs-server/blob/main/docs/mcp-docs-server.mdx
*/}



================================================
FILE: apps/docs/content/docs/meta.json
================================================
{
  "title": "mdx",
  "root": true,
  "pages": [
    "---Introduction---",
    "about-assistantui",
    "getting-started",
    "mcp-docs-server",
    "architecture",
    "---Guides---",
    "...guides",
    "---Copilots---",
    "...copilots",
    "---UI---",
    "...ui",
    "---Backends---",
    "...runtimes",
    "---Cloud---",
    "...cloud",
    "---Reference---",
    "api-reference",
    "concepts",
    "migrations",
    "legacy",
    "components",
    "reference",
    "react-compatibility"
  ]
}



================================================
FILE: apps/docs/content/docs/react-compatibility.mdx
================================================
---
title: Using old React versions
description: Guide for using assistant-ui with older React versions (18, 17, 16)
---

import { Callout } from "fumadocs-ui/components/callout";

<Callout type="warning" title="Older React Versions">
  Older React versions are not continuously tested. If you encounter any issues
  with integration, please contact us for help by joining our
  [Discord](https://discord.gg/S9dwgCNEFs).
</Callout>

This guide provides instructions for configuring assistant-ui to work with React 18 or older versions.

## React 18

If you're using React 18, you need to update the shadcn/ui components to work with `forwardRef`. Specifically, you need to modify the Button component.

### Updating the Button Component

Navigate to your button component file (typically `/components/ui/button.tsx`) and wrap the Button component with `forwardRef`:

```tsx
// Before
function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean;
  }) {
  const Comp = asChild ? Slot : "button";

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  );
}

// After
const Button = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> &
    VariantProps<typeof buttonVariants> & {
      asChild?: boolean;
    }
>(({ className, variant, size, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button";

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      ref={ref}
      {...props}
    />
  );
});
Button.displayName = "Button";
```

**Note:** If you're using a lower React version (17 or 16), you'll also need to follow the instructions for that version.

## React 17

For React 17 compatibility, in addition to the modifications outlined for React 18, you must also include a polyfill for the `useSyncExternalStore` hook (utilized by zustand).

### Patching Zustand with patch-package

Since the assistant-ui uses zustand internally, which depends on `useSyncExternalStore`, you'll need to patch the zustand package directly:

1. Install the required packages:

```bash
npm install use-sync-external-store patch-package
# or
yarn add use-sync-external-store patch-package
```

2. Add a postinstall script to your package.json:

```json
{
  "scripts": {
    "postinstall": "patch-package"
  }
}
```

3. You'll want to follow the instructions in [patch-package](https://github.com/ds300/patch-package), by first making changes to the files of a particular package in your node_modules folder, then running either `yarn patch-package package-name` or `npx patch-package package-name`. You'll need a patch for zustand - within `node_modules/zustand`, open `zustand/react.js` and make the following code changes:

```diff
diff --git a/node_modules/zustand/react.js b/node_modules/zustand/react.js
index 7599cfb..64530a8 100644
--- a/node_modules/zustand/react.js
+++ b/node_modules/zustand/react.js
@@ -1,6 +1,6 @@
 'use strict';

-var React = require('react');
+var React = require('use-sync-external-store/shim');
 var vanilla = require('zustand/vanilla');

 const identity = (arg) => arg;
@@ -10,7 +10,7 @@ function useStore(api, selector = identity) {
     () => selector(api.getState()),
     () => selector(api.getInitialState())
   );
-  React.useDebugValue(slice);
+  //React.useDebugValue(slice);
   return slice;
 }
 const createImpl = (createState) => {

This patch replaces the React import in zustand with the polyfill from `use-sync-external-store/shim` and comments out the `useDebugValue` call which isn't needed.

You should then run the patch-package command `yarn patch-package zustand` or `npx patch-package zustand` which should create a `patches` folder with a zustand patch file similar looking to this:

```diff
diff --git a/node_modules/zustand/react.js b/node_modules/zustand/react.js
index 7599cfb..64530a8 100644
--- a/node_modules/zustand/react.js
+++ b/node_modules/zustand/react.js
@@ -1,6 +1,6 @@
 'use strict';

-var React = require('react');
+var React = require('use-sync-external-store/shim');
 var vanilla = require('zustand/vanilla');

 const identity = (arg) => arg;
@@ -10,7 +10,7 @@ function useStore(api, selector = identity) {
     () => selector(api.getState()),
     () => selector(api.getInitialState())
   );
-  React.useDebugValue(slice);
+  //React.useDebugValue(slice);
   return slice;
 }
 const createImpl = (createState) => {
```

4. You may also need to apply the same patches within `node_modules/@assistant-ui/react/` and possibly a nested dependency patch for `node_modules/@assistant-ui/react/node_modules/zustand`. Look for instances of `React.useSyncExternalStore` and replace with `{ useSyncExternalStore } from "use-sync-external-store/shim";` and comment out any `useDebugValue` calls. Finally, you may need to patch `useId` from React, so within `node_modules/@assistant-ui/react/dist/runtimes/remote-thread-list/RemoteThreadListThreadListRuntimeCore.js`, change the following:

```diff
-import { Fragment, useEffect, useId } from "react";
+import { Fragment, useEffect, useRef } from "react";
 import { create } from "zustand";
 import { AssistantMessageStream } from "assistant-stream";
 import { RuntimeAdapterProvider } from "../adapters/RuntimeAdapterProvider.js";
 import { jsx } from "react/jsx-runtime";
+
+// PATCH-PACKAGE: Polyfill for useId if not available in React 16
+let useId;
+try {
+  // Try to use React's useId if available
+  useId = require("react").useId;
+} catch (e) {}
+if (!useId) {
+  // Fallback polyfill
+  let globalId = 0;
+  useId = function() {
+    const idRef = useRef();
+    if (!idRef.current) {
+      globalId++;
+      idRef.current = `uid-${globalId}`;
+    }
+    return idRef.current;
+  };
+}
```

5. Run the postinstall script to apply the patches:

```bash
npm run postinstall
# or
yarn postinstall
```

This patch replaces the React import in zustand with the polyfill from `use-sync-external-store/shim` and comments out the `useDebugValue` call which isn't needed.

**Note:** If you're using React 16, you'll also need to follow the instructions for that version.

## React 16

<Callout type="info" title="Incomplete Section">
  This section is incomplete and contributions are welcome. If you're using
  React 16 and have successfully integrated assistant-ui, please consider
  contributing to this documentation.
</Callout>

For React 16 compatibility, you need to apply all the steps for **React 18** and **React 17** above.

## Additional Resources

If you encounter any issues with React compatibility, please:

1. Check that all required dependencies are installed
2. Ensure your component modifications are correctly implemented
3. Join our [Discord](https://discord.gg/S9dwgCNEFs) community for direct support



================================================
FILE: apps/docs/content/docs/api-reference/context.tsx
================================================
"use client";

import type React from "react";
import { ChevronRight, Layers } from "lucide-react";
import {
  Tooltip,
  TooltipContent,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { Fragment } from "react";

interface ComponentProps {
  name: string;
  isContextProvider?: boolean;
  providedContexts?: { name: string; color: string; link?: string }[];
  isLink?: boolean;
  docsLink?: string;
  tooltip?: string;
  children?: React.ReactNode;
  props?: string;
}

export const Component: React.FC<ComponentProps> = ({
  name,
  isContextProvider,
  providedContexts,
  isLink,
  docsLink,
  tooltip,
  children,
  props,
}) => (
  <div className="mb-4">
    <div className="flex items-center">
      <ChevronRight className="mr-2 h-5 w-5" />
      {isLink ? (
        <a
          href={`#${name.toLowerCase().replace(/\s/g, "-")}`}
          className="font-semibold hover:underline"
        >
          {name}
        </a>
      ) : (
        <Tooltip>
          <TooltipTrigger asChild>
            <a href={docsLink}>
              <code>
                &lt;
                {name
                  ? name
                      .split(".")
                      .map((part, index) =>
                        index === name.split(".").length - 1 ? (
                          <strong key={index}>{part}</strong>
                        ) : (
                          <span key={index}>{part}.</span>
                        ),
                      )
                  : name}
                {`${props ? ` ${props}` : ""} />`}
              </code>
            </a>
          </TooltipTrigger>
          <TooltipContent>{tooltip}</TooltipContent>
        </Tooltip>
      )}
      {isContextProvider && (
        <div className="ml-3 flex items-center">
          <Layers className="mr-2 h-5 w-5 text-purple-500 dark:text-purple-400" />
          <span className="text-sm font-semibold text-purple-500 dark:text-purple-400">
            Context Provider
          </span>
        </div>
      )}
    </div>
    {providedContexts && (
      <div className="ml-7 mt-1">
        Provides:{" "}
        {providedContexts.map((context, index) => (
          <Fragment key={context.name}>
            <a
              href={
                context.link ||
                `#${context.name.toLowerCase().replace(/\s/g, "-")}`
              }
              style={{
                color: context.color,
                textDecorationColor: context.color,
              }}
            >
              {context.name}
            </a>
            {index < providedContexts.length - 1 ? ", " : ""}
          </Fragment>
        ))}
      </div>
    )}
    {children && <div className="ml-7 mt-4">{children}</div>}
  </div>
);

interface RuntimeHooksProps {
  hooks: { name: string; docsLink: string }[];
}

export const RuntimeHooks: React.FC<RuntimeHooksProps> = ({ hooks }) => (
  <div className="mb-6 mt-8">
    <ul className="list-inside list-disc space-y-3">
      {hooks.map((hook, index) => (
        <li key={index} className="text-base">
          <a
            href={hook.docsLink}
            target="_blank"
            rel="noopener noreferrer"
            className="hover:underline"
          >
            {hook.name}
          </a>
        </li>
      ))}
    </ul>
  </div>
);

interface ContextLevelProps {
  color: string;
  children: React.ReactNode;
}

export const ContextLevel: React.FC<ContextLevelProps> = ({
  color,
  children,
}) => (
  <div className={`mb-12 border-l-4 pl-6`} style={{ borderColor: color }}>
    {children}
  </div>
);



================================================
FILE: apps/docs/content/docs/api-reference/meta.json
================================================
{
  "title": "API Reference",
  "pages": ["overview", "context-providers", "primitives", "runtimes", "..."]
}



================================================
FILE: apps/docs/content/docs/api-reference/overview.mdx
================================================
---
title: Overview
---

import { Callout } from "fumadocs-ui/components/callout";

import { Component, ContextLevel, RuntimeHooks } from "./context";

export const contextColors = {
  "Assistant Context": "#4a86e8",
  "Thread Context": "#45a049",
  "Composer Context": "#ff9933",
  "Message Context": "#bb2244",
  "MessagePart Context": "#268bd2",
  "Attachment Context": "#FFB6C1",
  "ThreadListItem Context": "#c678dd",
};

<Callout title="Work in progress" type="warn">
  This page is under construction. Most links will not work yet.
</Callout>

## Cloud

- [`AssistantCloud`](#assistant-cloud)

## Runtime API

### AI SDK

- [`useChatRuntime`](#use-chat-runtime)
- [`useVercelUseChatRuntime`](#use-vercel-use-chat-runtime) (legacy)
- [`useVercelUseAssistantRuntime`](#use-vercel-use-assistant-runtime)
- [`useVercelRSCRuntime`](#use-vercel-rsc-runtime)
- [`useDangerousInBrowserRuntime`](#use-dangerous-in-browser-runtime)

### LangGraph

- [`useLangGraphRuntime`](#use-lang-graph-runtime)

### Local Runtime

- [`useLocalRuntime`](#use-local-runtime)

### External Store Runtime

- [`useExternalStoreRuntime`](#use-external-store-runtime)
- [`createMessageConverter`](#create-message-converter)

### Thread List Runtime

- [`useRemoteThreadListRuntime`](#use-remote-thread-list-runtime)
- [`useCloudThreadListRuntime`](#use-cloud-thread-list-runtime)

## Runtime Adapters

### Attachment

- [`AttachmentAdapter`](#attachment-adapter)
- [`SimpleImageAttachmentAdapter`](#simple-image-attachment-adapter)
- [`SimpleTextAttachmentAdapter`](#simple-text-attachment-adapter)
- [`CompositeAttachmentAdapter`](#composite-attachment-adapter)

### Feedback

- [`FeedbackAdapter`](#feedback-adapter)

### Speech

- [`SpeechSynthesisAdapter`](#speech-synthesis-adapter)
- [`WebSpeechSynthesisAdapter`](#web-speech-synthesis-adapter)

## Highest Level Context Providers

<Component
  name="AssistantRuntimeProvider"
  isContextProvider={true}
  providedContexts={[
    { name: "Assistant Context", color: contextColors["Assistant Context"] },
    { name: "Thread Context", color: contextColors["Thread Context"] },
    {
      name: "Thread Composer Context",
      color: contextColors["Composer Context"],
      link: "#composer-context",
    },
  ]}
  docsLink="./context-providers/AssistantRuntimeProvider"
  tooltip="Provides the highest level context for the assistant-ui"
  props="runtime={runtime}"
>
  <Component name="Thread" isLink={true} />
  <Component name="ThreadList" isLink={true} />
</Component>

<Component
  name="TextMessagePartProvider"
  isContextProvider={true}
  providedContexts={[
    {
      name: "Text MessagePart Context",
      color: contextColors["MessagePart Context"],
      link: "#MessagePart-context",
    },
  ]}
  docsLink="./context-providers/TextMessagePartProvider"
  tooltip="Provides context for text message parts"
  props="text={text}"
>
  <Component name="MessagePart" isLink={true} />
</Component>

<ContextLevel color={contextColors["Assistant Context"]}>

## Assistant Context

The context available to components inside `<AssistantRuntimeProvider />`. You usually wrap your entire application in this context.

### AssistantRuntime

Programmatically access the assistant's state and actions.

- [`useAssistantRuntime`](#use-assistant-runtime)

### Instructions

Add system prompt instructions

- [`useAssistantInstructions`](#use-assistant-instructions)

### Tool UI

Register tool UIs

- [`makeAssistantTool`](#make-assistant-tool)
- [`makeAssistantToolUI`](#make-assistant-tool-ui)
- [`useAssistantTool`](#use-assistant-tool)
- [`useAssistantToolUI`](#use-assistant-tool-ui)

Programmatically access the list of registered tool UIs (Experimental)

- [`useToolUIs`](#use-tool-uis)
- [`useToolUIsStore`](#use-tool-uis-store)

### ThreadListPrimitive

Shows a list of threads and allows the user to switch between them.

<Component
  name="ThreadListPrimitive.Root"
  docsLink="#thread-list-primitive-root"
  tooltip="Root component for the thread list"
>
  <Component
    name="ThreadListPrimitive.New"
    docsLink="#thread-list-primitive-new"
    tooltip="Component for creating a new thread"
  />
  <Component
    name="ThreadListPrimitive.Items"
    isContextProvider={true}
    providedContexts={[
      {
        name: "ThreadListItem Context",
        color: contextColors["ThreadListItem Context"],
      },
    ]}
    docsLink="#thread-list-primitive-items"
    tooltip="Container for thread list items, provides context for individual items"
    props="components={...}"
  />
</Component>

</ContextLevel>

<ContextLevel color={contextColors["Thread Context"]}>

## Thread Context

The context for a single thread. Currently always corresponds to the runtime's main thread.

### ThreadRuntime

Programmatically access the thread's state and actions.

- [`useThread`](#use-thread)
- [`useThreadComposer`](#use-thread-composer)
- [`useThreadRuntime`](#use-thread-runtime)

### ModelContext

- [`useThreadModelContext`](#use-thread-model-context)

### ThreadViewportStore

- [`useThreadViewport`](#use-thread-viewport)
- [`useThreadViewportStore`](#use-thread-viewport-store)

### ThreadPrimitive

A conversation thread.

<Component
  name="ThreadPrimitive.Root"
  docsLink="#thread-primitive-root"
  tooltip="Root component for a thread"
>
  <Component
    name="ThreadPrimitive.Viewport"
    docsLink="#thread-primitive-viewport"
    tooltip="Viewport for the thread content"
  >
    <Component
      name="ThreadPrimitive.Messages"
      isContextProvider={true}
      providedContexts={[
        { name: "Message Context", color: contextColors["Message Context"] },
        {
          name: "Edit Composer Context",
          color: contextColors["Composer Context"],
          link: "#composer-context",
        },
      ]}
      docsLink="#thread-primitive-messages"
      tooltip="Container for thread messages, provides context for messages and edit composer"
    >
      <Component name="Message" isLink={true} />
    </Component>
    <Component
      name="ThreadPrimitive.ScrollToBottom"
      docsLink="#thread-primitive-scroll-to-bottom"
      tooltip="Scrolls to the bottom of the thread"
    />
    <Component
      name="ThreadPrimitive.Empty"
      docsLink="#thread-primitive-empty"
      tooltip="Displayed when the thread is empty"
    />
    <Component
      name="ThreadPrimitive.If"
      docsLink="#thread-primitive-if"
      tooltip="Conditional rendering within the thread"
    />
    <Component
      name="ThreadPrimitive.Suggestion"
      docsLink="#thread-primitive-suggestion"
      tooltip="Displays suggestions in the thread"
    />
    <Component name="Composer" isLink={true} />
  </Component>
</Component>

### AssistantModalPrimitive

A floating modal that usually appears in the lower right corner of the screen. Common for support use cases.

<Component
  name="AssistantModalPrimitive.Root"
  docsLink="#assistant-modal-primitive-root"
  tooltip="Root component for the assistant modal"
>
  <Component
    name="AssistantModalPrimitive.Trigger"
    docsLink="#assistant-modal-primitive-trigger"
    tooltip="Trigger to open the assistant modal"
  />
  <Component
    name="AssistantModalPrimitive.Anchor"
    docsLink="#assistant-modal-primitive-anchor"
    tooltip="Anchor point for the assistant modal"
  />
  <Component
    name="AssistantModalPrimitive.Content"
    docsLink="#assistant-modal-primitive-content"
    tooltip="Content of the assistant modal"
  />
</Component>

</ContextLevel>

<ContextLevel color={contextColors["Composer Context"]}>

## Composer Context

Manages the state and actions for the message composer

### ComposerRuntime

- [`useComposer`](#use-composer)
- [`useComposerRuntime`](#use-composer-runtime)

### ComposerPrimitive

<Component
  name="ComposerPrimitive.Root"
  docsLink="#composer-primitive-root"
  tooltip="Root component for the composer"
>
  <Component
    name="ComposerPrimitive.Input"
    docsLink="#composer-primitive-input"
    tooltip="Input field for composing messages"
  />
  <Component
    name="ComposerPrimitive.Send"
    docsLink="#composer-primitive-send"
    tooltip="Button to send the composed message"
  />
  <Component
    name="ComposerPrimitive.Cancel"
    docsLink="#composer-primitive-cancel"
    tooltip="Button to cancel composing"
  />
  <Component
    name="ComposerPrimitive.Attachments"
    isContextProvider={true}
    providedContexts={[
      {
        name: "Attachment Context",
        color: contextColors["Attachment Context"],
      },
    ]}
    docsLink="#composer-primitive-attachments"
    tooltip="Manages attachments in the composer"
  />
  <Component
    name="ComposerPrimitive.AddAttachment"
    docsLink="#composer-primitive-add-attachment"
    tooltip="Button to add an attachment"
  />
</Component>

</ContextLevel>

<ContextLevel color={contextColors["Message Context"]}>

## Message Context

Manages the state and actions for individual messages

### MessageRuntime

- [`useMessage`](#use-message)
- [`useEditComposer`](#use-edit-composer)
- [`useMessageRuntime`](#use-message-runtime)

### MessageUtilsStore

- [`useMessageUtils`](#use-message-utils)
- [`useMessageUtilsStore`](#use-message-utils-store)

### MessagePrimitive

<Component
  name="MessagePrimitive.Root"
  docsLink="#message-primitive-root"
  tooltip="Root component for a message"
>
  <Component
    name="MessagePrimitive.Parts"
    isContextProvider={true}
    providedContexts={[
      {
        name: "MessagePart Context",
        color: contextColors["MessagePart Context"],
      },
    ]}
    docsLink="#message-primitive-parts"
    tooltip="Displays the parts of the message"
  />
  <Component
    name="MessagePrimitive.Attachments"
    isContextProvider={true}
    providedContexts={[
      {
        name: "Attachment Context",
        color: contextColors["Attachment Context"],
      },
    ]}
    docsLink="#message-primitive-attachments"
    tooltip="Displays attachments in the message"
  />
  <Component
    name="MessagePrimitive.If"
    docsLink="#message-primitive-if"
    tooltip="Conditional rendering within the message"
  />
</Component>

### ActionBarPrimitive

<Component
  name="ActionBarPrimitive.Root"
  docsLink="#action-bar-primitive-root"
  tooltip="Root component for the action bar"
>
  <Component
    name="ActionBarPrimitive.Copy"
    docsLink="#action-bar-primitive-copy"
    tooltip="Copies the message content"
  />
  <Component
    name="ActionBarPrimitive.Edit"
    docsLink="#action-bar-primitive-edit"
    tooltip="Edits the message"
  />
  <Component
    name="ActionBarPrimitive.Reload"
    docsLink="#action-bar-primitive-reload"
    tooltip="Reloads the message"
  />
  <Component
    name="ActionBarPrimitive.Speak"
    docsLink="#action-bar-primitive-speak"
    tooltip="Speaks the message content"
  />
  <Component
    name="ActionBarPrimitive.StopSpeaking"
    docsLink="#action-bar-primitive-stop-speaking"
    tooltip="Stops speaking the message"
  />
  <Component
    name="ActionBarPrimitive.FeedbackPositive"
    docsLink="#action-bar-primitive-feedback-positive"
    tooltip="Provides positive feedback"
  />
  <Component
    name="ActionBarPrimitive.FeedbackNegative"
    docsLink="#action-bar-primitive-feedback-negative"
    tooltip="Provides negative feedback"
  />
</Component>

### BranchPickerPrimitive

<Component
  name="BranchPickerPrimitive.Root"
  docsLink="#branch-picker-primitive-root"
  tooltip="Root component for the branch picker"
>
  <Component
    name="BranchPickerPrimitive.Previous"
    docsLink="#branch-picker-primitive-previous"
    tooltip="Navigates to the previous branch"
  />
  <Component
    name="BranchPickerPrimitive.Number"
    docsLink="#branch-picker-primitive-number"
    tooltip="Displays the current branch number"
  />
  <Component
    name="BranchPickerPrimitive.Next"
    docsLink="#branch-picker-primitive-next"
    tooltip="Navigates to the next branch"
  />
</Component>

</ContextLevel>

<ContextLevel color={contextColors["MessagePart Context"]}>

## MessagePart Context

Manages the state and actions for message parts within messages

### MessagePartRuntime

- [`useMessagePart`](#use-content-part)
- [`useMessagePartText`](#use-content-part-text)
- [`useMessagePartReasoning`](#use-content-part-reasoning)
- [`useMessagePartRuntime`](#use-content-part-runtime)

### MessagePartPrimitive

<Component
  name="MessagePartPrimitive.Text"
  docsLink="#content-part-text"
  tooltip="Represents a text part of the message content"
/>

### MarkdownText

<Component
  name="MarkdownText"
  docsLink="#markdown-text"
  tooltip="Renders markdown text in the message"
/>

</ContextLevel>

<ContextLevel color={contextColors["Attachment Context"]}>

## Attachment Context

Manages the state and actions for attachments in messages and composer

### AttachmentRuntime

- [`useAttachment`](#use-attachment)
- [`useAttachmentRuntime`](#use-attachment-runtime)

### AttachmentPrimitive

<Component
  name="AttachmentPrimitive.Root"
  docsLink="#attachment-primitive-root"
  tooltip="Root component for an attachment"
>
  <Component
    name="AttachmentPrimitive.Name"
    docsLink="#attachment-primitive-name"
    tooltip="Displays the name of the attachment"
  />
  <Component
    name="AttachmentPrimitive.Delete"
    docsLink="#attachment-primitive-delete"
    tooltip="Deletes the attachment"
  />
  <Component
    name="AttachmentPrimitive.Thumb"
    docsLink="#attachment-primitive-thumb"
    tooltip="Displays a thumbnail of the attachment"
  />
</Component>

</ContextLevel>

<ContextLevel color={contextColors["ThreadListItem Context"]}>

## ThreadListItem Context

Manages the state and actions for individual thread list items

### ThreadListItemRuntime

- [`useThreadListItem`](#use-thread-list-item)
- [`useThreadListItemRuntime`](#use-thread-list-item-runtime)

### ThreadListItem

<Component
  name="ThreadListItemPrimitive.Root"
  docsLink="#thread-list-item-primitive-root"
  tooltip="Root component for a thread list item"
>
  <Component
    name="ThreadListItemPrimitive.Trigger"
    docsLink="#thread-list-item-primitive-trigger"
    tooltip="Trigger for thread list item actions"
  >
    <Component
      name="ThreadListItemPrimitive.Name"
      docsLink="#thread-list-item-primitive-name"
      tooltip="Displays the name of the thread"
    />
  </Component>
  <Component
    name="ThreadListItemPrimitive.Archive"
    docsLink="#thread-list-item-primitive-archive"
    tooltip="Archives the thread"
  />
  <Component
    name="ThreadListItemPrimitive.Unarchive"
    docsLink="#thread-list-item-primitive-unarchive"
    tooltip="Unarchives the thread"
  />
  <Component
    name="ThreadListItemPrimitive.Delete"
    docsLink="#thread-list-item-primitive-delete"
    tooltip="Deletes the thread"
  />
  <Component
    name="ThreadListItemPrimitive.Rename"
    docsLink="#thread-list-item-primitive-rename"
    tooltip="Renames the thread"
  />
</Component>

</ContextLevel>

## Utilities

- [`useThreadViewportAutoscroll`](#use-thread-viewport-autoscroll)
- [`useInlineRender`](#use-inline-render)



================================================
FILE: apps/docs/content/docs/api-reference/context-providers/AssistantRuntimeProvider.mdx
================================================
---
title: <AssistantRuntimeProvider />
---

import { ParametersTable } from "@/components/docs";
import { AssistantRuntimeProvider } from "@/generated/typeDocs";

The `AssistantRuntimeProvider` provides data and APIs used by assistant-ui components.

Almost all components in assistant-ui require an `AssistantRuntimeProvider` around them to function properly.

You must either wrap your app in an `AssistantRuntimeProvider` or pass a `runtime` to the `<Thread />` component instead.

```tsx {1, 8, 10}
import { AssistantRuntimeProvider } from "@assistant-ui/react";

const MyApp = () => {
  const runtime = useChatRuntime({ api: "/api/chat" });

  return (
    <AssistantRuntimeProvider runtime={runtime}>
      {/* your app */}
    </AssistantRuntimeProvider>
  );
};
```

#### Properties

<ParametersTable {...AssistantRuntimeProvider} />



================================================
FILE: apps/docs/content/docs/api-reference/context-providers/TextMessagePartProvider.mdx
================================================
---
title: <TextMessagePartProvider />
---

import { ParametersTable } from "@/components/docs";
import { AssistantRuntimeProvider } from "@/generated/typeDocs";

The `TextMessagePartProvider` provides data and APIs for `TextMessagePart` components.

This is useful if you want to reuse the same `Text` component outside of a message text, e.g. with the `@assistant-ui/react-markdown` package.

```tsx {1, 8, 10}
import { AssistantRuntimeProvider } from "@assistant-ui/react";

const MyApp = () => {
  return (
    <TextMessagePartProvider text={"Hello!"}>
      <MyMarkdownText />
    </AssistantRuntimeProvider>
  );
};
```

#### Properties

<ParametersTable {...AssistantRuntimeProvider} />



================================================
FILE: apps/docs/content/docs/api-reference/integrations/meta.json
================================================
{
  "pages": ["vercel-ai-sdk", "react-hook-form"]
}



================================================
FILE: apps/docs/content/docs/api-reference/integrations/react-hook-form.mdx
================================================
---
title: "@assistant-ui/react-hook-form"
---

A React Hook Form integration for @assistant-ui.

import { ParametersTable } from "@/components/docs";

## API Reference

### `useAssistantForm`

Drop-in replacement hook for `useForm` that adds support for `@assistant-ui/react`.

```diff
- import { useForm } from "react-hook-form";
+ import { useAssistantForm } from "@assistant-ui/react-hook-form";

- useForm({
+ useAssistantForm({
    ...
  });
```

#### Properties

<ParametersTable
  type="UseAssistantFormProps"
  parameters={[
    {
      name: "assistant",
      type: "object",
      optional: true,
      description: "Configuration for useAssistantForm",
      children: [
        {
          parameters: [
            {
              name: "tools",
              type: "object",
              description: "Tools configuration for useAssistantForm",
              children: [
                {
                  parameters: [
                    {
                      name: "set_form_field",
                      type: "object",
                      description: "Configuration for the set_form_field tool",
                      children: [
                        {
                          parameters: [
                            {
                              name: "render",
                              type: "ToolCallMessagePartComponent<{ name: string; value: string; }, {}>",
                              description:
                                "The component to render when set_form_field is called.",
                            },
                          ],
                        },
                      ],
                    },
                    {
                      name: "submit_form",
                      type: "object",
                      description: "Configuration for the submit_form tool",
                      children: [
                        {
                          parameters: [
                            {
                              name: "render",
                              type: "ToolCallMessagePartComponent<{}, {}>",
                              description:
                                "The component to render when submit_form is called.",
                            },
                          ],
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
        },
      ],
    },
  ]}
/>

### `formTools`

The set of tools to use with `useAssistantForm`, useful for runtimes that do not support client-side tool definitions (i.e. Vercel AI SDK).

```tsx {1, 5-7}
import { formTools } from "@assistant-ui/react-hook-form";

const result = streamText({
  ...
  tools: {
    ...formTools,
  }
});
```



================================================
FILE: apps/docs/content/docs/api-reference/integrations/vercel-ai-sdk.mdx
================================================
---
title: "@assistant-ui/react-ai-sdk"
---

Vercel AI SDK integration for assistant-ui.

import { ParametersTable } from "@/components/docs";

## API Reference

### `useVercelUseChatRuntime`

Convert Vercel AI SDK chat helpers into a `AssistantRuntime`.

```tsx
import { useVercelUseChatRuntime } from "@assistant-ui/react-ai-sdk";

const MyRuntimeProvider = ({ children }: { children: React.ReactNode }) => {
  const chat = useChat();
  const runtime = useVercelUseChatRuntime(chat);

  return (
    <AssistantRuntimeProvider runtime={runtime}>
      {children}
    </AssistantRuntimeProvider>
  );
};
```

<ParametersTable
  parameters={[
    {
      name: "chat",
      type: "ReturnType<typeof useChat>",
      description: "The UseChatHelpers from @ai-sdk/react.",
    },
  ]}
/>

### `useVercelUseAssistantRuntime`

Convert Vercel AI SDK assistant helpers into a `AssistantRuntime`.

```tsx
import { useVercelUseAssistantRuntime } from "@assistant-ui/react-ai-sdk";

const MyRuntimeProvider = ({ children }: { children: React.ReactNode }) => {
  const assistant = useAssistant();
  const runtime = useVercelUseAssistantRuntime(assistant);

  return (
    <AssistantRuntimeProvider runtime={runtime}>
      {children}
    </AssistantRuntimeProvider>
  );
};
```

<ParametersTable
  parameters={[
    {
      name: "assistant",
      type: "ReturnType<typeof useAssistant>",
      description: "The UseAssistantHelpers from @ai-sdk/react.",
    },
  ]}
/>

### `useVercelRSCRuntime`

Convert Vercel RSC runtime into a `AssistantRuntime`.

```tsx
import { useVercelRSCRuntime } from "@assistant-ui/react-ai-sdk";

const MyRuntimeProvider = ({ children }: { children: React.ReactNode }) => {
  const [messages, setMessages] = useUIState<typeof AI>();

  const onNew = async (m: AppendMessage) => {
    if (m.content[0]?.type !== "text")
      throw new Error("Only text messages are supported");

    const input = m.content[0].text;
    setMessages((currentConversation) => [
      ...currentConversation,
      { id: nanoid(), role: "user", display: input },
    ]);

    const message = await continueConversation(input);

    setMessages((currentConversation) => [...currentConversation, message]);
  };

  const runtime = useVercelRSCRuntime({ messages, onNew });

  return (
    <AssistantRuntimeProvider runtime={runtime}>
      {children}
    </AssistantRuntimeProvider>
  );
};
```

<ParametersTable
  parameters={[
    {
      name: "adapter",
      type: "VercelRSCAdapter<TMessage>",
      description: "The Vercel RSC adapter to use.",
      children: [
        {
          type: "VercelRSCAdapter<TMessage>",
          parameters: [
            {
              name: "messages",
              type: "readonly ThreadMessage[]",
              description: "The messages in the thread.",
            },
            {
              name: "onNew",
              type: "(message: AppendMessage) => Promise<void>",
              description: "A function to append a message to the thread.",
            },
            {
              name: "onEdit",
              type: "(message: AppendMessage) => Promise<void>",
              description: "A function to edit a message.",
            },
            {
              name: "onReload",
              type: "(parentId: string | null) => Promise<void>",
              description: "A function to reload a message.",
            },
            {
              name: "convertMessage",
              type: "(message: TMessage) => VercelRSCMessage",
              description:
                "A function to convert messages to the VercelRSCMessage format. Only required if your message objects are not already compatible with Vercel RSC.",
            },
          ],
        },
      ],
    },
  ]}
/>



================================================
FILE: apps/docs/content/docs/api-reference/primitives/ActionBar.mdx
================================================
---
title: ActionBarPrimitive
---

Buttons to interact with the message.

import { ParametersTable, DataAttributesTable } from "@/components/docs";
import { Code } from "@radix-ui/themes";

## Anatomy

```tsx
import { ActionBarPrimitive } from "@assistant-ui/react";

const UserMessageBar = () => (
  <ActionBarPrimitive.Root>
    <ActionBarPrimitive.Edit />
    <ActionBarPrimitive.Copy />
  </ActionBarPrimitive.Root>
);

const AssistantMessageBar = () => (
  <ActionBarPrimitive.Root>
    <ActionBarPrimitive.Reload />
    <ActionBarPrimitive.Copy />
  </ActionBarPrimitive.Root>
);
```

## API Reference

### Container

Containts all parts of the action bar.

This primitive renders a `<div>` element unless `asChild` is set.

<ParametersTable
  type="ActionBarPrimitiveRootProps"
  parameters={[
    {
      name: "asChild",
    },
    {
      name: "hideWhenRunning",
      type: "boolean",
      default: "false",
      description: (
        <span>
          Do not render the ActionBar when the thread is in running state.
        </span>
      ),
    },
    {
      name: "autohide",
      type: '"always" | "not-last" | "never"',
      default: '"never"',
      description: (
        <span>
          Do not render the ActionBar unless the mouse is hovering over the
          message.
          <br />
          <br />
          <Code>"always"</Code>: always autohide.
          <br />
          <Code>"not-last"</Code>; only autohide if the message is not the last
          one in the thread.
        </span>
      ),
    },
    {
      name: "autohideFloat",
      type: '"always" | "single-branch" | "never"',
      default: '"never"',
      description: (
        <span>
          Float the ActionBar during autohide.
          <br />
          <br />
          <Code>"always"</Code>: always float during autohide.
          <br />
          <Code>"single-branch"</Code>: only float if the message is the only
          one in the thread.
          <br />
          <br />
          Note: this only sets `data-floating` on the ActionBar. You need to set
          the appropriate styles on the ActionBar to make it float.
        </span>
      ),
    },
  ]}
/>

<DataAttributesTable
  data={[
    {
      attribute: "[data-floating]",
      values: "Present when floating",
    },
  ]}
/>

### Edit

Enables edit mode on user message.

This primitive renders a `<button>` element unless `asChild` is set.

<ParametersTable
  type="ActionBarPrimitiveEditProps"
  parameters={[
    {
      name: "asChild",
    },
  ]}
/>

### Reload

Regenerates the assistant message.

This primitive renders a `<button>` element unless `asChild` is set.

<ParametersTable
  type="ActionBarPrimitiveReloadProps"
  parameters={[
    {
      name: "asChild",
    },
  ]}
/>{" "}

### Copy

Copies the message to the clipboard.

This primitive renders a `<button>` element unless `asChild` is set.

<ParametersTable
  type="ActionBarPrimitiveCopyProps"
  parameters={[
    {
      name: "asChild",
    },
    {
      name: "copiedDuration",
      type: "number",
      description:
        "The duration in milliseconds to change the message status to 'copied'.",
      default: "3000",
    },
  ]}
/>

<DataAttributesTable
  data={[
    {
      attribute: "[data-copied]",
      values: "Present when the message was recently copied.",
    },
  ]}
/>

#### Copied state

Show a different icon for a few seconds after the message is copied.

```tsx
<ActionBarPrimitive.Copy>
  <MessagePrimitive.If copied={false}>
    <CopyIcon />
  </MessagePrimitive.If>
  <MessagePrimitive.If copied>
    <CopySuccessIcon />
  </MessagePrimitive.If>
</ActionBarPrimitive.Copy>
```

or using the `data-copied` attribute:

```tsx
<ActionBarPrimitive.Copy className="group">
  <CopyIcon className="group-data-[copied]:hidden" />
  <CheckIcon className="hidden group-data-[copied]:block" />
</ActionBarPrimitive.Copy>
```

### Speak

Plays the message text as speech.

This primitive renders a `<button>` element unless `asChild` is set.

<ParametersTable
  type="ActionBarPrimitiveSpeakProps"
  parameters={[
    {
      name: "asChild",
    },
  ]}
/>

### StopSpeaking

Stops the message text from being played as speech.

This primitive renders a `<button>` element unless `asChild` is set.

<ParametersTable
  type="ActionBarPrimitiveStopSpeakingProps"
  parameters={[
    {
      name: "asChild",
    },
  ]}
/>

### Feedback Positive

Shows a positive feedback submission button.

This primitive renders a `<button>` element unless `asChild` is set.

<ParametersTable
  type="ActionBarPrimitiveFeedbackPositiveProps"
  parameters={[
    {
      name: "asChild",
    },
  ]}
/>

<DataAttributesTable
  data={[
    {
      attribute: "[data-submitted]",
      values: "Present when positive feedback was submitted.",
    },
  ]}
/>

### Feedback Negative

Shows a negative feedback submission button.

This primitive renders a `<button>` element unless `asChild` is set.

<ParametersTable
  type="ActionBarPrimitiveFeedbackNegativeProps"
  parameters={[
    {
      name: "asChild",
    },
  ]}
/>

<DataAttributesTable
  data={[
    {
      attribute: "[data-submitted]",
      values: "Present when negative feedback was submitted.",
    },
  ]}
/>



================================================
FILE: apps/docs/content/docs/api-reference/primitives/AssistantModal.mdx
================================================
---
title: AssistantModalPrimitive
---

A modal chat UI usually displayed in the bottom right corner of the screen.

import { Code } from "@radix-ui/themes";
import { ParametersTable, DataAttributesTable } from "@/components/docs";

## Anatomy

```tsx
import { AssistantModalPrimitive } from "@assistant-ui/react";

const Thread = () => (
  <AssistantModalPrimitive.Root>
    <AssistantModalPrimitive.Trigger>
      <FloatingAssistantButton />
    </AssistantModalPrimitive.Trigger>
    <AssistantModalPrimitive.Content>
      <Thread />
    </AssistantModalPrimitive.Content>
  </AssistantModalPrimitive.Root>
);
```

## API Reference

### Root

Contains all parts of the assistant modal.

<ParametersTable
  type="AssistantModalPrimitiveRootProps"
  parameters={[
    {
      name: "defaultOpen",
      type: "boolean",
      default: "false",
      description:
        "The open state of the assistant modal when it is initially rendered. Use when you do not need to control its open state.",
    },
    {
      name: "open",
      type: "boolean",
      description:
        "Not recommended. The controlled open state of the assistant modal. Must be used in conjunction with onOpenChange.",
    },
    {
      name: "onOpenChange",
      type: "(open: boolean) => void",
      description:
        "Event handler called when the open state of the assistant modal changes.",
    },
    {
      name: "modal",
      type: "boolean",
      default: "false",
      description:
        "The modality of the assistant modal. When set to true, interaction with outside elements will be disabled and only modal content will be visible to screen readers.",
    },
  ]}
/>

### Trigger

A button that toggles the open state of the assistant modal. `AssistantModalPrimitive.Content` will position itself against this button.

This primitive renders a `<button>` element unless `asChild` is set.

<ParametersTable
  type="AssistantModalPrimitiveTriggerProps"
  parameters={[
    {
      name: "asChild",
    },
  ]}
/>

<DataAttributesTable
  data={[
    {
      attribute: "[data-state]",
      values: <Code>"open" | "closed"</Code>,
    },
  ]}
/>

### Anchor

The anchor element that the assistant modal is attached to. Defaults to the `Trigger` element.

This primitive renders a `<div>` element unless `asChild` is set.

### Content

The component that pops out when the assistant modal is open.

This primitive renders a `<div>` element unless `asChild` is set.

<ParametersTable
  type="AssistantModalPrimitiveContentProps"
  parameters={[
    {
      name: "asChild",
    },
    {
      name: "side",
      type: "'top' | 'right' | 'bottom' | 'left'",
      default: "'top'",
      description: "The side of the assistant modal to position against.",
    },
    {
      name: "align",
      type: "'start' | 'center' | 'end'",
      default: "'end'",
      description: "The alignment of the assistant modal to position against.",
    },
    {
      name: "dissmissOnInteractOutside",
      type: "boolean",
      default: "false",
      description:
        "Dismiss the assistant modal when the user interacts outside of it.",
    },
  ]}
/>

Refer to Radix UI's Documentation for [Popover.Content](https://www.radix-ui.com/primitives/docs/components/popover#content) for more details.



================================================
FILE: apps/docs/content/docs/api-reference/primitives/Attachment.mdx
================================================
---
title: AttachmentPrimitive
---

Buttons to interact with attachments.

import { ParametersTable, DataAttributesTable } from "@/components/docs";
import { Code } from "@radix-ui/themes";
import { Callout } from "fumadocs-ui/components/callout";

<Callout>
  **Dual Use!** Attachments can appear in both messages and composers.
</Callout>

## Anatomy

```tsx
import { AttachmentPrimitive } from "@assistant-ui/react";

const MyMessageAttachment = () => (
  <AttachmentPrimitive.Root>
    <AttachmentPrimitive.Thumbnail />
    <AttachmentPrimitive.Name />
  </AttachmentPrimitive.Root>
);

const MyComposerAttachment = () => (
  <AttachmentPrimitive.Root>
    <AttachmentPrimitive.Thumbnail />
    <AttachmentPrimitive.Name />
    <AttachmentPrimitive.Remove />
  </AttachmentPrimitive.Root>
);
```

## API Reference

### Container

Containts all parts of the attachment.

This primitive renders a `<div>` element unless `asChild` is set.

<ParametersTable
  type="AttachmentPrimitiveRootProps"
  parameters={[
    {
      name: "asChild",
    },
  ]}
/>

### Thumbnail

The thumbnail of the attachment.

This primitive renders a `<div>` element unless `asChild` is set.

<ParametersTable
  type="AttachmentPrimitiveThumbnailProps"
  parameters={[
    {
      name: "asChild",
    },
  ]}
/>

### Name

The name of the attachment.

This primitive renders a `<div>` element unless `asChild` is set.

<ParametersTable
  type="AttachmentPrimitiveNameProps"
  parameters={[
    {
      name: "asChild",
    },
  ]}
/>

### Remove

Removes the attachment.

This primitive renders a `<button>` element unless `asChild` is set.

<ParametersTable
  type="AttachmentPrimitiveRemoveProps"
  parameters={[
    {
      name: "asChild",
    },
  ]}
/>



================================================
FILE: apps/docs/content/docs/api-reference/primitives/BranchPicker.mdx
================================================
---
title: BranchPickerPrimitive
---

View and switch between branches.

import { ParametersTable } from "@/components/docs";

## Anatomy

```tsx
import { BranchPickerPrimitive } from "@assistant-ui/react";

const BranchPicker = () => (
  <BranchPickerPrimitive.Root>
    <BranchPickerPrimitive.Previous />
    <BranchPickerPrimitive.Number /> / <BranchPickerPrimitive.Count />
    <BranchPickerPrimitive.Next />
  </BranchPickerPrimitive.Root>
);
```

## API Reference

### Root

Containts all parts of the branch picker.

This primitive renders a `<div>` element unless `asChild` is set.

<ParametersTable
  type="BranchPickerPrimitiveRootProps"
  parameters={[
    {
      name: "asChild",
    },
    {
      name: "hideWhenSingleBranch",
      type: "boolean",
      default: "false",
      description:
        "Do not render the BranchPicker when there is only one branch at the current message.",
    },
  ]}
/>

### Number

The current branch number.

This primitive renders the raw number as a string.

### Count

The total number of branches.

This primitive renders the raw number as a string.

### Previous

Navigates to the previous branch.

This primitive renders a `<button>` element unless `asChild` is set.

<ParametersTable
  type="BranchPickerPrimitivePreviousProps"
  parameters={[
    {
      name: "asChild",
    },
  ]}
/>

### Next

Navigates to the next branch.

This primitive renders a `<button>` element unless `asChild` is set.

<ParametersTable
  type="BranchPickerPrimitiveNextProps"
  parameters={[
    {
      name: "asChild",
    },
  ]}
/>



================================================
FILE: apps/docs/content/docs/api-reference/primitives/Composer.mdx
================================================
---
title: ComposerPrimitive
---

The user interface to add new messages or edit existing ones.

import { Callout } from "fumadocs-ui/components/callout";

import { ParametersTable, KeyboardTable } from "@/components/docs";
import { Code } from "@radix-ui/themes";

<Callout>
  **Dual Use!** A Composer placed directly inside a `Thread` will compose new
  messages. A Composer placed inside a `Message` will edit that message.
</Callout>

## Anatomy

```tsx
import { ComposerPrimitive } from "@assistant-ui/react";

// creating a new message
const Composer = () => (
  <ComposerPrimitive.Root>
    <ComposerPrimitive.Attachments />
    <ComposerPrimitive.AddAttachment />
    <ComposerPrimitive.Input />
    <ComposerPrimitive.Send />
  </ComposerPrimitive.Root>
);

// editing an existing message
const EditComposer = () => (
  <ComposerPrimitive.Root>
    <ComposerPrimitive.Input />
    <ComposerPrimitive.Send />
    <ComposerPrimitive.Cancel />
  </ComposerPrimitive.Root>
);
```

## API Reference

### Root

Containts all parts of the composer.

This primitive renders a `<form>` element unless `asChild` is set.

<ParametersTable
  type="ComposerRootProps"
  parameters={[
    {
      name: "asChild",
    },
  ]}
/>

### Input

The text input field for the user to type a new message.

This primitive renders a `<textarea>` element unless `asChild` is set.

<ParametersTable
  type="ComposerPrimitiveInputProps"
  parameters={[
    {
      name: "asChild",
    },
  ]}
/>

#### Keyboard Shortcuts

<KeyboardTable
  data={[
    {
      keys: ["Enter"],
      description: "Sends the message.",
    },
    {
      keys: ["Escape"],
      description: "Sends a cancel action.",
    },
  ]}
/>

### Send

The button to send the message.

This primitive renders a `<button>` element unless `asChild` is set.

<ParametersTable
  type="ComposerPrimitiveSendProps"
  parameters={[
    {
      name: "asChild",
    },
    {
      name: "multiple",
      type: "boolean | undefined",
      description: "Allow selecting multiple attachments at the same time.",
      default: "true",
    },
  ]}
/>

### Cancel

Sends a cancel action.

In edit composers, this action exits the edit mode.  
In thread composers, this action stops the current run.

This primitive renders a `<button>` element unless `asChild` is set.

<ParametersTable
  type="ComposerPrimitiveCancelProps"
  parameters={[
    {
      name: "asChild",
    },
  ]}
/>

### Attachments

Renders attachments. This primitive renders a separate component for each attachment.

<ParametersTable
  type="ComposerPrimitiveAttachmentsProps"
  parameters={[
    {
      name: "components",
      type: "ComposerAttachmentsComponents",
      description: "The component to render for each attachment.",
      children: [
        {
          type: "ComposerPrimitiveAttachmentsProps['components']",
          parameters: [
            {
              name: "Image",
              type: "ComponentType",
              description: "The component to render for each image attachment.",
            },
            {
              name: "Document",
              type: "ComponentType",
              description:
                "The component to render for each document attachment.",
            },
            {
              name: "File",
              type: "ComponentType",
              description: "The component to render for each file attachment.",
            },
            {
              name: "Fallback",
              type: "ComponentType",
              description: "The component to render for each attachment type.",
            },
          ],
        },
      ],
    },
  ]}
/>

### AddAttachment

Renders a button to add an attachment.

This primitive renders a `<button>` element unless `asChild` is set.

<ParametersTable
  type="ComposerPrimitiveAddAttachmentProps"
  parameters={[
    {
      name: "asChild",
    },
  ]}
/>

### If

Renders children if a condition is met.

<ParametersTable
  type="UseComposerIfProps"
  parameters={[
    {
      name: "editing",
      required: false,
      type: "boolean | undefined",
      description: "Render children if the message is being edited.",
    },
  ]}
/>

```tsx
<Composer.If editing>{/* rendered if message is being edited */}</Composer.If>
```



================================================
FILE: apps/docs/content/docs/api-reference/primitives/composition.mdx
================================================
---
title: Composition
---

import { Code } from "@radix-ui/themes";

`assistant-ui` primitives are composable. This means that all props are forwarded, classes are merged, and event handlers are chained.

Most primitives come with a default HTML element (usually `div` or `button`). If you already have a custom component, you can use the `asChild` prop to replace it:

```tsx
// use the primitive's <button> element
<Composer.Send>Send</Composer.Send>;

// use your own <Button> component
<Composer.Send asChild>
  <Button>Send</Button>
</Composer.Send>;
```

Learn more on [Radix's composition guide](https://www.radix-ui.com/primitives/docs/guides/composition).



================================================
FILE: apps/docs/content/docs/api-reference/primitives/Error.mdx
================================================
---
title: ErrorPrimitive
---

A component for displaying error messages in the UI.

import { ParametersTable } from "@/components/docs";

## Anatomy

```tsx
import { ErrorPrimitive } from "@assistant-ui/react";

const ErrorDisplay = () => (
  <ErrorPrimitive.Root>
    <ErrorPrimitive.Message />
  </ErrorPrimitive.Root>
);
```

## API Reference

### Root

Contains all parts of the error display. Renders a `<div>` element with `role="alert"`.

<ParametersTable
  type="ErrorPrimitiveRootProps"
  parameters={[
    {
      name: "asChild",
      type: "boolean",
      description:
        "Change the component to the HTML tag or custom component of the only child.",
    },
  ]}
/>

### Message

Displays the error message. By default, it shows the error from the message context if available, or you can provide custom content.

<ParametersTable
  type="ErrorPrimitiveMessageProps"
  parameters={[
    {
      name: "children",
      type: "ReactNode",
      description:
        "Optional custom content to display instead of the default error message.",
    },
  ]}
/>

## Usage

The ErrorPrimitive is typically used within a MessagePrimitive.Error component to display error states in messages:

```tsx
import { MessagePrimitive, ErrorPrimitive } from "@assistant-ui/react";

const MessageWithError = () => (
  <MessagePrimitive.Root>
    <MessagePrimitive.Parts />
    <MessagePrimitive.Error>
      <ErrorPrimitive.Root>
        <ErrorPrimitive.Message />
      </ErrorPrimitive.Root>
    </MessagePrimitive.Error>
  </MessagePrimitive.Root>
);
```



================================================
FILE: apps/docs/content/docs/api-reference/primitives/Message.mdx
================================================
---
title: MessagePrimitive
---

A single message in a conversation. Messages may consist of multiple parts.

import { ParametersTable } from "@/components/docs";

## Anatomy

```tsx
import { MessagePrimitive } from "@assistant-ui/react";

const UserMessage = () => (
  <MessagePrimitive.Root>
    User: <MessagePrimitive.Content />
    <BranchPicker />
    <ActionBar />
  </MessagePrimitive.Root>
);

const AssistantMessage = () => (
  <MessagePrimitive.Root>
    Assistant: <MessagePrimitive.Content />
    <BranchPicker />
    <ActionBar />
  </MessagePrimitive.Root>
);
```

## API Reference

### Root

Containts all parts of the message.

This primitive renders a `<div>` element unless `asChild` is set.

<ParametersTable
  type="MessagePrimitiveRootProps"
  parameters={[
    {
      name: "asChild",
    },
  ]}
/>

### Content

The content of the message. This renders a separate component for each content part of the message.

<ParametersTable
  type="MessagePrimitiveContentProps"
  parameters={[
    {
      name: "components",
      required: false,
      type: "ContentPartComponents",
      description: "The components to render for each content part.",
      children: [
        {
          type: "ContentPartComponents",
          parameters: [
            {
              name: "Text",
              type: "TextContentPartComponent",
              description:
                "The component to render for each text content part.",
            },
            {
              name: "Image",
              type: "ImageContentPartComponent",
              description:
                "The component to render for each image content part.",
            },
            {
              name: "Source",
              type: "SourceContentPartComponent",
              description:
                "The component to render for each source content part.",
            },
            {
              name: "File",
              type: "FileContentPartComponent",
              description:
                "The component to render for each file content part.",
            },
            {
              name: "Unstable_Audio",
              type: "Unstable_AudioContentPartComponent",
              description:
                "The component to render for each audio content part.",
            },
            {
              name: "tools",
              type: "object",
              description:
                "The component to render for each tool call content part.",
              children: [
                {
                  parameters: [
                    {
                      name: "by_name",
                      type: "Record<string, ToolCallContentPartComponent>",
                      description:
                        "The components to render for each tool call content part.",
                    },
                    {
                      name: "Fallback",
                      type: "ToolCallContentPartComponent",
                      description:
                        "The fallback component to render for tool call content parts.",
                    },
                  ],
                },
              ],
            },
            {
              name: "ToolGroup",
              type: "ComponentType<PropsWithChildren<{ startIndex: number; endIndex: number }>>",
              description:
                "Component for rendering grouped consecutive tool calls. When provided, consecutive tool-call content parts will be automatically grouped and wrapped with this component.",
              children: [
                {
                  type: "ToolGroupProps",
                  parameters: [
                    {
                      name: "startIndex",
                      type: "number",
                      description: "Index of the first tool call in the group.",
                      required: true,
                    },
                    {
                      name: "endIndex",
                      type: "number",
                      description: "Index of the last tool call in the group.",
                      required: true,
                    },
                    {
                      name: "children",
                      type: "ReactNode",
                      description:
                        "The rendered tool call components within the group.",
                      required: true,
                    },
                  ],
                },
              ],
            },
          ],
        },
      ],
    },
  ]}
/>

### If

Renders children if a condition is met.

<ParametersTable
  type="UseMessageIfProps"
  parameters={[
    {
      name: "user",
      type: "boolean | undefined",
      description: "Render children if the message is from the user.",
    },
    {
      name: "assistant",
      type: "boolean | undefined",
      description: "Render children if the message is from the assistant.",
    },
    {
      name: "hasBranches",
      type: "boolean | undefined",
      description: "Render children if the message has branches.",
    },
    {
      name: "copied",
      type: "boolean | undefined",
      description: "Render children if the message is copied.",
    },
    {
      name: "lastOrHover",
      type: "boolean | undefined",
      description:
        "Render children if the message is the last or hovered over.",
    },
  ]}
/>

```tsx
<Message.If user>
  {/* rendered if message is from the user */}
</Message.If>
<Message.If assistant>
  {/* rendered if message is from the assistant */}
</Message.If>
```

### Error

Renders children only if the message has an error status.

```tsx
<MessagePrimitive.Error>
  {/* rendered if the message has an error status */}
  <ErrorPrimitive.Root>
    <ErrorPrimitive.Message />
  </ErrorPrimitive.Root>
</MessagePrimitive.Error>
```



================================================
FILE: apps/docs/content/docs/api-reference/primitives/MessagePart.mdx
================================================
---
title: MessagePartPrimitive
description: A part of a message's content. Message parts may be text, image, tool call or UI elements.
---

import { ParametersTable } from "@/components/docs";
import {
  MessagePartRuntime,
  TextMessagePartState,
  AudioMessagePartState,
  ToolCallMessagePartState,
} from "@/generated/typeDocs";

Each message can have any number of message parts.  
Message parts are usually one of text, reasoning, audio or tool-call.

## Message part Types

### Text

Standard text content, used for both user and assistant messages.

### Reasoning

Exposes the assistant's reasoning process, showing how it arrived at its responses. This is typically used only in assistant messages.

### Audio

Audio content that can be played back.

### Tool Call

Interactive elements that represent tool operations.

## Anatomy

```tsx
import { MessagePartPrimitive } from "@assistant-ui/react";

const TextMessagePart = () => {
  return <MessagePartPrimitive.Text />;
};
```

## Primitives

### Plain Text

```tsx
import { MessagePartPrimitive } from "@assistant/react";

<MessagePartPrimitive.Text />;
```

### Markdown Text

Renders the message's text as Markdown.

```tsx
import { MarkdownTextPrimitive } from "@assistant-ui/react-markdown";

<MarkdownTextPrimitive />;
```

### Audio

Coming soon.

### InProgress

Renders children only if the message part is in progress.

```tsx
import { MessagePartPrimitive } from "@assistant/react";

<MessagePartPrimitive.InProgress>
  <LoadingIndicator />
</MessagePartPrimitive.InProgress>;
```

### Tool UI

You can map tool calls to UI components. We provide a few utility functions to make this easier, such as `makeAssistantToolUI`.

```tsx
const MyWeatherToolUI = makeAssistantToolUI({
  toolName: "get_weather",
  render: function MyWeatherToolUI({ args, result }) {
    return (
      <div className="mb-4 flex flex-col items-center">
        <pre className="whitespace-pre-wrap break-all text-center">
          get_weather({JSON.stringify(args)})
        </pre>
        {"result" in result && (
          <pre className="whitespace-pre-wrap break-all text-center">
            {JSON.stringify(result.result)}
          </pre>
        )}
      </div>
    );
  },
});
```

## Context Provider

Message part context is provided by `MessagePrimitive.Parts` or `TextMessagePartProvider`

### MessagePrimitive.Parts

```tsx
import { MessagePrimitive } from "@assistant/react";

<MessagePrimitive.Parts
  components={{
    Text: MyText,
    Reasoning: MyReasoning,
    Audio: MyAudio,
    tools: {
      by_name: {
        get_weather: MyWeatherToolUI,
      },
      Fallback: MyFallbackToolUI,
    },
  }}
/>;
```

### TextMessagePartProvider

This is a helper context provider to allow you to reuse the message part components outside a message message part.

```tsx
import { TextMessagePartProvider } from "@assistant-ui/react";

<TextMessagePartProvider text="Hello world" isRunning={false}>
  <MessagePart.Text />
</TextMessagePartProvider>;
```

## Runtime API

### `useMessagePartRuntime`

```tsx
import { useMessagePartRuntime } from "@assistant-ui/react";

const MessagePartRuntime = useMessagePartRuntime();
```

<ParametersTable {...MessagePartRuntime} />

### `useMessagePart`

```tsx
import { useMessagePart } from "@assistant-ui/react";

const MessagePart = useMessagePart();
```

<ParametersTable {...TextMessagePartState} />
<ParametersTable {...AudioMessagePartState} />
<ParametersTable {...ToolCallMessagePartState} />

### `useMessagePartText`

```tsx
import { useMessagePartText } from "@assistant-ui/react";

const MessagePartText = useMessagePartText();
```

<ParametersTable {...TextMessagePartState} />



================================================
FILE: apps/docs/content/docs/api-reference/primitives/meta.json
================================================
{
  "title": "Radix UI Primitives",
  "pages": [
    "AssistantModal",
    "Thread",
    "Composer",
    "Message",
    "Error",
    "BranchPicker",
    "ActionBar",
    "MessagePart",
    "...",
    "composition"
  ]
}



================================================
FILE: apps/docs/content/docs/api-reference/primitives/Thread.mdx
================================================
---
title: ThreadPrimitive
---

A conversation between a user and an assistant.

import { ParametersTable } from "@/components/docs";

## Anatomy

```tsx
import { ThreadPrimitive } from "@assistant-ui/react";

const Thread = () => (
  <ThreadPrimitive.Root>
    <ThreadPrimitive.Viewport>
      <ThreadPrimitive.Empty>...</ThreadPrimitive.Empty>
      <ThreadPrimitive.Messages components={...} />
    </ThreadPrimitive.Viewport>
    <Composer />
  </ThreadPrimitive.Root>
);
```

## API Reference

### Root

Containts all parts of the thread.

This primitive renders a `<div>` element unless `asChild` is set.

<ParametersTable
  type="ThreadPrimitiveRootProps"
  parameters={[
    {
      name: "asChild",
    },
  ]}
/>

### Viewport

The scrollable area containing all messages. Anchors scroll to the bottom as new messages are added.

This primitive renders a `<div>` element unless `asChild` is set.

<ParametersTable
  type="ThreadPrimitiveViewportProps"
  parameters={[
    {
      name: "asChild",
    },
    {
      name: "autoScroll",
      type: "boolean",
      default: "true",
      description:
        "Whether to automatically scroll to the bottom of the viewport when new messages are added while the viewport is was previously scrolled to the bottom.",
    },
  ]}
/>

### Messages

Renders all messages. This primitive renders a separate component for each message.

<ParametersTable
  type="ThreadPrimitiveMessagesProps"
  parameters={[
    {
      name: "components",
      type: "MessageComponents",
      description: "The component to render for each message.",
      children: [
        {
          type: "MessageComponents",
          parameters: [
            {
              name: "Message",
              type: "ComponentType",
              description: "The component to render for each message.",
            },
            {
              name: "UserMessage",
              type: "ComponentType",
              description: "The component to render for user messages.",
            },
            {
              name: "EditComposer",
              type: "ComponentType",
              description:
                "The component to render for user messages that are being edited.",
            },
            {
              name: "AssistantMessage",
              type: "ComponentType",
              description: "The component to render for assistant messages.",
            },
          ],
        },
      ],
    },
  ]}
/>

### Empty

Renders children only when there are no messages.

### ScrollToBottom

A button to scroll the viewport to the bottom. Disabled when the viewport is already at bottom.

This primitive renders a `<button>` element unless `asChild` is set.

<ParametersTable
  type="ThreadPrimitiveScrollToBottomProps"
  parameters={[
    {
      name: "asChild",
    },
  ]}
/>

### `ThreadPrimitive.Suggestion`

Shows a suggestion to the user. When the user clicks on the suggestion, the composer's value is set to the suggestion's prompt.

This primitive renders a `<button>` element unless `asChild` is set.

```tsx
import { ThreadPrimitive } from "@assistant-ui/react";

const Suggestion = () => {
  return (
    <ThreadPrimitive.Suggestion
      prompt="I need help with product search"
      method="replace"
      autoSend
    />
  );
};
```

<ParametersTable
  type="ThreadPrimitiveSuggestionProps"
  parameters={[
    {
      name: "prompt",
      type: "string",
      description: "The suggestion's prompt.",
    },
    {
      name: "method",
      type: "'replace'",
      description:
        "How does the suggestion interact with the composer's existing value.",
    },
    {
      name: "autoSend",
      type: "boolean",
      description:
        "Whether to automatically send the suggestion when the user clicks on it.",
      default: "false",
    },
  ]}
/>

### If

Renders children if a condition is met.

<ParametersTable
  type="ThreadPrimitiveIfProps"
  parameters={[
    {
      name: "empty",
      type: "boolean | undefined",
      description: "Render children if the thread is empty.",
    },
    {
      name: "running",
      type: "boolean | undefined",
      description: "Render children if the thread is running.",
    },
  ]}
/>

```tsx
<Thread.If empty>
  {/* equivalent to <Thread.Empty> */}
</Thread.If>
<Thread.If empty={false}>
  {/* rendered if thread is not empty */}
</Thread.If>
```



================================================
FILE: apps/docs/content/docs/api-reference/runtimes/AssistantRuntime.mdx
================================================
---
title: AssistantRuntime
---

import { ParametersTable } from "@/components/docs";
import { AssistantRuntime, AssistantToolUIsState } from "@/generated/typeDocs";

The `AssistantRuntime` is the root runtime of the application.

### `useAssistantRuntime`

```tsx
import { useAssistantRuntime } from "@assistant-ui/react";

const runtime = useAssistantRuntime();
```

<ParametersTable {...AssistantRuntime} />

### Tool UI Registry

The tool UI registry is part of the assistant runtime. It allows you to display custom UI for tool calls, enabling generative UI.

#### `useToolUIs`

```tsx
import { useToolUIs } from "@assistant-ui/react";

const toolUIs = useToolUIs();
const webSearchToolUI = useToolUIs((m) => m.getToolUI("web_search"));
```

<ParametersTable {...AssistantToolUIsState} />



================================================
FILE: apps/docs/content/docs/api-reference/runtimes/AttachmentRuntime.mdx
================================================
---
title: AttachmentRuntime
---

import { ParametersTable } from "@/components/docs";
import {
  ComposerAttachmentState,
  MessageAttachmentState,
} from "@/components/docs/parameters/context";

### `useAttachment`

Access the current attachment state:

```tsx
import { useAttachment } from "@assistant-ui/react";

const { attachment } = useAttachment();
const att = useAttachment((m) => m.attachment);
```

### `useComposerAttachment` (Composer)

When working with a composer’s attachment:

```tsx
import { useComposerAttachment } from "@assistant-ui/react";

const { attachment } = useComposerAttachment();
const composerAttachment = useComposerAttachment((m) => m.attachment);
```

<ParametersTable {...ComposerAttachmentState} />

### `useMessageAttachment` (Message)

For managing a message’s attachment:

```tsx
import { useMessageAttachment } from "@assistant-ui/react";

const { attachment } = useMessageAttachment();
const messageAttachment = useMessageAttachment((m) => m.attachment);
```

<ParametersTable {...MessageAttachmentState} />



================================================
FILE: apps/docs/content/docs/api-reference/runtimes/ComposerRuntime.mdx
================================================
---
title: ComposerRuntime
---

The composer runtime allows you to view or edit anything related to how new information is added and sent. For instance you can use the composer runtime to read the state, add attachments, update text, send a message, etc.

import { ParametersTable } from "@/components/docs";
import { ComposerRuntime, ThreadComposerRuntime, ThreadComposerState, EditComposerState } from "@/generated/typeDocs";

### `useComposer`

Grabs the nearest composer (whether it’s the edit composer or the thread’s composer):

```tsx
// Example
import { useComposer } from "@assistant-ui/react";

const composerRuntime = useComposer();

// set the text
composerRuntime.setText("Hello from the composer runtime");

// send whatever is in the composer 
composerRuntime.send();

// get the current text in the composer state
const composerState = composerRuntime.getState();
const currentText = composerState.text;

```

<ParametersTable {...ComposerRuntime} />


### `useThreadComposer`

Access the thread’s new message composer state:

```tsx
import { useThreadComposer } from "@assistant-ui/react";

const threadComposerRuntime = useThreadComposer();

// set the text
threadComposerRuntime.setText("Hello from the thread composer runtime");

// send whatever is in the thread composer 
threadComposerRuntime.send();

// get the current text in the composer state
const threadComposerState = threadComposerRuntime.getState();
const currentText = threadComposerRuntime.text;

```

<ParametersTable {...ThreadComposerRuntime} />


### `ThreadComposerState`

The state of the thread composer which is the composer the user can interact with at the bottom.

<ParametersTable {...ThreadComposerState} />

### `EditComposerState`

The state of the edit composer which is the composer the user can edit messages with.

<ParametersTable {...EditComposerState} />



================================================
FILE: apps/docs/content/docs/api-reference/runtimes/MessagePartRuntime.mdx
================================================
---
title: MessagePartRuntime
---

import { ParametersTable } from "@/components/docs";
import { MessagePartState } from "@/components/docs/parameters/context";

### `useMessagePart`

Access the message part state:

```tsx
import { useMessagePart } from "@assistant-ui/react";

const part = useMessagePart();
const partState = useMessagePart.getState();

const status = useMessagePart((m) => m.status);
const statusAgain = useMessagePart.getState().status;
```

<ParametersTable {...MessagePartState} />



================================================
FILE: apps/docs/content/docs/api-reference/runtimes/MessageRuntime.mdx
================================================
---
title: MessageRuntime
---

import { ParametersTable } from "@/components/docs";
import {
  MessageState,
  MessageUtilsState,
  EditComposerState,
} from "@/components/docs/parameters/context";

### `useMessage`

Retrieve the message object:

```tsx
import { useMessage } from "@assistant-ui/react";

const { message } = useMessage();
const msg = useMessage((m) => m.message);
```

<ParametersTable {...MessageState} />

### `useMessageUtils`

Provides utility functions for a message (e.g., copy status):

```tsx
import { useMessageUtils } from "@assistant-ui/react";

const messageUtils = useMessageUtils();
const isCopied = useMessageUtils((m) => m.isCopied);
```

<ParametersTable {...MessageUtilsState} />

### `useEditComposer`

Access the edit composer state (used when editing a message):

```tsx
import { useEditComposer } from "@assistant-ui/react";

const editComposer = useEditComposer();
const text = useEditComposer((m) => m.text);
```

<ParametersTable {...EditComposerState} />



================================================
FILE: apps/docs/content/docs/api-reference/runtimes/meta.json
================================================
{
  "title": "Runtime Hooks",
  "pages": [
    "AssistantRuntime",
    "ThreadRuntime",
    "ComposerRuntime",
    "MessageRuntime",
    "MessagePartRuntime",
    "AttachmentRuntime",
    "ThreadListRuntime",
    "ThreadListItemRuntime"
  ]
}



================================================
FILE: apps/docs/content/docs/api-reference/runtimes/ThreadListItemRuntime.mdx
================================================
---
title: ThreadListItemRuntime
---

import { ParametersTable } from "@/components/docs";
import {
  ThreadListItemRuntime,
  ThreadListItemState,
} from "@/generated/typeDocs";

### `useThreadListItemRuntime`

```tsx
import { useThreadListItemRuntime } from "@assistant-ui/react";

const threadListItemRuntime = useThreadListItemRuntime();
```

<ParametersTable {...ThreadListItemRuntime} />

### `useThreadListItem`

Access the state for a specific thread list item:

```tsx
import { useThreadListItem } from "@assistant-ui/react";

const threadListItem = useThreadListItem();
const title = useThreadListItem((m) => m.title);
```

<ParametersTable {...ThreadListItemState} />



================================================
FILE: apps/docs/content/docs/api-reference/runtimes/ThreadListRuntime.mdx
================================================
---
title: ThreadListRuntime
---

import { ParametersTable } from "@/components/docs";
import { ThreadListRuntime, ThreadListState } from "@/generated/typeDocs";

### Access via `useAssistantRuntime`

You can access the thread list runtime via the assistant runtime:

```tsx
import { useAssistantRuntime } from "@assistant-ui/react";

const threadListRuntime = useAssistantRuntime().threadList;
```

<ParametersTable {...ThreadListRuntime} />

### `useThreadList`

This hook provides access to the thread list state:

```tsx
import { useThreadList } from "@assistant-ui/react";

const threadList = useThreadList();
const threads = useThreadList((m) => m.threads);
const isLoading = useThreadList((m) => m.isLoading);
```

<ParametersTable {...ThreadListState} />



================================================
FILE: apps/docs/content/docs/api-reference/runtimes/ThreadRuntime.mdx
================================================
---
title: ThreadRuntime
---

import { ParametersTable } from "@/components/docs";
import { ThreadRuntime, ThreadState } from "@/generated/typeDocs";
import {
  ThreadMessagesState,
  ThreadViewportState,
} from "@/components/docs/parameters/context";

### `useThreadRuntime`

Get the thread runtime object:

```tsx
import { useThreadRuntime } from "@assistant-ui/react";

const thread = useThreadRuntime();
```

<ParametersTable {...ThreadRuntime} />

### `useThread`

Access the thread state directly:

```tsx
import { useThread } from "@assistant-ui/react";

const thread = useThread();
const isRunning = useThread((m) => m.isRunning);
const isLoading = useThread((m) => m.isLoading);
```

<ParametersTable {...ThreadState} />

### `useThreadViewport`

Manage thread viewport state (e.g., scrolling):

```tsx
import { useThreadViewport } from "@assistant-ui/react";

const threadViewport = useThreadViewport();
const isAtBottom = useThreadViewport((m) => m.isAtBottom);
```

<ParametersTable {...ThreadViewportState} />



================================================
FILE: apps/docs/content/docs/cloud/authorization.mdx
================================================
---
title: User Authorization
---

The assistant-ui API can be directly accessed by your frontend. This elliminates the need for a backend server from your side, except for authorization of your users.

This document explains how you can setup your server to authorize users to access the assistant-ui API.

## Workspaces

Authorization is granted to a workspace. Depending on the structure of your app, you might want to use user_ids as the workspace_id, or you might want to use a more complex structure.
For example, if your app supports multiple "projects", you might want to use the project_id + user_id as the workspace id (thread history scoped to user+project pairs).

## Workspace Auth Tokens

assistant-ui issues workspace auth tokens. These tokens give access to the assistant-ui API for a specific workspace.
Tokens are short lived (5 minutes), so the client needs to periodically request a new token (handled by assistant-ui).

There are two supported approaches to obtain a workspace auth token:

- Direct integration with your auth provider
- From a backend server / serverless function

### Choosing the right approach

Direct integration with your auth provider:

- simpler to setup and maintain
- assigns a workspace_id to every user (by using the user_id as the workspace_id)
- requires a supported auth provider (Clerk, Auth0, Supabase, Firebase, Stytch, Kinde, ...)

Backend server:

- more complex to setup
- more flexible workspace structure (multi-user workspaces, workspaces per project, etc.)
- supports self hosted auth solutions, e.g. Auth.js
- requires a backend server / serverless function

You can always switch between the two approaches without any downtime or necessary database migrations.
Choose direct integration with your auth provider if you can. Otherwise, use a backend server.

### Auth Provider Integration
In the AssistantUI dashboard, go to the "Auth Integrations" tab and add a new integration.
Follow the steps to add your auth provider. (See the auth providers we have guides for at the bottom of this page.)

Then, pass in a function to `authToken` that returns an ID token from your auth provider.

```ts
import { AssistantCloud } from "@assistant-ui/react";

const assistantCloud = new AssistantCloud({
  authToken: () => JWT_TOKEN
});
```

### Integration with an Auth Provider

#### Backend API Endpoint

The following is an api route example to create an auth token based on an authenticated user's orgId and userId.

In the Assistant Cloud dashboard, go to the "API Keys" tab and add a new API key, add the key the environment variable `ASSISTANT_API_KEY=[KEY]`

```ts title="/app/api/assistant-ui-token/route.ts"
import { AssistantCloud } from "@assistant-ui/react";
import { auth } from "@clerk/nextjs/server";
 
export const POST = async (req: Request) => {
  const { userId, orgId } = await auth();
 
  if (!userId) throw new Error("User not authenticated");
 
  const workspaceId = orgId ? `${orgId}:${userId}` : userId;
  const assistantCloud = new AssistantCloud({
    apiKey: process.env["ASSISTANT_API_KEY"]!,
    userId,
    workspaceId,
  });
  const {token} = await assistantCloud.auth.tokens.create();

  return new Response(token);
};
```

#### Frontend Implementation

The following is an api route example to create an auth token based on an authenticated user's orgId and userId.

```ts title="client.ts"
const cloud = new AssistantCloud({
  baseUrl: process.env["NEXT_PUBLIC_ASSISTANT_BASE_URL"]!,
  authToken: () =>
    fetch("/api/assistant-ui-token", { method: "POST" }).then((r) =>
      r.json().then((data) => data.token)
    ),
});

const runtime = useChatRuntime({
  api: "/api/chat",
  cloud,
});
```

### Anonymous (without auth provider) Frontend Implementation

The following is a example to get auth tokens for Clerk based on the org_id and user_id:

```ts title="/app/api/assistant-ui-token/route.ts"
import { AssistantCloud } from "@assistant-ui/react";

const cloud = new AssistantCloud({
  baseUrl: process.env["NEXT_PUBLIC_ASSISTANT_BASE_URL"]!,
  anonymous: true,
});

const runtime = useChatRuntime({
  api: "/api/chat",
  cloud,
});

return (
  <AssistantRuntimeProvider runtime={runtime}>
    <div className="grid h-dvh grid-cols-[200px_1fr] gap-x-2 px-4 py-4">
      <ThreadList />
      <MyThread />
    </div>
  </AssistantRuntimeProvider>
);

```


### Setting up the Clerk Auth Provider

First, go to the Clerk dashboard and under "Configure" tab, "JWT Templates" section, create a new template. Choose a blank template and name it "assistant-ui".

As the "Claims" field, enter the following:

```json
{
  "aud": "assistant-ui"
}
```

<Callout emoji="⚠️">
  <b>Note:</b> The aud claim ensures that the JWT is only valid for the
  assistant-ui API.
</Callout>

You can leave everything else as default. Take note of the "Issuer" and "JWKS Endpoint" fields.

Then, In the assistant-cloud dashboard, navigate to the "Auth Rules" tab and create a new rule. Choose "Clerk" and enter the Issuer and JWKS Endpoint from the previous step. As the "Audience" field, enter "assistant-ui".



================================================
FILE: apps/docs/content/docs/cloud/meta.json
================================================
{
  "pages": ["overview", "authorization", "persistence"]
}



================================================
FILE: apps/docs/content/docs/cloud/overview.mdx
================================================
---
title: Overview
---

Assistant Cloud is a hosted service built for assistant-ui frontends that offers comprehensive thread management and message history. It automatically persists threads, supports human-in-the-loop workflows, and integrates with common auth providers to seamlessly allow users to resume conversations at any point.


## Features

### Thread management

Using our `<ThreadList />` component, show the users a list of conversations. Allow the users to seamlessly switch between conversations and even let long running tasks run in the background.

Assistant Cloud automatically persists a list of threads and corresponding metadata. It also automatically generates a title for conversations based on the initial messages.

Supported backends:

- AI SDK
- LangGraph
- Custom

### Chat history

For every conversation, Assistant Cloud can store the history of messages, allowing the user to resume the conversation at any point in time.
This supports human in the loop workflows, where the execution of an agent is interrupted until user feedback is collected.

Supported backends:

- AI SDK
- LangGraph
- Custom (currently only Local Runtime)

### Authorization

Assistant Cloud integrates with your auth provider (Clerk, Auth0, Supabase, Firebase, ...) to identify your users and authorize them to access just the conversations they are allowed to see.

Supported auth providers:

- Clerk
- Auth0
- Supabase
- Firebase
- Your own

## Getting Started

To get started, create an account at [Assistant Cloud Dashboard](https://cloud.assistant-ui.com/) and follow one of the walkthroughs for your preferred backend:

- [AI SDK](/docs/cloud/persistence/ai-sdk)
- [LangGraph](/docs/cloud/persistence/langgraph)

You can also check out our example repositories to see how to integrate Assistant Cloud with your frontend:

- [With AI SDK](https://github.com/assistant-ui/assistant-ui/tree/main/examples/with-cloud)
- [With LangGraph](https://github.com/assistant-ui/assistant-ui/tree/main/examples/with-langgraph)



================================================
FILE: apps/docs/content/docs/cloud/persistence/ai-sdk.mdx
================================================
---
title: Chat History for AI SDK
---

import { Steps, Step } from 'fumadocs-ui/components/steps';
import { Callout } from 'fumadocs-ui/components/callout';

## Overview

assistant-cloud provides thread management and persistent chat history for applications built with the [AI SDK by Vercel](https://sdk.vercel.ai/). This guide shows you how to integrate cloud persistence into your AI SDK application.

## Prerequisites

<Callout type="info">
  You need an assistant-cloud account to follow this guide. [Sign up here](https://cloud.assistant-ui.com/) to get started.
</Callout>

## Setup Guide

<Steps>

<Step>

### Create a Cloud Project

Create a new project in the [assistant-cloud dashboard](https://cloud.assistant-ui.com/) and from the settings page, copy:

- **Frontend API URL**: `https://proj-[ID].assistant-api.com`
- **Assistant Cloud API Key**: `sk_aui_proj_*`

</Step>

<Step>

### Configure Environment Variables

Add the following environment variables to your project:

```bash title=".env.local"
# Frontend API URL from your cloud project settings
NEXT_PUBLIC_ASSISTANT_BASE_URL=https://proj-[YOUR-ID].assistant-api.com

# API key for server-side operations
ASSISTANT_API_KEY=your-api-key-here
```

</Step>

<Step>

### Install Dependencies

Install the required packages:

```bash
npm install @assistant-ui/react @assistant-ui/react-ai-sdk
```

</Step>

<Step>

### Set Up the Cloud Runtime

Create a client-side AssistantCloud instance and integrate it with your AI SDK runtime:

```tsx title="app/chat/page.tsx"
"use client";

import { AssistantCloud, AssistantRuntimeProvider } from "@assistant-ui/react";
import { useChatRuntime } from "@assistant-ui/react-ai-sdk";
import { ThreadList } from "@/components/assistant-ui/thread-list";
import { Thread } from "@/components/assistant-ui/thread";

export default function ChatPage() {
  const cloud = new AssistantCloud({
    baseUrl: process.env.NEXT_PUBLIC_ASSISTANT_BASE_URL!,
    anonymous: true, // Creates browser-session based user ID
  });

  const runtime = useChatRuntime({
    api: "/api/chat", // Your AI SDK endpoint
    cloud,
  });

  return (
    <AssistantRuntimeProvider runtime={runtime}>
      <div className="grid h-dvh grid-cols-[200px_1fr] gap-x-2 px-4 py-4">
        <ThreadList />
        <Thread />
      </div>
    </AssistantRuntimeProvider>
  );
}
```

</Step>

</Steps>

## Authentication

The example above uses `anonymous: true` which creates a browser session-based user ID. This is suitable for public demos or prototypes.

For production apps with user accounts, see the [Cloud Authorization](/docs/cloud/authorization) guide to persist threads per user or workspace.

## Next Steps

- Learn about [user authentication](/docs/cloud/authorization) for multi-user applications
- Explore [runtime hooks](/docs/api-reference/integrations/vercel-ai-sdk) and integration options
- Check out the [complete example](https://github.com/assistant-ui/assistant-ui/tree/main/examples/with-cloud) on GitHub



================================================
FILE: apps/docs/content/docs/cloud/persistence/langgraph.mdx
================================================
---
title: Chat History for LangGraph Cloud
---

import { Steps, Step } from 'fumadocs-ui/components/steps';
import { Callout } from 'fumadocs-ui/components/callout';
import { Tab, Tabs } from 'fumadocs-ui/components/tabs';

## Overview

assistant-cloud provides thread management and persistent chat history for applications built with [LangGraph Cloud](https://langchain-ai.github.io/langgraph/cloud/). This guide shows you how to integrate cloud persistence into your LangGraph application.

## Prerequisites

<Callout type="info">
  You need an assistant-cloud account to follow this guide. [Sign up here](https://cloud.assistant-ui.com/) to get started.
</Callout>

## Setup Guide

<Steps>

<Step>

### Create a Cloud Project

Create a new project in the [assistant-cloud dashboard](https://cloud.assistant-ui.com/) and from the settings page, copy:

- **Frontend API URL**: `https://proj-[ID].assistant-api.com`
- **API Key**: For server-side operations

</Step>

<Step>

### Configure Environment Variables

Add the following environment variables to your project:

```bash title=".env.local"
# Frontend API URL from your cloud project settings
NEXT_PUBLIC_ASSISTANT_BASE_URL=https://proj-[YOUR-ID].assistant-api.com

# API key for server-side operations
ASSISTANT_API_KEY=your-api-key-here
```

</Step>

<Step>

### Install Dependencies

Install the required packages:

```bash
npm install @assistant-ui/react @assistant-ui/react-langgraph
```

</Step>

<Step>

### Create the Runtime Provider

Create a runtime provider that integrates LangGraph with assistant-cloud. Choose between anonymous mode for demos/prototypes or authenticated mode for production:

<Tabs items={["Anonymous", "Authenticated (Clerk)"]}>

<Tab value="Anonymous">

```tsx title="app/chat/runtime-provider.tsx"
"use client";

import {
  AssistantCloud,
  AssistantRuntimeProvider,
  useCloudThreadListRuntime,
  useThreadListItemRuntime,
} from "@assistant-ui/react";
import { useLangGraphRuntime } from "@assistant-ui/react-langgraph";
import { createThread, getThreadState, sendMessage } from "@/lib/chatApi";
import { LangChainMessage } from "@assistant-ui/react-langgraph";
import { useMemo } from "react";

const useMyLangGraphRuntime = () => {
  const threadListItemRuntime = useThreadListItemRuntime();
  
  const runtime = useLangGraphRuntime({
    stream: async function* (messages) {
      const { externalId } = await threadListItemRuntime.initialize();
      if (!externalId) throw new Error("Thread not found");

      return sendMessage({
        threadId: externalId,
        messages,
      });
    },

    onSwitchToThread: async (externalId) => {
      const state = await getThreadState(externalId);
      return {
        messages:
          (state.values as { messages?: LangChainMessage[] }).messages ?? [],
      };
    },
  });

  return runtime;
};

export function MyRuntimeProvider({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const cloud = useMemo(
    () =>
      new AssistantCloud({
        baseUrl: process.env.NEXT_PUBLIC_ASSISTANT_BASE_URL!,
        anonymous: true, // Creates browser session-based user ID
      }),
    [],
  );

  const runtime = useCloudThreadListRuntime({
    cloud,
    runtimeHook: useMyLangGraphRuntime,
    create: async () => {
      const { thread_id } = await createThread();
      return { externalId: thread_id };
    },
  });

  return (
    <AssistantRuntimeProvider runtime={runtime}>
      {children}
    </AssistantRuntimeProvider>
  );
}
```

</Tab>

<Tab value="Authenticated (Clerk)">

```tsx title="app/chat/runtime-provider.tsx"
"use client";

import {
  AssistantCloud,
  AssistantRuntimeProvider,
  useCloudThreadListRuntime,
  useThreadListItemRuntime,
} from "@assistant-ui/react";
import { useLangGraphRuntime } from "@assistant-ui/react-langgraph";
import { createThread, getThreadState, sendMessage } from "@/lib/chatApi";
import { LangChainMessage } from "@assistant-ui/react-langgraph";
import { useAuth } from "@clerk/nextjs";
import { useMemo } from "react";

const useMyLangGraphRuntime = () => {
  const threadListItemRuntime = useThreadListItemRuntime();
  
  const runtime = useLangGraphRuntime({
    stream: async function* (messages) {
      const { externalId } = await threadListItemRuntime.initialize();
      if (!externalId) throw new Error("Thread not found");

      return sendMessage({
        threadId: externalId,
        messages,
      });
    },

    onSwitchToThread: async (externalId) => {
      const state = await getThreadState(externalId);
      return {
        messages:
          (state.values as { messages?: LangChainMessage[] }).messages ?? []
      };
    },
  });

  return runtime;
};

export function MyRuntimeProvider({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const { getToken } = useAuth();

  const cloud = useMemo(
    () =>
      new AssistantCloud({
        baseUrl: process.env.NEXT_PUBLIC_ASSISTANT_BASE_URL!,
        authToken: async () => getToken({ template: "assistant-ui" }),
      }),
    [getToken],
  );

  const runtime = useCloudThreadListRuntime({
    cloud,
    runtimeHook: useMyLangGraphRuntime,
    create: async () => {
      const { thread_id } = await createThread();
      return { externalId: thread_id };
    },
  });

  return (
    <AssistantRuntimeProvider runtime={runtime}>
      {children}
    </AssistantRuntimeProvider>
  );
}
```

<Callout type="info">
  For Clerk authentication, configure the `"assistant-ui"` token template in your Clerk dashboard.
</Callout>

</Tab>

</Tabs>

<Callout type="info">
  The `useMyLangGraphRuntime` hook is extracted into a separate function because it will be mounted multiple times, once per active thread.
</Callout>

</Step>

<Step>

### Add Thread UI Components

Install the thread list component:

```bash
npx assistant-ui add thread-list
```

Then add it to your application layout:

```tsx title="app/chat/page.tsx"
import { Thread } from "@/components/assistant-ui/thread";
import { ThreadList } from "@/components/assistant-ui/thread-list";

export default function ChatPage() {
  return (
    <div className="grid h-dvh grid-cols-[250px_1fr] gap-x-2">
      <ThreadList />
      <Thread />
    </div>
  );
}
```

</Step>

</Steps>

## Authentication

The examples above show two authentication modes:

- **Anonymous**: Suitable for demos and prototypes. Creates a browser session-based user ID.
- **Authenticated**: For production use with user accounts. The authenticated example uses [Clerk](https://clerk.com/), but you can integrate any auth provider.

For other authentication providers or custom implementations, see the [Cloud Authorization](/docs/cloud/authorization) guide.

## Next Steps

- Learn about [LangGraph runtime setup](/docs/runtimes/langgraph) for your application
- Explore [ThreadListRuntime](/docs/api-reference/runtimes/ThreadListRuntime) for advanced thread management
- Check out the [LangGraph example](https://github.com/assistant-ui/assistant-ui/tree/main/examples/with-langgraph) on GitHub



================================================
FILE: apps/docs/content/docs/cloud/persistence/meta.json
================================================
{
  "title": "Chat History",
  "pages": ["ai-sdk", "langgraph"]
}



================================================
FILE: apps/docs/content/docs/concepts/architecture.mdx
================================================
---
title: Architecture
---

import Image from "next/image";
import architecture from "@/assets/docs/architecture.png";

### Architecture

`assistant-ui` consists of two parts, **_Runtime_** and **_UI Components_**.

<Image
  src={architecture}
  alt="Architecture diagram, UI components connected to the runtime layer and the runtime layer connected to LLM and tools"
  height={300}
  className="mx-auto my-2 dark:hue-rotate-180 dark:invert"
/>

The Runtime and UI Components each require independent setup and both must be set up.



================================================
FILE: apps/docs/content/docs/concepts/meta.json
================================================
{
  "title": "Concepts",
  "pages": ["architecture", "runtime-layer"]
}



================================================
FILE: apps/docs/content/docs/concepts/runtime-layer.mdx
================================================
---
title: Runtime Layer
---

assistant-ui components are full stack components. This means that they include both the UI presentation, but also logic to communicate with an external system. This logic is handled by the runtime layer and APIs.

You interact with the runtime layer in two ways:

- defining a runtime for your app
- using the runtime APIs to interact with the runtime

## Defining a runtime

assistant-ui ships with two low-level runtimes:

- `useLocalRuntime`
- `useExternalStoreRuntime`

Both of these runtimes let you implement your own runtime. The conceptual difference between the two is that `useLocalRuntime` takes ownership of the data layer, while `useExternalStoreRuntime` does not.

If you have a stateful API to integrate, use `useExternalStoreRuntime`, if you have a stateless API to integrate, use `useLocalRuntime`.

### Higher level runtimes

For many services and APIs, assistant-ui provides deeper integrations. These are built with the two low-level runtimes mentioned above.

- `useChatRuntime`: Connect to Vercel AI SDK backends
- `useVercelUseChatRuntime`: Integrate with Vercel AI SDK's `useChat` hook
- `useVercelUseAssistantRuntime`: Integrate with Vercel AI SDK's `useAssistant` hook (OpenAI Assistants API)
- `useVercelRSCRuntime`: Integrate with Vercel AI SDK React Server Components
- `useLangGraphRuntime`: Connect to LangGraph Cloud
- ...

### Runtime Providers

The following components accept a `runtime` prop:

- `AssistantRuntimeProvider`
- `Thread`

These components put the Runtime in the React Context, so that all child components can access the runtime.

### Runtime Adapters

Most runtimes accept additional adapters to configure extra integrations:

- ChatModelAdapter: Configures the backend API
- AttachmentAdapter: Configures the file/media attachment API
- SpeechSynthesisAdapter: Configures the speech API
- FeedbackAdapter: Configures the feedback API
- SuggestionAdapter: Configures dynamic suggestion generation based on conversation context

## Using the runtime APIs

The same API used by the assistant-ui components is also available to you. This allows you to build your own UI components and integrate them with the runtime layer.

### Runtime Hierarchy

The runtime API is nested as such:

import { File, Folder, Files } from "fumadocs-ui/components/files";

<Files>
  <Folder name="AssistantRuntime" defaultOpen>
    <Folder name="ThreadListRuntime" defaultOpen>
      <Folder name="ThreadRuntime" defaultOpen>
        <Folder name="MessageRuntime" defaultOpen>
          <Folder
            name="MessagePartRuntime (Text / Reasoning / Image / Audio / Tool-Call / UI)"
            defaultOpen
          ></Folder>
          <Folder name="MessageAttachmentRuntime" defaultOpen></Folder>
          <Folder name="EditComposerRuntime" defaultOpen>
            <Folder name="EditComposerAttachmentRuntime" defaultOpen></Folder>
          </Folder>
        </Folder>
        <Folder name="ThreadComposerRuntime" defaultOpen>
          <Folder name="ThreadComposerAttachmentRuntime" defaultOpen></Folder>
        </Folder>
      </Folder>
    </Folder>
  </Folder>
</Files>

The AssistantRuntime (which encompasses everything), is sometimes simply called `Runtime`.

### Runtime Context Provider Components

The following components provide the runtime APIs:

```tsx
// provides AssistantRuntime, ThreadListRuntime, ThreadRuntime, ComposerRuntime (ThreadComposer)
<AssistantRuntimeProvider runtime={runtime} />

// renders every message, provides MessageRuntime, ComposerRuntime (EditComposer)
<ThreadPrimitive.Messages components={{ Message, ... }} />

// renders every message part, provides MessagePartRuntime
<MessagePrimitive.Parts components={{ Text, Reasoning, Image, Audio, UI, tools }} />

// renders every attachment, provides AttachmentRuntime (Thread or EditComposer)
<ComposerPrimitive.Attachments components={{ Attachment, ... }} />

// renders every attachment, provides AtatchmentRuntime (Message)
<MessagePrimitive.Attachments components={{ Attachment, ... }} />

// provides a custom TextMessagePartRuntime
<TextMessagePartProvider text="Hello!" />
```

### Accessing runtime APIs

You can access the runtime APIs with react hooks:

```tsx
const runtime = useAssistantRuntime();
const threadRuntime = useThreadRuntime();
const messageRuntime = useMessageRuntime();
const MessagePartRuntime = useMessagePartRuntime();

// thread manager has no separate hook (1:1 relationship with assistant runtime)
const ThreadListRuntime = useAssistantRuntime().threads;

// composer runtime is multi-use
const composerRuntime = useComposerRuntime(); // refers to edit composer if available, otherwise thread composer

// thread manager has no separate hook (1:1 relationship with assistant runtime)
const threadComposer = useThreadRuntime().composer;

// thread manager has no separate hook (1:1 relationship with assistant runtime)
const editComposerRuntime = useMessageRuntime().composer;

// attachment runtime is multi-use
const attachmentRuntime = useAttachmentRuntime(); // refers to the closest attachment runtime
const threadComposerAttachmentRuntime = useThreadComposerAttachmentRuntime();
const editComposerAttachmentRuntime = useEditComposerAttachmentRuntime();
const messageAttachmentRuntime = useMessageAttachmentRuntime();
```

### Accessing runtime state

Most runtimes also expose a state through two methods `getState` and `subscribe`. The following helper hooks subscribe to the state, so that your component is updated when the state changes:

```tsx
useThreadList(); // get thread manager state
useThread(); // get thread state
useMessage(); // get message state
useMessagePart(); // get message part state
useComposer(); // get composer state
useThreadComposer(); // get thread composer state
useEditComposer(); // get edit composer state
useAttachment(); // get attachment state
useThreadComposerAttachment(); // get thread composer attachment state
useEditComposerAttachment(); // get edit composer attachment state
useMessageAttachment(); // get message attachment state
```

You might not want to subscribe to evey update. In that case, pass a callback selector to the hook:

```tsx
// only subscribe to role changes
const role = useMessage((state) => message.role);
```



================================================
FILE: apps/docs/content/docs/concepts/why.mdx
================================================
---
title: Why assistant-ui?
---

assistant-ui is a collection of powerful, modular primitives to build AI chat interfaces.

The modular approach means that you can incrementally adopt assistant-ui (e.g. use the backend connectors and bring your own components, or use the frontend compoents and bring your own backend).
You can also partially opt out of assistant-ui whenever you hit any limitation in the library.




================================================
FILE: apps/docs/content/docs/copilots/make-assistant-readable.mdx
================================================
---
title: makeAssistantVisible
---

`makeAssistantVisible` is a higher-order component (HOC) that makes React components "visible" by the assistant, allowing it to understand and interact with the component's HTML structure.

## Usage

```tsx
import { makeAssistantVisible } from "@assistant-ui/react";

const Button = ({ onClick, children }) => (
  <button onClick={onClick}>{children}</button>
);

// Basic usage - makes component HTML readable
const ReadableButton = makeAssistantVisible(Button);

// With clickable configuration
const ClickableButton = makeAssistantVisible(Button, {
  clickable: true, // Enables the click tool
});
```

## API Reference

### Parameters

- `Component`: The base React component to enhance
- `config`: Optional configuration object
  - `clickable`: When true, enables the assistant to programmatically click the component

### Behavior

The HOC will:

1. Make the component's HTML structure available to the assistant via the system context
2. Optionally provide a `click` tool if `clickable` is true
3. Handle nested readable components (only the outermost component's HTML is provided)
4. Forward refs and maintain component props

## Example

```tsx
// Create a readable form input
const Input = ({ label, ...props }) => (
  <div>
    <label>{label}</label>
    <input {...props} />
  </div>
);

const ReadableInput = makeAssistantVisible(Input);

// Use in your component
function Form() {
  return (
    <ReadableInput label="Email" type="email" placeholder="Enter your email" />
  );
}
```

## Technical Details

When a component is made readable:

- It's wrapped in a `ReadableContext.Provider` to handle nesting
- The component's `outerHTML` is provided as system context
- If `clickable` is true, a unique `data-click-id` is added and a `click` tool is provided
- The click tool uses `querySelector` and simulates a click event
- All props and refs are properly forwarded to maintain component functionality



================================================
FILE: apps/docs/content/docs/copilots/make-assistant-tool-ui.mdx
================================================
---
title: makeAssistantToolUI
---

import { ParametersTable } from "@/components/docs";

The `makeAssistantToolUI` utility is used to register a tool UI component with the Assistant.

## Usage

```tsx
import { makeAssistantToolUI } from "@assistant-ui/react";

const MyToolUI = makeAssistantToolUI({
  toolName: "myTool",
  render: ({ args, result, status }) => {
    // render your tool UI here
  },
});
```

## API

### Parameters

<ParametersTable
  type="AssistantToolUIProps<TArgs, TResult>"
  parameters={[
    {
      name: "toolName",
      type: "string",
      description:
        "The name of the tool. This must match the name of the tool defined in the assistant.",
    },
    {
      name: "render",
      type: "ComponentType<ToolCallMessagePartProps<TArgs, TResult>>",
      description:
        "A React component that renders the tool UI. Receives the following props:",
      required: true,
      children: [
        {
          type: "ToolCallMessagePartProps<TArgs, TResult>",
          parameters: [
            {
              name: "type",
              type: '"tool-call"',
              description: "The message part type",
            },
            {
              name: "toolCallId",
              type: "string",
              description: "Unique identifier for this tool call",
            },
            {
              name: "toolName",
              type: "string",
              description: "The name of the tool being called",
            },
            {
              name: "args",
              type: "TArgs",
              description: "The arguments passed to the tool",
            },
            {
              name: "argsText",
              type: "string",
              description: "String representation of the arguments",
            },
            {
              name: "result",
              type: "TResult | undefined",
              description: "The result of the tool execution (if complete)",
            },
            {
              name: "isError",
              type: "boolean | undefined",
              description: "Whether the result is an error",
            },
            {
              name: "status",
              type: "ToolCallMessagePartStatus",
              description:
                'The execution status object with a type property: "running", "complete", "incomplete", or "requires_action"',
            },
            {
              name: "addResult",
              type: "(result: TResult | ToolResponse<TResult>) => void",
              description:
                "Function to add a result (useful for human-in-the-loop tools)",
            },
            {
              name: "artifact",
              type: "unknown",
              description:
                "Optional artifact data associated with the tool call",
            },
          ],
        },
      ],
    },
  ]}
/>

### Returns

A React functional component that should be included in your component tree. This component doesn't render anything itself, but it registers the tool UI with the Assistant.

## Example

```tsx
import { makeAssistantToolUI } from "@assistant-ui/react";
import { AssistantRuntimeProvider } from "@assistant-ui/react";

const GetWeatherUI = makeAssistantToolUI({
  toolName: "get_weather",
  render: ({ args, result, status }) => {
    if (status.type === "requires_action")
      return <p>Getting weather for {args.location}...</p>;
    if (status.type === "running") return <p>Loading...</p>;
    if (status.type === "incomplete" && status.reason === "error")
      return <p>Error getting weather.</p>;
    if (status.type === "complete")
      return <p>The weather is {result.weather}.</p>;
    return null;
  },
});

function App() {
  return (
    <AssistantRuntimeProvider>
      {/* ...your other components */}
      <GetWeatherUI />
    </AssistantRuntimeProvider>
  );
}
```

This example shows how to create a simple UI for a `get_weather` tool. The UI will display different messages depending on the status of the tool execution.



================================================
FILE: apps/docs/content/docs/copilots/make-assistant-tool.mdx
================================================
---
title: makeAssistantTool
---

import { ParametersTable } from "@/components/docs";

`makeAssistantTool` creates a React component that provides a tool to the assistant. This is useful for defining reusable tools that can be composed into your application.

## Usage

```tsx
import { makeAssistantTool, tool } from "@assistant-ui/react";
import { z } from "zod";

// Define the tool using the tool() helper
const submitForm = tool({
  parameters: z.object({
    email: z.string().email(),
    name: z.string(),
  }),
  execute: async ({ email, name }) => {
    // Implementation
    return { success: true };
  },
});

// Create a tool component
const SubmitFormTool = makeAssistantTool({
  ...submitForm,
  toolName: "submitForm",
});

// Use in your component
function Form() {
  return (
    <div>
      <form>{/* form fields */}</form>
      <SubmitFormTool />
    </div>
  );
}
```

## API Reference

### Parameters

<ParametersTable
  type="AssistantToolProps<TArgs, TResult>"
  parameters={[
    {
      name: "toolName",
      type: "string",
      description: "The unique identifier for the tool",
      required: true,
    },
    {
      name: "parameters",
      type: "StandardSchemaV1<TArgs> | JSONSchema7",
      description:
        "Schema defining the tool's parameters (typically a Zod schema)",
      required: true,
    },
    {
      name: "execute",
      type: "(args: TArgs, context: ToolExecutionContext) => TResult | Promise<TResult>",
      description:
        "Function that implements the tool's behavior (required for frontend tools)",
      required: true,
    },
    {
      name: "description",
      type: "string",
      description: "Optional description of the tool's purpose",
    },
    {
      name: "render",
      type: "ComponentType<ToolCallMessagePartProps<TArgs, TResult>>",
      description:
        "Optional custom UI component for rendering the tool execution. Receives the following props:",
      children: [
        {
          type: "ToolCallMessagePartProps<TArgs, TResult>",
          parameters: [
            {
              name: "type",
              type: '"tool-call"',
              description: "The message part type",
            },
            {
              name: "toolCallId",
              type: "string",
              description: "Unique identifier for this tool call",
            },
            {
              name: "toolName",
              type: "string",
              description: "The name of the tool being called",
            },
            {
              name: "args",
              type: "TArgs",
              description: "The arguments passed to the tool",
            },
            {
              name: "argsText",
              type: "string",
              description: "String representation of the arguments",
            },
            {
              name: "result",
              type: "TResult | undefined",
              description: "The result of the tool execution (if complete)",
            },
            {
              name: "isError",
              type: "boolean | undefined",
              description: "Whether the result is an error",
            },
            {
              name: "status",
              type: "ToolCallMessagePartStatus",
              description:
                'The execution status object with a type property: "running", "complete", "incomplete", or "requires_action"',
            },
            {
              name: "addResult",
              type: "(result: TResult | ToolResponse<TResult>) => void",
              description:
                "Function to add a result (useful for human-in-the-loop tools)",
            },
            {
              name: "artifact",
              type: "unknown",
              description:
                "Optional artifact data associated with the tool call",
            },
          ],
        },
      ],
    },
  ]}
/>

### Returns

Returns a React component that:

- Provides the tool to the assistant when mounted
- Automatically removes the tool when unmounted
- Renders nothing in the DOM (returns null)

## Example with Multiple Tools

```tsx
import { makeAssistantTool, tool } from "@assistant-ui/react";
import { z } from "zod";

// Define tools
const validateEmail = tool({
  parameters: z.object({
    email: z.string(),
  }),
  execute: ({ email }) => {
    const isValid = email.includes("@");
    return { isValid, reason: isValid ? "Valid email" : "Missing @" };
  },
});

const sendEmail = tool({
  parameters: z.object({
    to: z.string().email(),
    subject: z.string(),
    body: z.string(),
  }),
  execute: async (params) => {
    // Tool logic
    return { sent: true };
  },
});

// Create tool components
const EmailValidator = makeAssistantTool({
  ...validateEmail,
  toolName: "validateEmail",
});
const EmailSender = makeAssistantTool({
  ...sendEmail,
  toolName: "sendEmail",
});

// Use together
function EmailForm() {
  return (
    <div>
      <form>{/* form fields */}</form>
      <EmailValidator />
      <EmailSender />
    </div>
  );
}
```

## Best Practices

1. **Parameter Validation**

   - Always use Zod schemas to define parameters
   - Be specific about parameter types and constraints
   - Add helpful error messages to schema validations

2. **Error Handling**

   - Return meaningful error messages
   - Consider returning partial results when possible
   - Handle async errors appropriately

3. **Composition**
   - Break complex tools into smaller, focused ones
   - Consider tool dependencies and interactions
   - Use multiple tools together for complex functionality



================================================
FILE: apps/docs/content/docs/copilots/meta.json
================================================
{
  "title": "Copilots",
  "pages": [
    "motivation",
    "make-assistant-visible",
    "make-assistant-tool",
    "make-assistant-tool-ui",
    "use-assistant-instructions",
    "model-context"
  ]
}



================================================
FILE: apps/docs/content/docs/copilots/model-context.mdx
================================================
---
title: Model Context
---

Model Context is the foundation of intelligence in assistant-ui components. It provides configuration and capabilities to the assistant through a context provider system.

## Core Concepts

### System Instructions

System instructions define the base behavior and knowledge available to the assistant. These can be provided in several ways:

```tsx
import {
  useAssistantInstructions,
  makeAssistantVisible,
} from "@assistant-ui/react";

// Via useAssistantInstructions
useAssistantInstructions("You are a helpful assistant...");

// Via makeAssistantVisible
const ReadableComponent = makeAssistantVisible(MyComponent);
// Automatically provides component HTML as system context
```

### Tools

Tools are functions that the assistant can use to interact with your application. They can be provided through various mechanisms:

```tsx
import {
  makeAssistantVisible,
  makeAssistantTool,
  tool,
  useAssistantRuntime,
} from "@assistant-ui/react";
import { z } from "zod";

// Via makeAssistantVisible's clickable option
const ClickableButton = makeAssistantVisible(Button, {
  clickable: true, // Provides a click tool
});

// Via makeAssistantTool
const submitForm = tool({
  parameters: z.object({
    email: z.string().email(),
    name: z.string(),
  }),
  execute: async ({ email, name }) => {
    // Implementation
    return { success: true };
  },
});

const SubmitFormTool = makeAssistantTool({
  ...submitForm,
  toolName: "submitForm"
});

// Use in your component
function Form() {
  return (
    <div>
      <form>{/* form fields */}</form>
      <SubmitFormTool />
    </div>
  );
}
```

## Context Provider System

The context provider system allows components to contribute to the model context. Here's a typical usage pattern:

```tsx
import { useAssistantRuntime, tool } from "@assistant-ui/react";
import { useEffect } from "react";
import { z } from "zod";

function MyComponent() {
  const assistantRuntime = useAssistantRuntime();

  // Define tool using the tool() helper
  const myTool = tool({
    parameters: z.object({
      query: z.string(),
    }),
    execute: async ({ query }) => {
      const result = await searchDatabase(query);
      return { result };
    },
  });

  useEffect(() => {
    // Register context provider
    return assistantRuntime.registerModelContextProvider({
      getModelContext: () => ({
        system: "You are a helpful search assistant...",
        tools: { myTool },
      }),
    });
  }, [assistantRuntime]); // Re-register if runtime changes

  return <div>{/* component content */}</div>;
}
```

### Provider Composition

Multiple providers can be registered, and their contexts will be composed:

- System instructions are concatenated
- Tool sets are merged
- Nested readable components only contribute their context at the outermost level

## Best Practices

1. **System Instructions**

   - Keep them focused and specific to the component's purpose
   - Use useAssistantInstructions for explicit instructions
   - Let makeAssistantVisible handle component structure

2. **Tools**

   - Use the tool() helper to define tool schemas and behavior
   - Prefer makeAssistantTool for reusable tools
   - Handle errors gracefully
   - Consider async operations and loading states
   - Use the built-in click tool when possible

3. **Context Management**
   - Register providers in useEffect for proper cleanup
   - Clean up providers when components unmount
   - Avoid deeply nested readable components
   - Consider performance implications of large HTML structures



================================================
FILE: apps/docs/content/docs/copilots/motivation.mdx
================================================
---
title: Intelligent Components
---

React revolutionized web development with components that combine logic, structure, and style. Now, with assistant-ui, we're adding a fourth dimension: intelligence. Let's learn how to build smart components through a practical banking app example.

## The Evolution of Components

Traditional React components combine three elements:

```tsx
// Traditional React Component
function TransactionHistory({ transactions }) {
  // 1. Logic (JavaScript/TypeScript)
  const handleRefund = (transactionId) => {
    // Process refund...
  };

  // 2. Structure (JSX/TSX)
  return (
    // 3. Style (CSS via className)
    <div className="transaction-list">
      {transactions.map((transaction) => (
        <div key={transaction.id} className="transaction-item">
          <span>${transaction.amount}</span>
          <span>{transaction.merchant}</span>
          <button onClick={() => handleRefund(transaction.id)}>
            Request Refund
          </button>
        </div>
      ))}
    </div>
  );
}
```

## Adding Intelligence

With assistant-ui, we can enhance this component with intelligence using four powerful APIs:

### 1. Making Components Readable (makeAssistantVisible)

First, let's make our buttons "readable" and interactive:

```tsx
import { makeAssistantVisible } from "@assistant-ui/react";

// Make the refund button intelligent
const SmartButton = makeAssistantVisible(
  ({ onClick, children }) => <button onClick={onClick}>{children}</button>,
  {
    clickable: true, // Allow the assistant to click the button
  },
);

function TransactionHistory({ transactions }) {
  return (
    <div className="transaction-list">
      {transactions.map((transaction) => (
        <div key={transaction.id} className="transaction-item">
          <span>${transaction.amount}</span>
          <span>{transaction.merchant}</span>
          <SmartButton onClick={() => handleRefund(transaction.id)}>
            Request Refund
          </SmartButton>
        </div>
      ))}
    </div>
  );
}
```

Now the assistant can:

- Understand the transaction history structure
- Interact with refund buttons
- Help users manage their transactions

### 2. Adding System Instructions (useAssistantInstructions)

Next, let's give the assistant specific instructions about its role:

```tsx
import { useAssistantInstructions } from "@assistant-ui/react";

function SmartTransactionHistory() {
  useAssistantInstructions(`
    You are a helpful banking assistant that:
    1. Helps users understand their transactions
    2. Explains refund policies
    3. Identifies suspicious transactions
    4. Guides users through the refund process
  `);

  return <TransactionHistory transactions={transactions} />;
}
```

### 3. Creating Tools (makeAssistantTool)

Let's add transaction-specific tools for the assistant:

```tsx
import { makeAssistantTool, tool } from "@assistant-ui/react";
import { z } from "zod";

// Define a tool to analyze transactions
const analyzeTransaction = tool({
  parameters: z.object({
    transactionId: z.string(),
    merchantName: z.string(),
  }),
  execute: async ({ transactionId, merchantName }) => {
    // Analyze transaction patterns, merchant reputation, etc.
    return {
      isSuspicious: false,
      merchantRating: 4.5,
      similarTransactions: 3,
      refundEligible: true,
    };
  },
});

// Create a tool component
const TransactionAnalyzer = makeAssistantTool({
  ...analyzeTransaction,
  toolName: "analyzeTransaction",
});

function SmartTransactionHistory() {
  // Previous instructions...
  return (
    <>
      <TransactionHistory transactions={transactions} />
      <TransactionAnalyzer />
    </>
  );
}
```

### 4. Adding Custom Context (Model Context)

Finally, let's add dynamic context based on the user's transaction patterns:

```tsx
import { useAssistantRuntime } from "@assistant-ui/react";
import { useEffect } from "react";

function SmartTransactionHistory({ userProfile }) {
  const assistantRuntime = useAssistantRuntime();

  useEffect(() => {
    return assistantRuntime.registerModelContextProvider({
      getModelContext: () => ({
        system: `
          User spending patterns:
          - Average transaction: ${userProfile.avgTransaction}
          - Common merchants: ${userProfile.frequentMerchants.join(", ")}
          - Refund history: ${userProfile.refundCount} requests
        `,
      }),
    });
  }, [assistantRuntime, userProfile]);

  // Previous components...
}
```

## The Result: An Intelligent Banking Experience

This enhanced component now provides:

- Natural language interaction with transaction history
- Contextual help for understanding transactions
- Automated transaction analysis
- Smart refund assistance

The assistant can now:

1. Read and understand transaction details
2. Follow banking-specific guidelines
3. Use tools to analyze transactions
4. Access user patterns for personalized help

This creates a more intuitive and safer banking experience while maintaining the familiar React component model.

## Next Steps

Learn more about each API:

- [makeAssistantVisible](make-assistant-readable) for component understanding
- [makeAssistantTool](make-assistant-tool) for transaction analysis
- [useAssistantInstructions](use-assistant-instructions) for behavior guidance
- [Model Context](model-context) for dynamic context management



================================================
FILE: apps/docs/content/docs/copilots/use-assistant-instructions.mdx
================================================
---
title: useAssistantInstructions
---

`useAssistantInstructions` is a React hook that allows you to set system instructions for your assistant-ui components.

## Usage

```tsx
import { useAssistantInstructions } from "@assistant-ui/react";

function MyComponent() {
  // Simple string usage
  useAssistantInstructions("You are a helpful form assistant...");

  // With configuration object
  useAssistantInstructions({
    instruction: "You are a helpful form assistant...",
    disabled: false, // Optional: disable the instructions
  });

  return <div>My Component</div>;
}
```

## API Reference

### Parameters

The hook accepts either:

- A string containing the system instructions
- A configuration object with:
  - `instruction`: The system instructions
  - `disabled`: Optional boolean to disable the instructions

### Behavior

The hook will:

1. Register the provided instructions as system instructions in the model context
2. Automatically clean up when the component unmounts
3. Update when the instructions change
4. Do nothing if disabled is set to true

## Example

```tsx
function SmartForm() {
  useAssistantInstructions({
    instruction: `
      You are a form assistant that:
      - Validates user input
      - Provides helpful suggestions
      - Explains any errors
      - Guides users through complex fields
    `,
  });

  return <form>{/* Your form fields here */}</form>;
}
```



================================================
FILE: apps/docs/content/docs/guides/Attachments.mdx
================================================
---
title: Attachments
---

import { AttachmentSample } from "../../../components/samples/attachment-sample";
import { Steps, Step } from "fumadocs-ui/components/steps";
import { Callout } from "fumadocs-ui/components/callout";

Enable users to attach files to their messages, enhancing conversations with images, documents, and other content.

<AttachmentSample />

## Overview

The attachment system in assistant-ui provides a flexible framework for handling file uploads in your AI chat interface. It consists of:

- **Attachment Adapters**: Backend logic for processing attachment files
- **UI Components**: Pre-built components for attachment display and interaction
- **Runtime Integration**: Seamless integration with all assistant-ui runtimes

## Getting Started

<Steps>
  <Step>

### Install UI Components

First, add the attachment UI components to your project:

```sh
npx shadcn@latest add "https://r.assistant-ui.com/attachment"
```

This adds `/components/assistant-ui/attachment.tsx` to your project.

<Callout type="tip">
  **Next steps:** Feel free to adjust these auto-generated components (styling,
  layout, behavior) to match your application's design system.
</Callout>

  </Step>
  <Step>

### Configure Attachment Adapter

Set up an attachment adapter in your runtime provider:

```tsx title="/app/MyRuntimeProvider.tsx"
import { useChatRuntime } from "@assistant-ui/react-ai-sdk";
import {
  CompositeAttachmentAdapter,
  SimpleImageAttachmentAdapter,
  SimpleTextAttachmentAdapter,
} from "@assistant-ui/react";

const runtime = useChatRuntime({
  api: "/api/chat",
  adapters: {
    attachments: new CompositeAttachmentAdapter([
      new SimpleImageAttachmentAdapter(),
      new SimpleTextAttachmentAdapter(),
    ]),
  },
});
```

  </Step>
  <Step>

### Add UI Components

Integrate attachment components into your chat interface:

```tsx title="/components/assistant-ui/thread.tsx"
// In your Composer component
import {
  ComposerAttachments,
  ComposerAddAttachment,
} from "@/components/assistant-ui/attachment";

const Composer = () => {
  return (
    <ComposerPrimitive.Root>
      <ComposerAttachments />
      <ComposerAddAttachment />
      <ComposerPrimitive.Input placeholder="Type a message..." />
    </ComposerPrimitive.Root>
  );
};

// In your UserMessage component
import { UserMessageAttachments } from "@/components/assistant-ui/attachment";

const UserMessage = () => {
  return (
    <MessagePrimitive.Root>
      <UserMessageAttachments />
      <MessagePrimitive.Parts />
    </MessagePrimitive.Root>
  );
};
```

  </Step>
</Steps>

## Built-in Attachment Adapters

### SimpleImageAttachmentAdapter

Handles image files and converts them to data URLs for display in the chat UI. By default, images are shown inline but not sent to the LLM - use the VisionImageAdapter example above to send images to vision-capable models.

```tsx
const imageAdapter = new SimpleImageAttachmentAdapter();
// Accepts: image/* (JPEG, PNG, GIF, etc.)
// Output: { type: "image", url: "data:image/..." }
```

### SimpleTextAttachmentAdapter

Processes text files and wraps content in formatted tags:

```tsx
const textAdapter = new SimpleTextAttachmentAdapter();
// Accepts: text/plain, text/html, text/markdown, etc.
// Output: Content wrapped in <attachment>...</attachment> tags
```

### CompositeAttachmentAdapter

Combines multiple adapters to support various file types:

```tsx
const compositeAdapter = new CompositeAttachmentAdapter([
  new SimpleImageAttachmentAdapter(),
  new SimpleTextAttachmentAdapter(),
  // Add more adapters as needed
]);
```

## Creating Custom Attachment Adapters

Build your own adapters for specialized file handling. Below are complete examples for common use cases.

### Vision-Capable Image Adapter

Send images to vision-capable LLMs like GPT-4V, Claude 3, or Gemini Pro Vision:

```tsx
import {
  AttachmentAdapter,
  PendingAttachment,
  CompleteAttachment,
} from "@assistant-ui/react";

class VisionImageAdapter implements AttachmentAdapter {
  accept = "image/jpeg,image/png,image/webp,image/gif";

  async add({ file }: { file: File }): Promise<PendingAttachment> {
    // Validate file size (e.g., 20MB limit for most LLMs)
    const maxSize = 20 * 1024 * 1024; // 20MB
    if (file.size > maxSize) {
      throw new Error("Image size exceeds 20MB limit");
    }

    // Return pending attachment while processing
    return {
      id: crypto.randomUUID(),
      type: "image",
      name: file.name,
      file,
      status: { type: "running" },
    };
  }

  async send(attachment: PendingAttachment): Promise<CompleteAttachment> {
    // Convert image to base64 data URL
    const base64 = await this.fileToBase64DataURL(attachment.file);

    // Return in assistant-ui format with image content
    return {
      id: attachment.id,
      type: "image",
      name: attachment.name,
      content: [
        {
          type: "image",
          image: base64, // data:image/jpeg;base64,... format
        },
      ],
      status: { type: "complete" },
    };
  }

  async remove(attachment: PendingAttachment): Promise<void> {
    // Cleanup if needed (e.g., revoke object URLs if you created any)
  }

  private async fileToBase64DataURL(file: File): Promise<string> {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = () => {
        // FileReader result is already a data URL
        resolve(reader.result as string);
      };
      reader.onerror = reject;
      reader.readAsDataURL(file);
    });
  }
}
```

### PDF Document Adapter

Handle PDF files by extracting text or converting to base64 for processing:

```tsx
import {
  AttachmentAdapter,
  PendingAttachment,
  CompleteAttachment,
} from "@assistant-ui/react";

class PDFAttachmentAdapter implements AttachmentAdapter {
  accept = "application/pdf";

  async add({ file }: { file: File }): Promise<PendingAttachment> {
    // Validate file size
    const maxSize = 10 * 1024 * 1024; // 10MB limit
    if (file.size > maxSize) {
      throw new Error("PDF size exceeds 10MB limit");
    }

    return {
      id: crypto.randomUUID(),
      type: "document",
      name: file.name,
      file,
      status: { type: "running" },
    };
  }

  async send(attachment: PendingAttachment): Promise<CompleteAttachment> {
    // Option 1: Extract text from PDF (requires pdf parsing library)
    // const text = await this.extractTextFromPDF(attachment.file);

    // Option 2: Convert to base64 for API processing
    const base64Data = await this.fileToBase64(attachment.file);

    return {
      id: attachment.id,
      type: "document",
      name: attachment.name,
      content: [
        {
          type: "text",
          text: `[PDF Document: ${attachment.name}]\nBase64 data: ${base64Data.substring(0, 50)}...`,
        },
      ],
      status: { type: "complete" },
    };
  }

  async remove(attachment: PendingAttachment): Promise<void> {
    // Cleanup if needed
  }

  private async fileToBase64(file: File): Promise<string> {
    const arrayBuffer = await file.arrayBuffer();
    const bytes = new Uint8Array(arrayBuffer);
    let binary = "";
    bytes.forEach((byte) => {
      binary += String.fromCharCode(byte);
    });
    return btoa(binary);
  }

  // Optional: Extract text from PDF using a library like pdf.js
  private async extractTextFromPDF(file: File): Promise<string> {
    // Implementation would use pdf.js or similar
    // This is a placeholder
    return "Extracted PDF text content";
  }
}
```

## Using Custom Adapters

### With LocalRuntime

When using `LocalRuntime`, you need to handle images in your `ChatModelAdapter` (the adapter that connects to your AI backend):

```tsx
import { useLocalRuntime, ChatModelAdapter } from "@assistant-ui/react";

// This adapter connects LocalRuntime to your AI backend
const MyModelAdapter: ChatModelAdapter = {
  async run({ messages, abortSignal }) {
    // Convert messages to format expected by your vision-capable API
    const formattedMessages = messages.map((msg) => {
      if (
        msg.role === "user" &&
        msg.content.some((part) => part.type === "image")
      ) {
        // Format for GPT-4V or similar vision models
        return {
          role: "user",
          content: msg.content.map((part) => {
            if (part.type === "text") {
              return { type: "text", text: part.text };
            }
            if (part.type === "image") {
              return {
                type: "image_url",
                image_url: { url: part.image },
              };
            }
            return part;
          }),
        };
      }

      // Regular text messages
      return {
        role: msg.role,
        content: msg.content
          .filter((c) => c.type === "text")
          .map((c) => c.text)
          .join("\n"),
      };
    });

    // Send to your vision-capable API
    const response = await fetch("/api/vision-chat", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ messages: formattedMessages }),
      signal: abortSignal,
    });

    const data = await response.json();
    return {
      content: [{ type: "text", text: data.message }],
    };
  },
};

// Create runtime with vision image adapter
const runtime = useLocalRuntime(MyModelAdapter, {
  adapters: {
    attachments: new VisionImageAdapter(),
  },
});
```

### With Vercel AI SDK

If you're using the Vercel AI SDK, images are handled automatically through experimental attachments:

```tsx
// In your API route
import { streamText } from "ai";
import { openai } from "@ai-sdk/openai";

export async function POST(req: Request) {
  const { messages } = await req.json();

  const result = streamText({
    model: openai("gpt-4-vision-preview"),
    messages: messages.map((msg) => {
      if (msg.experimental_attachments?.length) {
        // Images are automatically formatted for the model
        return {
          ...msg,
          experimental_attachments: msg.experimental_attachments,
        };
      }
      return msg;
    }),
  });

  return result.toDataStreamResponse();
}
```

## Advanced Features

### Progress Updates

Provide real-time upload progress using async generators:

```tsx
class UploadAttachmentAdapter implements AttachmentAdapter {
  accept = "*/*";

  async *add({ file }: { file: File }) {
    const id = generateId();

    // Initial pending state
    yield {
      id,
      type: "file",
      name: file.name,
      file,
      status: { type: "running", progress: 0 },
    } as PendingAttachment;

    // Simulate upload progress
    for (let progress = 10; progress <= 90; progress += 10) {
      await new Promise((resolve) => setTimeout(resolve, 100));

      yield {
        id,
        type: "file",
        name: file.name,
        file,
        status: { type: "running", progress },
      } as PendingAttachment;
    }

    // Return final pending state
    return {
      id,
      type: "file",
      name: file.name,
      file,
      status: { type: "running", progress: 100 },
    } as PendingAttachment;
  }

  async send(attachment: PendingAttachment): Promise<CompleteAttachment> {
    // Upload the file and return complete attachment
    const url = await this.uploadFile(attachment.file);

    return {
      id: attachment.id,
      type: attachment.type,
      name: attachment.name,
      content: [
        {
          type: "file",
          data: url, // or base64 data
          mimeType: attachment.file.type,
        },
      ],
      status: { type: "complete" },
    };
  }

  async remove(attachment: PendingAttachment): Promise<void> {
    // Cleanup logic
  }

  private async uploadFile(file: File): Promise<string> {
    // Your upload logic here
    return "https://example.com/file-url";
  }
}
```

### Validation and Error Handling

Implement robust validation in your adapters:

```tsx
class ValidatedImageAdapter implements AttachmentAdapter {
  accept = "image/*";
  maxSizeBytes = 5 * 1024 * 1024; // 5MB

  async add({ file }: { file: File }): Promise<PendingAttachment> {
    // Validate file size
    if (file.size > this.maxSizeBytes) {
      return {
        id: generateId(),
        type: "image",
        name: file.name,
        file,
        status: {
          type: "incomplete",
          reason: "error",
          error: new Error("File size exceeds 5MB limit"),
        },
      };
    }

    // Validate image dimensions
    try {
      const dimensions = await this.getImageDimensions(file);
      if (dimensions.width > 4096 || dimensions.height > 4096) {
        throw new Error("Image dimensions exceed 4096x4096");
      }
    } catch (error) {
      return {
        id: generateId(),
        type: "image",
        name: file.name,
        file,
        status: {
          type: "incomplete",
          reason: "error",
          error,
        },
      };
    }

    // Return valid attachment
    return {
      id: generateId(),
      type: "image",
      name: file.name,
      file,
      status: { type: "running" },
    };
  }

  private async getImageDimensions(file: File) {
    // Implementation to check image dimensions
  }
}
```

### Multiple File Selection

Enable multi-file selection with custom limits:

```tsx
const composer = useComposer();

const handleMultipleFiles = async (files: FileList) => {
  const maxFiles = 5;
  const filesToAdd = Array.from(files).slice(0, maxFiles);

  for (const file of filesToAdd) {
    await composer.addAttachment({ file });
  }
};
```

## Backend Integration

### With Vercel AI SDK

Process attachments in your API route:

```tsx title="/app/api/chat/route.ts"
import { streamText } from "ai";
import { openai } from "@ai-sdk/openai";

export async function POST(req: Request) {
  const { messages } = await req.json();

  // Process messages with attachments
  const processedMessages = messages.map((msg) => {
    if (msg.role === "user" && msg.experimental_attachments) {
      // Handle attachments
      const attachmentContent = msg.experimental_attachments
        .map((att) => {
          if (att.contentType.startsWith("image/")) {
            return `[Image: ${att.name}]`;
          }
          return att.content;
        })
        .join("\n");

      return {
        ...msg,
        content: `${msg.content}\n\nAttachments:\n${attachmentContent}`,
      };
    }
    return msg;
  });

  const result = streamText({
    model: openai("gpt-4o"),
    messages: processedMessages,
  });

  return result.toDataStreamResponse();
}
```

### Custom Backend Handling

Implement your own attachment processing:

```tsx
// In your attachment adapter
class ServerUploadAdapter implements AttachmentAdapter {
  async send(attachment: PendingAttachment): Promise<CompleteAttachment> {
    const formData = new FormData();
    formData.append("file", attachment.file);

    const response = await fetch("/api/upload", {
      method: "POST",
      body: formData,
    });

    const { url, id } = await response.json();

    return {
      id,
      type: attachment.type,
      name: attachment.name,
      content: [
        {
          type: "image",
          url,
        },
      ],
      status: { type: "complete" },
    };
  }
}
```

## Runtime Support

Attachments work with all assistant-ui runtimes:

- **AI SDK Runtime**: `useChatRuntime`, `useAssistantRuntime`
- **External Store**: `useExternalStoreRuntime`
- **LangGraph**: `useLangGraphRuntime`
- **Custom Runtimes**: Any runtime implementing the attachment interface

<Callout type="tip">
  The attachment system is designed to be extensible. You can create adapters
  for any file type, integrate with cloud storage services, or implement custom
  processing logic to fit your specific needs.
</Callout>

## Best Practices

1. **File Size Limits**: Always validate file sizes to prevent memory issues
2. **Type Validation**: Verify file types match your `accept` pattern
3. **Error Handling**: Provide clear error messages for failed uploads
4. **Progress Feedback**: Show upload progress for better UX
5. **Security**: Validate and sanitize file content before processing
6. **Accessibility**: Ensure attachment UI is keyboard navigable

## Resources

- [Attachment UI Components](/docs/ui/Attachment) - UI implementation details
- [API Reference](/docs/api-reference) - Detailed type definitions



================================================
FILE: apps/docs/content/docs/guides/Branching.mdx
================================================
---
title: Message Branching
---

import { BranchingSample } from "../../../components/samples/branching-sample";

Switch between different conversation branches.

<BranchingSample />

A new branch is created when:

- a user message is edited
- an assistant message is reloaded

Branches are automatically tracked by assistant-ui by observing changes to the `messages` array.

## Enabling branch support

You can show a branch picker by using `BranchPickerPrimitive`.

```tsx {1, 8, 15-30}
import { BranchPickerPrimitive } from "@assistant-ui/react";


const Message = () => {
  return (
    <MessagePrimitive.Root>
      ...
      <BranchPicker /> {/* <-- show the branch picker */}
      ...
    </EditComposerPrimitive.Root>
  );
};


const BranchPicker = () => {
  return (
    <BranchPickerPrimitive.Root hideWhenSingleBranch>
      <BranchPickerPrimitive.Previous />
      <BranchPickerPrimitive.Number /> / <BranchPickerPrimitive.Count />
      <BranchPickerPrimitive.Next />
    </BranchPickerPrimitive.Root>
  );
};
```

## API

You can access the current branch state or navigate via the API as well.  
These APIs rely on the message state and may only be called inside a message component.

```tsx
const hasBranches = useMessageIf({ hasBranches: true }); // whether branchCount is >= 2

// navigation
const goToNextBranch = useGoToNextBranch(); // null if there is no next branch
const goToPreviousBranch = useGoToPreviousBranch(); // null if there is no previous branch
```



================================================
FILE: apps/docs/content/docs/guides/Editing.mdx
================================================
---
title: Message Editing
---

Give the user the ability to edit their message.

## Enabling edit support

You can show an editor interface by using `ComposerPrimitive`.

```tsx {1,11,25,31-43}
import { ComposerPrimitive } from "@assistant-ui/react";
...

const Thread = () => {
  return (
    <ThreadPrimitive.Root>
      <ThreadPrimitive.Viewport>
        ...
        <ThreadPrimitive.Messages components={{
          ...,
          EditComposer, // <-- Show our new component during edit mode
        }} />
      </ThreadPrimitive.Viewport>
      ...
    </ThreadPrimitive.Root>
  );
};

const UserMessage = () => {
  return (
    <MessagePrimitive.Root>
      ...
      <ActionBarPrimitive.Root>
        ...
        <ActionBarPrimitive.Edit /> {/* <-- add a button to enable edit mode */}
      </ActionBarPrimitive.Root>
    </MessagePrimitive.Root>
  );
};

// define a new component
const EditComposer = () => {
  return (
    // you can return a MessagePrimitive including a ComposerPrimitive, or only a ComposerPrimitive
    <MessagePrimitive.Root>
      ...
      <ComposerPrimitive.Root>
        <ComposerPrimitive.Input />
        <ComposerPrimitive.Cancel />
        <ComposerPrimitive.Send />
      </ComposerPrimitive.Root>
    </MessagePrimitive.Root>
  );
};
```



================================================
FILE: apps/docs/content/docs/guides/Latex.mdx
================================================
---
title: LaTeX
---

import { Steps, Step } from "fumadocs-ui/components/steps";
import { Callout } from "fumadocs-ui/components/callout";

Render LaTeX mathematical expressions in chat messages using KaTeX.

<Callout type="warn">LaTeX rendering is not enabled in markdown by default.</Callout>

<Steps>
  <Step>

### Install dependencies

```bash
npm i katex rehype-katex remark-math
```

  </Step>
  <Step>

### Add KaTeX CSS to your layout

```tsx title="/app/layout.tsx"
import "katex/dist/katex.min.css"; // [!code ++]
```

  </Step>
  <Step>

### Update `markdown-text.tsx`

```tsx title="/components/assistant-ui/markdown-text.tsx"
import remarkMath from "remark-math";     // [!code ++]
import rehypeKatex from "rehype-katex";   // [!code ++]

const MarkdownTextImpl = () => {
  return (
    <MarkdownTextPrimitive
      remarkPlugins={[remarkGfm, remarkMath]} // add remarkMath // [!code ++]
      rehypePlugins={[rehypeKatex]}           // add rehypeKatex // [!code ++]
      className="aui-md"
      components={defaultComponents}
    />
  );
};

export const MarkdownText = memo(MarkdownTextImpl);
```

  </Step>
</Steps>

## Examples

### Inline math

Single dollar signs for inline math: `$E = mc^2$`

### Block math

Double dollar signs for block math:

```
$$
\int_{a}^{b} f(x) \, dx = F(b) - F(a)
$$
```

### Fenced code blocks

Fenced code blocks with the `math` language identifier:

````
```math
\sum_{i=1}^{n} i = \frac{n(n+1)}{2}
```
````




================================================
FILE: apps/docs/content/docs/guides/meta.json
================================================
{
  "title": "Guides",
  "pages": ["Attachments", "Branching", "Editing", "Speech", "Latex", "Tools", "ToolUI"]
}



================================================
FILE: apps/docs/content/docs/guides/Speech.mdx
================================================
---
title: Speech
---

import { SpeechSample } from "../../../components/samples/speech-sample";

## Text-to-Speech

assistant-ui supports text-to-speech via the `SpeechSynthesisAdapter` interface.

<SpeechSample />

### SpeechSynthesisAdapter

Currently, the following speech synthesis adapters are supported:

- `WebSpeechSynthesisAdapter`: Uses the browser's `Web Speech API` API

Support for other speech synthesis adapters is planned for the future.

Passing a `SpeechSynthesisAdapter` to the `EdgeRuntime` will enable text-to-speech support.

### UI

By default, a `Read aloud` button will be shown in the assistant message action bar.

This is implemented using `AssistantActionBar.SpeechControl` which is a wrapper around `AssistantActionBar.Speak` and `AssistantActionBar.StopSpeaking`.
The underlying primitives are `ActionBarPrimitive.Speak` and `ActionBarPrimitive.StopSpeaking`.

### Example

The following example uses the `WebSpeechSynthesisAdapter`.

```tsx
import { WebSpeechSynthesisAdapter } from "@assistant-ui/react";

const runtime = useChatRuntime({
  api: "/api/chat",
  adapters: {
    speech: new WebSpeechSynthesisAdapter(),
  },
});
```



================================================
FILE: apps/docs/content/docs/guides/Tools.mdx
================================================
---
title: Tools
---

Tools enable LLMs to take actions and interact with external systems. assistant-ui provides a comprehensive toolkit for creating, managing, and visualizing tool interactions in real-time.

## Overview

Tools in assistant-ui are functions that the LLM can call to perform specific tasks. They bridge the gap between the LLM's reasoning capabilities and real-world actions like:

- Fetching data from APIs
- Performing calculations
- Interacting with databases
- Controlling UI elements
- Executing workflows

When tools are executed, you can display custom generative UI components that provide rich, interactive visualizations of the tool's execution and results. Learn more in the [Generative UI guide](/docs/guides/ToolUI).

<Callout type="tip">
If you haven't provided a custom UI for a tool, assistant-ui offers a [`ToolFallback`](/docs/ui/ToolFallback) component that you can add to your codebase to render a default UI for tool executions. You can customize this by creating your own Tool UI component for the tool's name.
</Callout>

## Tool Creation Methods

assistant-ui offers multiple ways to create and register tools, each suited for different use cases:

- **`makeAssistantTool`**: Register client-defined tools with the assistant context
- **`useAssistantTool`**: Hook-based dynamic tool registration
- **`makeAssistantToolUI`**: UI-only components for existing tools
- **Direct context registration**: Advanced registration with full model context control

### 1. Using `makeAssistantTool`

Register tools with the assistant context. Returns a React component that registers the tool when rendered:

```tsx
import { makeAssistantTool, tool } from "@assistant-ui/react";
import { z } from "zod";

// Define the tool
const weatherTool = tool({
  description: "Get current weather for a location",
  parameters: z.object({
    location: z.string().describe("City name or zip code"),
    unit: z.enum(["celsius", "fahrenheit"]).default("celsius")
  }),
  execute: async ({ location, unit }) => {
    // Tool execution logic
    const weather = await fetchWeatherAPI(location, unit);
    return weather;
  }
});

// Create the component
const WeatherTool = makeAssistantTool({
  ...weatherTool,
  toolName: "getWeather"
});

// Place the tool component inside AssistantRuntimeProvider
function App() {
  return (
    <AssistantRuntimeProvider runtime={runtime}>
      <WeatherTool />
      <Thread />
    </AssistantRuntimeProvider>
  );
}
```

<Callout type="tip">
When using server-side runtimes like Vercel AI SDK, you can pass client-defined tools to your backend using `frontendTools`. See the [Client-Defined Tools with frontendTools](#client-defined-tools-with-frontendtools) section below.
</Callout>

### 2. Using `useAssistantTool` Hook

Register tools dynamically using React hooks. Useful for conditional tools or when tool availability depends on component state:

```tsx
import { useAssistantTool } from "@assistant-ui/react";
import { z } from "zod";

function DynamicTools() {
  const [dataSource, setDataSource] = useState<"local" | "cloud">("local");
  
  useAssistantTool({
    toolName: "searchData",
    description: "Search through the selected data source",
    parameters: z.object({
      query: z.string()
    }),
    execute: async ({ query }) => {
      if (dataSource === "local") {
        return await searchLocalDatabase(query);
      } else {
        return await searchCloudDatabase(query);
      }
    },
    // Re-register when data source changes
    enabled: true
  });
  
  return null;
}
```

### 3. Using `makeAssistantToolUI`

Create generative UI components for tools that are defined elsewhere. This is UI-only - the tool's execution logic must be registered separately (e.g., in your backend, MCP server, or another component):

<Callout type="note">
This creates only the UI component. The actual tool execution happens where you've defined it (typically in your API route with server-based runtimes like Vercel AI SDK).
</Callout>

```tsx
import { makeAssistantToolUI, AssistantToolUI } from "@assistant-ui/react";

const SearchResultsUI = makeAssistantToolUI<{
  query: string;
}, {
  results: Array<{
    id: string;
    url: string;
    title: string;
    snippet: string;
  }>;
}>({
  toolName: "webSearch", // Must match the registered tool's name
  render: ({ args, result }) => {
    return (
      <div className="search-results">
        <h3>Search: {args.query}</h3>
        {result.results.map((item) => (
          <div key={item.id}>
            <a href={item.url}>{item.title}</a>
            <p>{item.snippet}</p>
          </div>
        ))}
      </div>
    );
  }
});

// Place the tool component inside AssistantRuntimeProvider
function App() {
  return (
    <AssistantRuntimeProvider runtime={runtime}>
      <SearchResultsUI />
      <Thread />
    </AssistantRuntimeProvider>
  );
}
```

### 4. Advanced: Direct Context Registration

Use `registerModelContextProvider` when you need to configure more than just tools:

```tsx
import { tool, useAssistantRuntime } from "@assistant-ui/react";
import { useEffect, useState } from "react";
import { z } from "zod";

function MyComponent() {
  const runtime = useAssistantRuntime();
  const [isCreativeMode, setIsCreativeMode] = useState(false);
  
  useEffect(() => {
    const calculateTool = tool({
      description: "Perform mathematical calculations",
      parameters: z.object({
        expression: z.string()
      }),
      execute: async ({ expression }) => {
        return eval(expression); // Note: Use proper math parser in production
      }
    });

    // Register tools with model configuration
    return runtime.registerModelContextProvider({
      getModelContext: () => ({
        tools: { calculate: calculateTool },
        callSettings: {
          temperature: isCreativeMode ? 0.9 : 0.2,
          maxTokens: 1000
        },
        priority: 10 // Higher priority overrides other providers
      })
    });
  }, [runtime, isCreativeMode]);
  
  return <div>{/* Your component */}</div>;
}
```

Use this approach when you need:
- Dynamic model parameters (temperature, maxTokens, etc.)
- Priority-based context merging
- Multiple context types in one registration

## Tool Paradigms

### Frontend Tools

Tools that execute in the browser, accessing client-side resources:

```tsx
const screenshotTool = tool({
  description: "Capture a screenshot of the current page",
  parameters: z.object({
    selector: z.string().optional()
  }),
  execute: async ({ selector }) => {
    const element = selector ? document.querySelector(selector) : document.body;
    const screenshot = await captureElement(element);
    return { dataUrl: screenshot };
  }
});

const ScreenshotTool = makeAssistantTool({
  ...screenshotTool,
  toolName: "screenshot"
});
```

### Backend Tools

Tools that trigger server-side operations:

```tsx
// Backend route (AI SDK)
export async function POST(req: Request) {
  const { messages } = await req.json();
  
  const result = streamText({
    model: openai("gpt-4o"),
    messages,
    tools: {
      queryDatabase: {
        description: "Query the application database",
        parameters: z.object({
          query: z.string(),
          table: z.string()
        }),
        execute: async ({ query, table }) => {
          // Server-side database access
          const results = await db.query(query, { table });
          return results;
        }
      }
    }
  });
  
  return result.toDataStreamResponse();
}
```

### Client-Defined Tools with frontendTools

Currently, the Vercel AI SDK adapter implements automatic serialization of client-defined tools. When using this adapter, tools registered via `makeAssistantTool`, `useAssistantTool`, or `registerModelContextProvider` are automatically included in API requests. The `frontendTools` utility helps you use these tools server-side:

```tsx
// Frontend: Define tool with makeAssistantTool
import { makeAssistantTool, tool } from "@assistant-ui/react";

const calculateTool = tool({
  description: "Perform calculations",
  parameters: z.object({
    expression: z.string()
  }),
  execute: async ({ expression }) => {
    return eval(expression); // Note: Use proper math parser in production
  }
});

const CalculateTool = makeAssistantTool({
  ...calculateTool,
  toolName: "calculate"
});

// Backend: Use frontendTools to receive client tools
import { frontendTools } from "@assistant-ui/react-ai-sdk";

export async function POST(req: Request) {
  const { messages, tools } = await req.json();
  
  const result = streamText({
    model: openai("gpt-4o"),
    messages,
    tools: {
      ...frontendTools(tools), // Client-defined tools
      // Additional server-side tools
      queryDatabase: {
        description: "Query the application database",
        parameters: z.object({ query: z.string() }),
        execute: async ({ query }) => {
          return await db.query(query);
        }
      }
    }
  });
  
  return result.toDataStreamResponse();
}
```

<Callout type="note">
The `frontendTools` utility is currently only available for the Vercel AI SDK integration. Other adapters like LangGraph follow a server-side tool definition model and don't yet implement client tool serialization. Learn more in the [Vercel AI SDK integration guide](/docs/runtimes/ai-sdk/use-chat-hook).
</Callout>

### Human-in-the-Loop Tools

Tools that require human approval or input:

```tsx
import { makeAssistantTool, tool } from "@assistant-ui/react";
import { z } from "zod";

const refundTool = tool({
  description: "Process a customer refund",
  parameters: z.object({
    orderId: z.string(),
    amount: z.number(),
    reason: z.string()
  }),
  execute: async ({ orderId, amount, reason }) => {
    // Wait for human approval
    const approved = await requestHumanApproval({
      action: "refund",
      details: { orderId, amount, reason }
    });
    
    if (!approved) {
      throw new Error("Refund rejected by administrator");
    }
    
    return await processRefund(orderId, amount);
  }
});

const RefundTool = makeAssistantTool({
  ...refundTool,
  toolName: "requestRefund"
});
```

### MCP (Model Context Protocol) Tools

Integration with MCP servers:

```tsx
// Using AI SDK's MCP support
import { createMCPClient } from "ai/mcp";

const mcpClient = createMCPClient({
  servers: {
    github: {
      command: "npx",
      args: ["@modelcontextprotocol/server-github"]
    }
  }
});

// Tools are automatically available through the runtime
const runtime = useChatRuntime({
  api: "/api/chat",
  tools: await mcpClient.getTools()
});
```

## Advanced Patterns

### Tool Composition

Combining multiple tools for complex workflows:

```tsx
const travelPlannerTool = tool({
  description: "Plan a complete trip itinerary",
  parameters: z.object({
    destination: z.string(),
    dates: z.object({
      start: z.string(),
      end: z.string()
    })
  }),
  execute: async ({ destination, dates }) => {
    // Execute multiple operations
    const weather = await getWeatherAPI(destination);
    const hotels = await searchHotelsAPI({ 
      location: destination,
      dates 
    });
    const activities = await findActivitiesAPI({
      location: destination,
      weather: weather.forecast
    });
    
    return {
      weather,
      hotels,
      activities,
      itinerary: generateItinerary({ weather, hotels, activities })
    };
  }
});

const TravelPlannerTool = makeAssistantTool({
  ...travelPlannerTool,
  toolName: "planTrip"
});
```

### Conditional Tool Availability

Tools that appear based on context:

```tsx
function ConditionalTools() {
  const { user } = useAuth();
  const { subscription } = useSubscription();
  
  // Premium features
  useAssistantTool({
    toolName: "advancedAnalysis",
    description: "Perform advanced data analysis",
    parameters: z.object({
      dataset: z.string()
    }),
    execute: async (args) => {
      // Premium analysis logic
    },
    enabled: subscription?.tier === "premium"
  });
  
  // Role-based tools
  useAssistantTool({
    toolName: "adminPanel",
    description: "Access admin controls",
    parameters: z.object({}),
    execute: async () => {
      // Admin actions
    },
    enabled: user?.role === "admin"
  });
}
```

### Tool Error Handling

Robust error handling and recovery:

```tsx
const resilientTool = tool({
  description: "Fetch data with retry logic",
  parameters: z.object({
    endpoint: z.string()
  }),
  execute: async ({ endpoint }, { abortSignal }) => {
    const maxRetries = 3;
    let lastError;
    
    for (let i = 0; i < maxRetries; i++) {
      try {
        const response = await fetch(endpoint, { signal: abortSignal });
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        return await response.json();
      } catch (error) {
        lastError = error;
        if (abortSignal.aborted) throw error; // Don't retry on abort
        await new Promise(resolve => setTimeout(resolve, 1000 * i));
      }
    }
    
    throw new Error(`Failed after ${maxRetries} attempts: ${lastError.message}`);
  }
});

const ResilientTool = makeAssistantTool({
  ...resilientTool,
  toolName: "fetchWithRetries"
});
```

## Best Practices

1. **Clear Descriptions**: Write descriptive tool descriptions that help the LLM understand when to use each tool
2. **Parameter Validation**: Use Zod schemas to ensure type safety and provide clear parameter descriptions
3. **Error Handling**: Always handle potential errors gracefully with user-friendly messages
4. **Loading States**: Provide visual feedback during tool execution
5. **Security**: Validate permissions and sanitize inputs, especially for destructive operations
6. **Performance**: Use abort signals for cancellable operations and implement timeouts
7. **Testing**: Test tools in isolation and with the full assistant flow

## Tool Execution Context

Tools receive additional context during execution:

```tsx
execute: async (args, context) => {
  // context.abortSignal - AbortSignal for cancellation
  // context.toolCallId - Unique identifier for this invocation
}
```

## Runtime Integration

Each integration handles tools differently:

- **Vercel AI SDK**: Tools defined in API routes with `streamText({ tools: {...} })`. Also supports client-defined tools via `frontendTools`.
- **LangGraph**: Tools defined in your LangGraph graph configuration.
- **Mastra**: Tools defined as typed functions used by agents and workflows.

All integrations support tool UI customization via `makeAssistantToolUI`.



================================================
FILE: apps/docs/content/docs/guides/ToolUI.mdx
================================================
---
title: Generative UI
---

import { ToolUISample } from "../../../components/samples/tool-ui-sample";
import { Steps, Step } from "fumadocs-ui/components/steps";
import { Callout } from "fumadocs-ui/components/callout";

Create custom UI components for AI tool calls, providing visual feedback and interactive experiences when tools are executed.

<ToolUISample />

## Overview

Tool UIs in assistant-ui allow you to create custom interfaces that appear when AI tools are called. These generative UI components enhance the user experience by:

- **Visualizing tool execution** with loading states and progress indicators
- **Displaying results** in rich, formatted layouts
- **Enabling user interaction** through forms and controls
- **Providing error feedback** with helpful recovery options

This guide demonstrates building tool UIs with the **Vercel AI SDK**.

## Creating Tool UIs

There are two main approaches to creating tool UIs in assistant-ui:

### 1. Client-Defined Tools (`makeAssistantTool`)

If you're creating tools on the client side, use `makeAssistantTool` to register them with the assistant context. Then create a UI component with `makeAssistantToolUI`:

```tsx
import { makeAssistantTool, tool } from "@assistant-ui/react";
import { z } from "zod";

// Define the tool
const weatherTool = tool({
  description: "Get current weather for a location",
  parameters: z.object({
    location: z.string(),
    unit: z.enum(["celsius", "fahrenheit"]),
  }),
  execute: async ({ location, unit }) => {
    const weather = await fetchWeatherAPI(location, unit);
    return weather;
  },
});

// Register the tool
const WeatherTool = makeAssistantTool({
  ...weatherTool,
  toolName: "getWeather",
});

// Create the UI
const WeatherToolUI = makeAssistantToolUI<
  { location: string; unit: "celsius" | "fahrenheit" },
  { temperature: number; description: string }
>({
  toolName: "getWeather",
  render: ({ args, result, status }) => {
    if (status.type === "running") {
      return <div>Checking weather in {args.location}...</div>;
    }

    return (
      <div className="weather-card">
        <h3>{args.location}</h3>
        <p>
          {result.temperature}°{args.unit === "celsius" ? "C" : "F"}
        </p>
        <p>{result.description}</p>
      </div>
    );
  },
});
```

<Callout type="tip">
  Tools defined with `makeAssistantTool` can be passed to your backend using the
  `frontendTools` utility
</Callout>

Learn more about creating tools in the [Tools Guide](/docs/guides/Tools).

### 2. UI-Only for Existing Tools (`makeAssistantToolUI`)

If your tool is defined elsewhere (e.g., in your backend API, MCP server, or LangGraph), use `makeAssistantToolUI` to create just the UI component:

```tsx
import { makeAssistantToolUI } from "@assistant-ui/react";

const WeatherToolUI = makeAssistantToolUI<
  { location: string; unit: "celsius" | "fahrenheit" },
  { temperature: number; description: string }
>({
  toolName: "getWeather", // Must match the backend tool name
  render: ({ args, result, status }) => {
    // UI rendering logic only
  },
});
```

## Quick Start Example

This example shows how to implement the UI-only approach using `makeAssistantToolUI`:

<Steps>
  <Step>

### Create a Tool UI Component

```tsx
import { makeAssistantToolUI } from "@assistant-ui/react";
import { z } from "zod";

type WeatherArgs = {
  location: string;
  unit: "celsius" | "fahrenheit";
};

type WeatherResult = {
  temperature: number;
  description: string;
  humidity: number;
  windSpeed: number;
};

const WeatherToolUI = makeAssistantToolUI<WeatherArgs, WeatherResult>({
  toolName: "getWeather",
  render: ({ args, status, result }) => {
    if (status.type === "running") {
      return (
        <div className="flex items-center gap-2">
          <Spinner />
          <span>Checking weather in {args.location}...</span>
        </div>
      );
    }

    if (status.type === "incomplete" && status.reason === "error") {
      return (
        <div className="text-red-500">
          Failed to get weather for {args.location}
        </div>
      );
    }

    return (
      <div className="weather-card rounded-lg bg-blue-50 p-4">
        <h3 className="text-lg font-bold">{args.location}</h3>
        <div className="mt-2 grid grid-cols-2 gap-4">
          <div>
            <p className="text-2xl">
              {result.temperature}°{args.unit === "celsius" ? "C" : "F"}
            </p>
            <p className="text-gray-600">{result.description}</p>
          </div>
          <div className="text-sm">
            <p>Humidity: {result.humidity}%</p>
            <p>Wind: {result.windSpeed} km/h</p>
          </div>
        </div>
      </div>
    );
  },
});
```

  </Step>
  <Step>

### Register the Tool UI

Place the component inside your `AssistantRuntimeProvider`:

```tsx
function App() {
  return (
    <AssistantRuntimeProvider runtime={runtime}>
      <Thread />
      <WeatherToolUI />
    </AssistantRuntimeProvider>
  );
}
```

  </Step>
  <Step>

### Define the Backend Tool (Vercel AI SDK)

When using the Vercel AI SDK, define the corresponding tool in your API route:

```tsx title="/app/api/chat/route.ts"
import { streamText, tool } from "ai";
import { z } from "zod";

export async function POST(req: Request) {
  const { messages } = await req.json();

  const result = streamText({
    model: openai("gpt-4o"),
    messages,
    tools: {
      getWeather: tool({
        description: "Get current weather for a location",
        parameters: z.object({
          location: z.string(),
          unit: z.enum(["celsius", "fahrenheit"]),
        }),
        execute: async ({ location, unit }) => {
          const weather = await fetchWeatherAPI(location);
          return {
            temperature: weather.temp,
            description: weather.condition,
            humidity: weather.humidity,
            windSpeed: weather.wind,
          };
        },
      }),
    },
  });

  return result.toDataStreamResponse();
}
```

  </Step>
</Steps>

## Tool UI Patterns

### Component Pattern

Create standalone tool UI components:

```tsx
export const WebSearchToolUI = makeAssistantToolUI<
  { query: string },
  { results: SearchResult[] }
>({
  toolName: "webSearch",
  render: ({ args, status, result }) => {
    return (
      <div className="search-container">
        <div className="mb-3 flex items-center gap-2">
          <SearchIcon />
          <span>Search results for: "{args.query}"</span>
        </div>

        {status.type === "running" && <LoadingSpinner />}

        {result && (
          <div className="space-y-2">
            {result.results.map((item, index) => (
              <div key={index} className="rounded border p-3">
                <a href={item.url} className="font-medium text-blue-600">
                  {item.title}
                </a>
                <p className="text-sm text-gray-600">{item.snippet}</p>
              </div>
            ))}
          </div>
        )}
      </div>
    );
  },
});
```

### Hook Pattern

Use hooks for dynamic tool UI registration:

<Callout type="tip">
When you assign your `makeAssistantToolUI({...})` call to a constant starting with `use…`, you can call it directly as a hook inside your component. This pattern lets you access local props or state when rendering the tool UI.
</Callout>

```tsx
import { useAssistantToolUI } from "@assistant-ui/react";

function DynamicToolUI() {
  const [theme, setTheme] = useState("light");

  useAssistantToolUI({
    toolName: "analyzeData",
    render: ({ args, result, status }) => {
      // Hook allows access to component state
      return (
        <DataVisualization
          data={result}
          theme={theme}
          loading={status.type === "running"}
        />
      );
    },
  });

  return null;
}
```

### Inline Pattern

For tools that need access to parent component props:

<Callout type="tip">
  **Why `useInlineRender`?** By default, a tool UI's `render` function is
  static. Use `useInlineRender` when your UI needs access to dynamic component
  props (for example, to pass in an `id` or other contextual data).
</Callout>

```tsx
import { useAssistantToolUI, useInlineRender } from "@assistant-ui/react";

function ProductPage({ productId, productName }) {
  useAssistantToolUI({
    toolName: "checkInventory",
    render: useInlineRender(({ args, result }) => {
      // Access parent component props
      return (
        <div className="inventory-status">
          <h4>{productName} Inventory</h4>
          <p>
            Stock for {productId}: {result.quantity} units
          </p>
          <p>Location: {result.warehouse}</p>
        </div>
      );
    }),
  });

  return <div>Product details...</div>;
}
```

## Interactive Tool UIs

### User Input Collection

Create tools that collect user input during execution:

<Callout type="tip">
  **Pro tip:** Call `addResult(...)` exactly once to complete the tool call.
  After it's invoked, the assistant will resume the conversation with your
  provided data.
</Callout>

```tsx
const DatePickerToolUI = makeAssistantToolUI<
  { prompt: string },
  { date: string }
>({
  toolName: "selectDate",
  render: ({ args, result, addResult }) => {
    if (result) {
      return (
        <div className="rounded bg-green-50 p-3">
          ✅ Selected date: {new Date(result.date).toLocaleDateString()}
        </div>
      );
    }

    return (
      <div className="rounded border p-4">
        <p className="mb-3">{args.prompt}</p>
        <DatePicker
          onChange={(date) => {
            addResult({ date: date.toISOString() });
          }}
        />
      </div>
    );
  },
});
```

### Multi-Step Interactions

Build complex workflows with multiple user interactions:

```tsx
const ApprovalToolUI = makeAssistantToolUI<
  { action: string; details: any },
  { approved: boolean; reason?: string }
>({
  toolName: "requestApproval",
  render: ({ args, result, addResult }) => {
    const [reason, setReason] = useState("");

    if (result) {
      return (
        <div className={result.approved ? "text-green-600" : "text-red-600"}>
          {result.approved ? "✅ Approved" : `❌ Rejected: ${result.reason}`}
        </div>
      );
    }

    return (
      <div className="rounded border-2 border-yellow-400 p-4">
        <h4 className="font-bold">Approval Required</h4>
        <p className="my-2">{args.action}</p>
        <pre className="rounded bg-gray-100 p-2 text-sm">
          {JSON.stringify(args.details, null, 2)}
        </pre>

        <div className="mt-4 flex gap-2">
          <button
            onClick={() => addResult({ approved: true })}
            className="rounded bg-green-500 px-4 py-2 text-white"
          >
            Approve
          </button>
          <button
            onClick={() => addResult({ approved: false, reason })}
            className="rounded bg-red-500 px-4 py-2 text-white"
          >
            Reject
          </button>
          <input
            type="text"
            placeholder="Rejection reason..."
            value={reason}
            onChange={(e) => setReason(e.target.value)}
            className="flex-1 rounded border px-2"
          />
        </div>
      </div>
    );
  },
});
```

## Advanced Features

### Tool Status Handling

The `status` prop provides detailed execution state:

```tsx
render: ({ status, args }) => {
  switch (status.type) {
    case "running":
      return <LoadingState />;

    case "requires-action":
      return <UserInputRequired reason={status.reason} />;

    case "incomplete":
      if (status.reason === "cancelled") {
        return <div>Operation cancelled</div>;
      }
      if (status.reason === "error") {
        return <ErrorDisplay error={status.error} />;
      }
      return <div>Failed: {status.reason}</div>;

    case "complete":
      return <SuccessDisplay />;
  }
};
```

### Field-Level Validation

Use `useToolArgsFieldStatus` to show validation states:

```tsx
import { useToolArgsFieldStatus } from "@assistant-ui/react";

const FormToolUI = makeAssistantToolUI({
  toolName: "submitForm",
  render: ({ args }) => {
    const emailStatus = useToolArgsFieldStatus("email");
    const phoneStatus = useToolArgsFieldStatus("phone");

    return (
      <form className="space-y-4">
        <div>
          <input
            type="email"
            value={args.email}
            className={emailStatus.type === "running" ? "loading" : ""}
            disabled
          />
          {emailStatus.type === "incomplete" && (
            <span className="text-red-500">Invalid email</span>
          )}
        </div>

        <div>
          <input
            type="tel"
            value={args.phone}
            className={phoneStatus.type === "running" ? "loading" : ""}
            disabled
          />
        </div>
      </form>
    );
  },
});
```

### Partial Results & Streaming

Display results as they stream in:

```tsx
const AnalysisToolUI = makeAssistantToolUI<
  { data: string },
  { progress: number; insights: string[] }
>({
  toolName: "analyzeData",
  render: ({ result, status }) => {
    const progress = result?.progress || 0;
    const insights = result?.insights || [];

    return (
      <div className="analysis-container">
        {status.type === "running" && (
          <div className="mb-4">
            <div className="mb-1 flex justify-between">
              <span>Analyzing...</span>
              <span>{progress}%</span>
            </div>
            <div className="w-full rounded bg-gray-200">
              <div
                className="h-2 rounded bg-blue-500"
                style={{ width: `${progress}%` }}
              />
            </div>
          </div>
        )}

        <div className="space-y-2">
          {insights.map((insight, i) => (
            <div key={i} className="rounded bg-gray-50 p-2">
              {insight}
            </div>
          ))}
        </div>
      </div>
    );
  },
});
```

### Custom Tool Fallback

Provide a custom UI for tools without specific UIs:

```tsx
<Thread
  components={{
    ToolFallback: ({ toolName, args, result }) => (
      <div className="tool-fallback rounded bg-gray-100 p-3">
        <code className="text-sm">
          {toolName}({JSON.stringify(args)})
        </code>
        {result && (
          <pre className="mt-2 text-xs">{JSON.stringify(result, null, 2)}</pre>
        )}
      </div>
    ),
  }}
/>
```

## Execution Context

Generative UI components have access to execution context through props:

```tsx
type ToolUIRenderProps<TArgs, TResult> = {
  // Tool arguments
  args: TArgs;
  argsText: string; // JSON stringified args

  // Execution status
  status: ToolCallMessagePartStatus;
  isError?: boolean;

  // Tool result (may be partial during streaming)
  result?: TResult;

  // Tool metadata
  toolName: string;
  toolCallId: string;

  // Interactive callback
  addResult: (result: TResult) => void;

  // Optional artifact data
  artifact?: unknown;
};
```

## Best Practices

### 1. Handle All Status States

Always handle loading, error, and success states:

```tsx
render: ({ status, result, args }) => {
  if (status.type === "running") return <Skeleton />;
  if (status.type === "incomplete") return <ErrorState />;
  if (!result) return null;
  return <ResultDisplay result={result} />;
};
```

### 2. Provide Visual Feedback

Use animations and transitions for better UX:

```tsx
<div
  className={cn(
    "transition-all duration-300",
    status.type === "running" && "opacity-50",
    status.type === "complete" && "opacity-100",
  )}
>
  {/* Tool UI content */}
</div>
```

### 3. Make UIs Accessible

Ensure keyboard navigation and screen reader support:

```tsx
<button
  onClick={() => addResult(value)}
  aria-label="Confirm selection"
  className="focus:outline-none focus:ring-2"
>
  Confirm
</button>
```

### 4. Optimize Performance

Use `useInlineRender` to prevent unnecessary re-renders:

```tsx
useAssistantToolUI({
  toolName: "heavyComputation",
  render: useInlineRender(({ result }) => {
    // Expensive rendering logic
    return <ComplexVisualization data={result} />;
  }),
});
```

<Callout>
  Generative UI components are only displayed in the chat interface. The actual
  tool execution happens on the backend. This separation allows you to create
  rich, interactive experiences while keeping sensitive logic secure on the
  server.
</Callout>

## Related Guides

- [Tools Guide](/docs/guides/Tools) - Learn how to create and use tools with AI models
- [Tool Fallback](/docs/ui/ToolFallback) - Default UI for tools without custom components
- [API Reference](/docs/api-reference/primitives/MessagePart) - Detailed type definitions and component APIs
- [Message Primitive](/docs/api-reference/primitives/Message) - Complete Message component documentation



================================================
FILE: apps/docs/content/docs/legacy/styled/AssistantModal.mdx
================================================
---
title: AssistantModal
---

import { Steps, Step } from "fumadocs-ui/components/steps";
import { Tabs, Tab } from "fumadocs-ui/components/tabs";

## Overview

A chat bubble shown in the bottom right corner of the screen. Useful for support or Q&A use cases.

## Getting Started

<Steps>
  <Step>

### Install `@assistant-ui/react-ui`

```sh npm2yarn
npm install @assistant-ui/react-ui
```

  </Step>
  <Step>

### Import CSS styles

Add the following to your `tailwind.config.ts`:

<Tabs items={["Tailwind", "Tailwind + shadcn-ui", "Not using Tailwind"]}>

```ts title="/tailwind.config.ts" tab="Tailwind"
{
  plugins: [
    require("tailwindcss-animate"), // make sure to "npm install tailwindcss-animate"
    require("@assistant-ui/react-ui/tailwindcss")({
      components: ["assistant-modal"],
    })
  ],
}
```

```ts title="/tailwind.config.ts" tab="Tailwind + shadcn-ui"
{
  plugins: [
    require("tailwindcss-animate"), // make sure to "npm install tailwindcss-animate"
    require("@assistant-ui/react-ui/tailwindcss")({
      components: ["assistant-modal"],
      shadcn: true
    })
  ],
}
```

```ts title="/app/layout.tsx" tab="Not using Tailwind"
import "@assistant-ui/react-ui/styles/index.css";
import "@assistant-ui/react-ui/styles/modal.css";
```

</Tabs>

  </Step>
  <Step>

### Use it in your app

```tsx title="/app/page.tsx"
import { useChatRuntime } from "@assistant-ui/react-ai-sdk";
import { AssistantModal } from "@assistant-ui/react-ui";

const MyApp = () => {
  const runtime = useChatRuntime({
    api: "/api/chat",
  });

  return (
    <div>
      <AssistantModal runtime={runtime} />
    </div>
  );
};
```

  </Step>
</Steps>



================================================
FILE: apps/docs/content/docs/legacy/styled/Decomposition.mdx
================================================
---
title: Decomposition
---

## Overview

The Styled Components can be decomposed into smaller components. At each level, you can swap out a specific component with your own custom component.

## Thread

Renders an entire conversation thread.

```tsx
import {
  Thread,
  ThreadWelcome,
  Composer,
  type ThreadConfig,
} from "@assistant-ui/react-ui";

const MyThread: FC<ThreadConfig> = (config) => {
  return (
    <Thread.Root config={config}>
      <Thread.Viewport>
        <ThreadWelcome />
        <Thread.Messages />
        <Thread.FollowupSuggestions />
        <Thread.ViewportFooter>
          <Thread.ScrollToBottom />
          <Composer />
        </Thread.ViewportFooter>
      </Thread.Viewport>
    </Thread.Root>
  );
};
```

**Usage:**

```ts
<MyThread />
```

### Thread.Root

Contains all parts of the thread. Accepts a `config` prop which is used by many other styled components.

### Thread.Viewport

The scrollable area containing all messages. Anchors scroll to the bottom as new messages are added.

### Thread.Messages

Renders all messages. This renders a separate component for each message (passed to the `components` prop).

### Thread.ViewportFooter

Renders the footer of the thread viewport. This is the sticky footer that does not scroll with the messages.

### Thread.ScrollToBottom

A button to scroll the viewport to the bottom. Hidden when the viewport is already at bottom.

## ThreadWelcome

Renders the welcome message when no messages are present.

```tsx
import { ThreadWelcome } from "@assistant-ui/react-ui";

const MyThreadWelcome: FC = () => {
  return (
    <ThreadWelcome.Root>
      <ThreadWelcome.Center>
        <ThreadWelcome.Avatar />
        <ThreadWelcome.Message />
      </ThreadWelcome.Center>
      <ThreadWelcome.Suggestions />
    </ThreadWelcome.Root>
  );
};
```

**Usage:**

Decompose `Thread` into `MyThread` and use `MyThreadWelcome` instead of `ThreadWelcome`.

```ts
const MyThread: FC<ThreadConfig> = (config) => {
  ...
  <MyThreadWelcome />
  ...
};
```

### ThreadWelcome.Root

Contains all parts of the welcome message.

### ThreadWelcome.Center

The centered content of the welcome message.

### ThreadWelcome.Avatar

The avatar of the assistant.

### ThreadWelcome.Message

The welcome message.

### ThreadWelcome.Suggestions

Conversation starter suggestions.

```tsx
import { ThreadWelcome } from "@assistant-ui/react-ui";

const MyThreadWelcomeSuggestions: FC = () => {
  return (
    <div className="aui-thread-welcome-suggestions">
      <ThreadWelcome.Suggestion prompt="Write me a poem about the weather" />
      <ThreadWelcome.Suggestion prompt="What is assistant-ui?" />
    </div>
  );
};
```

### ThreadWelcome.Suggestion

A conversation starter suggestion.

## Composer

Renders the composer.

```tsx
import { Composer } from "@assistant-ui/react-ui";

const MyComposer: FC = () => {
  return (
    <Composer.Root>
      <Composer.Attachments />
      <Composer.AddAttachment />
      <Composer.Input autoFocus />
      <Composer.Action />
    </Composer.Root>
  );
};
```

**Usage:**

Decompose `Thread` into `MyThread` and use `MyComposer` instead of `Composer`.

```ts
const MyThread: FC<ThreadConfig> = (config) => {
  ...
  <MyComposer />
  ...
};
```

### Composer.Root

Contains all parts of the composer.

### Composer.Input

The text input field for the user to type a new message.

### Composer.Action

The button to send or cancel the message.

```tsx
import { Composer, ThreadPrimitive } from "@assistant-ui/react-ui";

const MyComposerAction: FC = () => {
  return (
    <>
      <ThreadPrimitive.If running={false}>
        <Composer.Send />
      </ThreadPrimitive.If>
      <ThreadPrimitive.If running>
        <Composer.Cancel />
      </ThreadPrimitive.If>
    </>
  );
};
```

### Composer.Send

The button to send the message.

### Composer.Cancel

Sends a cancel action.

### Composer.Attachments

Renders attachments.

### Composer.AddAttachment

Renders an add attachment button.

## AttachmentUI

<Callout type="info" emoji="💡">
  `AttachmentUI` is still experimental.
</Callout>

Renders an attachment.

```tsx
import { AttachmentUI } from "@assistant-ui/react-ui";

const MyAttachmentUI: FC = () => {
  return (
    <AttachmentUI.Root>
      attachment
      <AttachmentUI.Remove />
    </AttachmentUI.Root>
  );
};
```

### AttachmentUI.Root

Contains all parts of the composer attachment.

### AttachmentUI.Remove

Renders a remove attachment button.

## AssistantMessage

Renders an assistant message.

```tsx
import { AssistantMessage } from "@assistant-ui/react-ui";

const MyAssistantMessage: FC = () => {
  return (
    <AssistantMessage.Root>
      <AssistantMessage.Avatar />
      <AssistantMessage.Content />
      <BranchPicker />
      <AssistantActionBar />
    </AssistantMessage.Root>
  );
};
```

**Usage:**

Decompose `Thread` into `MyThread` and pass `MyAssistantMessage` to Thread.MEssages

```ts
const MyThread: FC<ThreadConfig> = (config) => {
  ...
  <Thread.Messages components={{ AssistantMessage: MyAssistantMessage }} />
  ...
};
```

### AssistantMessage.Root

Contains all parts of the assistant message.

### AssistantMessage.Avatar

The avatar of the assistant.

### AssistantMessage.Content

The content of the assistant message.

## AssistantActionBar

Renders the action bar for the assistant message.

```tsx
import { AssistantActionBar } from "@assistant-ui/react-ui";

const MyAssistantActionBar: FC = () => {
  return (
    <AssistantActionBar.Root
      hideWhenRunning
      autohide="not-last"
      autohideFloat="single-branch"
    >
      <AssistantActionBar.SpeechControl />
      <AssistantActionBar.Copy />
      <AssistantActionBar.Reload />
      <AssistantActionBar.FeedbackPositive />
      <AssistantActionBar.FeedbackNegative />
    </AssistantActionBar.Root>
  );
};
```

**Usage:**

Decompose `AssistantMessage` into `MyAssistantMessage` and use `MyAssistantActionBar` instead of `AssistantActionBar`.

```ts
const MyAssistantMessage: FC = () => {
  ...
  <MyAssistantActionBar />
  ...
};
```

### AssistantActionBar.Root

Contains all parts of the assistant action bar.

### AssistantActionBar.Reload

Shows a reload button.

### AssistantActionBar.Copy

Shows a copy button.

### AssistantActionBar.SpeechControl

Shows a speech control button (either Speak or StopSpeaking).

### AssistantActionBar.Speak

Shows a speak button.

### AssistantActionBar.StopSpeaking

Shows a stop speaking button.

### AssistantActionBar.FeedbackPositive

Shows a positive feedback button.

### AssistantActionBar.FeedbackNegative

Shows a negative feedback button.

## BranchPicker

Renders the branch picker.

```tsx
import { BranchPicker } from "@assistant-ui/react-ui";

const MyBranchPicker: FC = () => {
  return (
    <BranchPicker.Root hideWhenSingleBranch>
      <BranchPicker.Previous />
      <BranchPicker.State />
      <BranchPicker.Next />
    </BranchPicker.Root>
  );
};
```

**Usage:**

Decompose `AssistantMessage` and `UserMessage` and use `MyBranchPicker` instead of `BranchPicker`.

```ts
const MyAssistantMessage: FC = () => {
  ...
  <MyBranchPicker />
  ...
};
```

```ts
const MyUserMessage: FC = () => {
  ...
  <MyBranchPicker />
  ...
};
```

### BranchPicker.Root

Contains all parts of the branch picker.

### BranchPicker.Previous

Shows a previous button.

### BranchPicker.Next

Shows a next button.

### BranchPicker.State

Shows the current branch number and total number of branches.

```tsx
import { BranchPicker } from "@assistant-ui/react-ui";

const MyBranchPickerState: FC = () => {
  return (
    <span className="aui-branch-picker-state">
      <BranchPicker.Number /> / <BranchPicker.Count />
    </span>
  );
};
```

### BranchPicker.Number

The current branch number.

### BranchPicker.Count

The total number of branches.

## UserMessage

Renders a user message.

```tsx
import { UserMessage } from "@assistant-ui/react-ui";

const MyUserMessage: FC = () => {
  return (
    <UserMessage.Root>
      <UserMessage.Attachments />
      <UserMessage.Content />
      <UserActionBar />
      <BranchPicker />
    </UserMessage.Root>
  );
};
```

**Usage:**

Decompose `Thread` into `MyThread` and pass `MyUserMessage` to Thread.Messages

```ts
const MyThread: FC<ThreadConfig> = (config) => {
  ...
  <Thread.Messages components={{ UserMessage: MyUserMessage }} />
  ...
};
```

### UserMessage.Root

Contains all parts of the user message.

### UserMessage.Content

The content of the user message.

### UserMessage.Attachments

Renders attachments.

## UserActionBar

Renders the action bar for the user message.

```tsx
import { UserActionBar } from "@assistant-ui/react-ui";

const MyUserActionBar: FC = () => {
  return (
    <UserActionBar.Root hideWhenRunning autohide="not-last">
      <UserActionBar.Edit />
    </UserActionBar.Root>
  );
};
```

**Usage:**

Decompose `UserMessage` into `MyUserMessage` and use `MyUserActionBar` instead of `UserActionBar`.

```ts
const MyUserMessage: FC = () => {
  ...
  <MyUserActionBar />
  ...
};
```

### UserActionBar.Root

Contains all parts of the user action bar.

### UserActionBar.Edit

Shows an edit button.

## UserAttachment

Renders an attachment.

```tsx
import { UserAttachment } from "@assistant-ui/react-ui";

const MyUserAttachment: FC = () => {
  return <UserAttachment.Root>attachment</UserAttachment.Root>;
};
```

### UserAttachment.Root

Contains all parts of the user attachment.

## EditComposer

Renders a user message being edited.

```tsx
import { EditComposer } from "@assistant-ui/react-ui";

const MyEditComposer: FC = () => {
  return (
    <EditComposer.Root>
      <EditComposer.Input />
      <EditComposer.Footer>
        <EditComposer.Cancel />
        <EditComposer.Send />
      </EditComposer.Footer>
    </EditComposer.Root>
  );
};
```

**Usage:**

Decompose `Thread` into `MyThread` and pass `MyEditComposer` to `Thread.Messages`.

```ts
const MyThread: FC<ThreadConfig> = (config) => {
  ...
  <Thread.Messages components={{ EditComposer: MyEditComposer }} />
  ...
};
```

### EditComposer.Root

Contains all parts of the edit composer.

### EditComposer.Input

The text input field for the user to type a new message.

### EditComposer.Footer

The footer of the edit composer.

### EditComposer.Cancel

Sends a cancel action.

### EditComposer.Send

Sends the message.

## AssistantModal

Renders the assistant modal.

```tsx
import {
  AssistantModal,
  Thread,
  type ThreadConfig,
} from "@assistant-ui/react-ui";

const MyAssistantModal: FC<ThreadConfig> = (config) => {
  return (
    <AssistantModal.Root config={config}>
      <AssistantModal.Trigger />
      <AssistantModal.Content>
        <Thread />
      </AssistantModal.Content>
    </AssistantModal.Root>
  );
};
```

**Usage:**

```ts
<MyAssistantModal />
```

## ThreadList

Renders a thread list.

```tsx
import { ThreadList, ThreadListItem } from "@assistant-ui/react-ui";

const MyThreadList = () => {
  return (
    <ThreadList.Root>
      <ThreadList.New />
      <ThreadList.Items />
    </ThreadList.Root>
  );
};
```

### ThreadListItem

Renders a thread list item.

```tsx
import { ThreadListItem, ThreadListItemPrimitive } from "@assistant-ui/react-ui";

const MyThreadListItem = () => {
  return (
    <ThreadListItem.Root>
      <ThreadListItemTrigger>
        <ThreadListItemTitle />
      </ThreadListItemTrigger>
      <ThreadListItem.Archive />
    </ThreadListItem.Root>
  );
};
```



================================================
FILE: apps/docs/content/docs/legacy/styled/Markdown.mdx
================================================
---
title: Markdown
---

Allow the assistant to display rich text using markdown.

import { Step, Steps } from "fumadocs-ui/components/steps";
import { Callout } from "fumadocs-ui/components/callout";
import { Tabs } from "fumadocs-ui/components/tabs";

## Enabling markdown support

<Steps>

<Step>
### Install `@assistant-ui/react-markdown`

```sh npm2yarn
npm install @assistant-ui/react-markdown
```

</Step>
<Step>

### Setup styles

<Tabs items={["Tailwind", "Tailwind + shadcn-ui", "Not using Tailwind"]}>

```ts {3} title="/tailwind.config.ts" tab="Tailwind"
{
  plugins: [
    require("tailwindcss-animate"),
    require("@assistant-ui/react-ui/tailwindcss")
  ],
}
```

```ts title="/tailwind.config.ts" tab="Tailwind + shadcn-ui"
{
  plugins: [
    require("tailwindcss-animate"),
    require("@assistant-ui/react-ui/tailwindcss")({ shadcn: true })
  ],
}
```

```ts title="/app/layout.tsx" tab="Not using Tailwind"
import "@assistant-ui/react-ui/styles/index.css";
import "@assistant-ui/react-ui/styles/markdown.css";
```

</Tabs>

</Step>

<Step>

### Define a `MarkdownText` component

```tsx {1} title="@/components/markdown-text.tsx"
import { makeMarkdownText } from "@assistant-ui/react-ui";

export const MarkdownText = makeMarkdownText();
```

</Step>

<Step>

### Use it with `Thread`

Pass the `MarkdownText` component to your `Thread` component.

```tsx {1, 7}
import { MarkdownText } from "@/components/markdown-text";

const Home = () => {
  return (
    <Thread assistantMessage={{ components: { Text: MarkdownText } }}>
  );
};
```

</Step>

</Steps>



================================================
FILE: apps/docs/content/docs/legacy/styled/meta.json
================================================
{
  "title": "Styled Components",
  "pages": [
    "Thread",
    "ThreadWidth",
    "AssistantModal",
    "Markdown",
    "Decomposition",
    "Scrollbar",
    "..."
  ]
}



================================================
FILE: apps/docs/content/docs/legacy/styled/Scrollbar.mdx
================================================
---
title: Custom Scrollbar
---

If you want to show a custom scrollbar UI of the Thread.Viewport in place of the system default, you can integrate `@radix-ui/react-scroll-area`.
An example implementation of this is [shadcn-ui's Scroll Area](https://ui.shadcn.com/docs/components/scroll-area).

## Add shadcn Scroll Area

```sh
npx shadcn@latest add scroll-area
```

### @radix-ui/react-scroll-area v1.2.0 release candidate required

The v1.2.0-rc.x release candidate can be installed via

```sh
pnpm add @radix-ui/react-scroll-area@next
```

## Additional Styles

The radix-ui Viewport component adds an intermediate `<div data-radix-scroll-area-content>` element.
Add the following CSS to your `globals.css`:

```css title="@/app/globals.css"
.aui-thread-viewport > [data-radix-scroll-area-content] {
  @apply flex flex-col items-center self-stretch bg-inherit;
}
```

## Integration

- Decompose `Thread` into `MyThread` (see [Decomposition](/docs/legacy/styled/Decomposition))
- Wrap `Thread.Root` with `<ScrollAreaPrimitive.Root asChild>`
- Wrap `Thread.Viewport` with `<ScrollAreaPrimitive.Viewport asChild>`
- Add shadcn's `<ScrollBar />` to `Thread.Root`

The resulting MyThread component should look like this:

```tsx
import {
  Thread,
  ThreadWelcome,
  Composer,
  type ThreadConfig,
} from "@assistant-ui/react-ui";
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"; // [!code highlight]
import { ScrollBar } from "@/components/ui/scroll-area"; // [!code highlight]

const MyThread: FC<ThreadConfig> = (config) => {
  return (
    <ScrollAreaPrimitive.Root asChild> /* [!code highlight] */
      <Thread.Root config={config}>
        <ScrollAreaPrimitive.Viewport asChild> /* [!code highlight] */
          <Thread.Viewport>
            <ThreadWelcome />
            <Thread.Messages />
            <Thread.ViewportFooter>
              <Thread.ScrollToBottom />
              <Composer />
            </Thread.ViewportFooter>
          </Thread.Viewport>
        </ScrollAreaPrimitive.Viewport> /* [!code highlight] */
        <ScrollBar /> /* [!code highlight] */
      </Thread.Root>
    </ScrollAreaPrimitive.Root> /* [!code highlight] */
  );
};
```



================================================
FILE: apps/docs/content/docs/legacy/styled/Thread.mdx
================================================
---
title: Thread
---

import { Steps, Step } from "fumadocs-ui/components/steps";
import { Tabs, Tab } from "fumadocs-ui/components/tabs";

## Overview

The raw message list and message composer UI. Useful for full screen chat use cases.

## Getting Started

<Steps>
  <Step>

### Install `@assistant-ui/react-ui`

```sh npm2yarn
npm install @assistant-ui/react-ui
```

  </Step>
  <Step>

### Import CSS styles

Add the following to your `tailwind.config.ts`:

<Tabs items={["Tailwind", "Tailwind + shadcn-ui", "Not using Tailwind"]}>

```ts title="/tailwind.config.ts" tab="Tailwind"
{
  plugins: [
    require("tailwindcss-animate"), // make sure to "npm install tailwindcss-animate"
    require("@assistant-ui/react-ui/tailwindcss")({
      components: ["thread"],
    })
  ],
}
```

```ts title="/tailwind.config.ts" tab="Tailwind + shadcn-ui"
{
  plugins: [
    require("tailwindcss-animate"), // make sure to "npm install tailwindcss-animate"
    require("@assistant-ui/react-ui/tailwindcss")({
      components: ["thread"],
      shadcn: true
    })
  ],
}
```

```ts title="/app/layout.tsx" tab="Not using Tailwind"
import "@assistant-ui/react-ui/styles/index.css";
```

</Tabs>

  </Step>
  <Step>

### Use it in your app

```tsx title="/app/page.tsx"
import { useChatRuntime } from "@assistant-ui/react-ai-sdk";
import { Thread } from "@assistant-ui/react-ui";

const MyApp = () => {
  const runtime = useChatRuntime({
    api: "/api/chat",
  });

  return (
    <div className="h-full">
      <Thread runtime={runtime} />
    </div>
  );
};
```

  </Step>
</Steps>



================================================
FILE: apps/docs/content/docs/legacy/styled/ThreadWidth.mdx
================================================
---
title: Thread Width
---

You can modify the max width of the thread via the CSS variable `--aui-thread-max-width`.

## Wider Thread

```css title="@/app/globals.css"
:root {
  --aui-thread-max-width: 600px;
}
```

## Take up the whole screen

```css title="@/app/globals.css"
:root {
  --aui-thread-max-width: infinity;
}
```



================================================
FILE: apps/docs/content/docs/migrations/deprecation-policy.mdx
================================================
---
title: Deprecation Policy
---

assistant-ui is committed to providing a stable API, so you can spend your time building amazing things on top of it.

Rarely, we need to deprecate a feature we've already shipped, because it is causing performance, usability, or security issues.
In such cases, we will communicate the intent to unship as soon as possible by marking the feature as `@deprecated` and publishing a notice in the documentation.

Deprecations and breaking changes primarily affect new features released. The longer an API has been in the library, the less likely it is to be deprecated.
For features that have long existed in the library, we will provide a longer deprecation notice period (as described below).

Below is a list of features considered stable and those considered experimental.

## Experimental Features

These features may be removed at any time without notice.

- Anything marked as `unstable_`, `experimental_`, or `internal`
- The `RuntimeCore` API (considered internal)

## Beta Features

A deprecation of these features will undergo a short (&lt;1) month deprecation notice period.

- TailwindCSS Plugins (e.g. `@assistant-ui/react-ui/tailwindcss`)
- Context API
- Runtime API
- Message types
- Styled UI components
- Primitive Hooks (e.g. useBranchPickerNext)
- Attachment APIs
- shadcn/ui styles

## Stable Features

A deprecation of these features will undergo a long (&gt;3 month) deprecation notice period.

The following features are considered stable:

- Primitives (except for `AttachmentPrimitive`)



================================================
FILE: apps/docs/content/docs/migrations/meta.json
================================================
{
  "title": "Migrations",
  "pages": ["deprecation-policy", "v0-7", "v0-8", "v0-9", "v0-11"]
}



================================================
FILE: apps/docs/content/docs/migrations/v0-11.mdx
================================================
---
title: Migration to v0.11
---

## ContentPart renamed to MessagePart

All ContentPart-related types, hooks, and components have been renamed to MessagePart for better semantic clarity and consistency.

### What changed

The following types and components have been renamed:

#### Core Types

- `TextContentPart` → `TextMessagePart`
- `ReasoningContentPart` → `ReasoningMessagePart`
- `SourceContentPart` → `SourceMessagePart`
- `ImageContentPart` → `ImageMessagePart`
- `FileContentPart` → `FileMessagePart`
- `Unstable_AudioContentPart` → `Unstable_AudioMessagePart`
- `ToolCallContentPart` → `ToolCallMessagePart`
- `ContentPartStatus` → `MessagePartStatus`
- `ToolCallContentPartStatus` → `ToolCallMessagePartStatus`

#### Thread Message Parts

- `ThreadUserContentPart` → `ThreadUserMessagePart`
- `ThreadAssistantContentPart` → `ThreadAssistantMessagePart`

#### Runtime and State Types

- `ContentPartRuntime` → `MessagePartRuntime`
- `ContentPartState` → `MessagePartState`

#### Hooks

- `useContentPart` → `useMessagePart`
- `useContentPartRuntime` → `useMessagePartRuntime`
- `useContentPartText` → `useMessagePartText`
- `useContentPartReasoning` → `useMessagePartReasoning`
- `useContentPartSource` → `useMessagePartSource`
- `useContentPartFile` → `useMessagePartFile`
- `useContentPartImage` → `useMessagePartImage`
- `useTextContentPart` → `useTextMessagePart`

#### Component Types

- `EmptyContentPartComponent` → `EmptyMessagePartComponent`
- `TextContentPartComponent` → `TextMessagePartComponent`
- `ReasoningContentPartComponent` → `ReasoningMessagePartComponent`
- `SourceContentPartComponent` → `SourceMessagePartComponent`
- `ImageContentPartComponent` → `ImageMessagePartComponent`
- `FileContentPartComponent` → `FileMessagePartComponent`
- `Unstable_AudioContentPartComponent` → `Unstable_AudioMessagePartComponent`
- `ToolCallContentPartComponent` → `ToolCallMessagePartComponent`

#### Props Types

- `EmptyContentPartProps` → `EmptyMessagePartProps`
- `TextContentPartProps` → `TextMessagePartProps`
- `ReasoningContentPartProps` → `ReasoningMessagePartProps`
- `SourceContentPartProps` → `SourceMessagePartProps`
- `ImageContentPartProps` → `ImageMessagePartProps`
- `FileContentPartProps` → `FileMessagePartProps`
- `Unstable_AudioContentPartProps` → `Unstable_AudioMessagePartProps`
- `ToolCallContentPartProps` → `ToolCallMessagePartProps`

#### Providers and Context

- `TextContentPartProvider` → `TextMessagePartProvider`
- `TextContentPartProviderProps` → `TextMessagePartProviderProps`
- `ContentPartRuntimeProvider` → `MessagePartRuntimeProvider`
- `ContentPartContext` → `MessagePartContext`
- `ContentPartContextValue` → `MessagePartContextValue`

#### Primitives

- `ContentPartPrimitive` → `MessagePartPrimitive`
- `ContentPartPrimitiveText` → `MessagePartPrimitiveText`
- `ContentPartPrimitiveImage` → `MessagePartPrimitiveImage`
- `ContentPartPrimitiveInProgress` → `MessagePartPrimitiveInProgress`

### MessagePrimitive.Content renamed to MessagePrimitive.Parts

The `MessagePrimitive.Content` component has been renamed to `MessagePrimitive.Parts` to better reflect its purpose of rendering message parts.

```diff
-<MessagePrimitive.Content components={{ Text: MyText }} />
+<MessagePrimitive.Parts components={{ Text: MyText }} />
```

### Migration

To migrate your codebase automatically, use the migration codemod:

```sh
# IMPORTANT: make sure to commit all changes to git / create a backup before running the codemod
npx @assistant-ui/cli upgrade
```

Or run the specific migration:

```sh
npx @assistant-ui/cli codemod v0-11/content-part-to-message-part .
```

#### Manual Migration Examples

If you prefer to migrate manually, here are some examples:

**Imports:**

```diff
-import { TextContentPart, useContentPart, ToolCallContentPartComponent } from "@assistant-ui/react";
+import { TextMessagePart, useMessagePart, ToolCallMessagePartComponent } from "@assistant-ui/react";
```

**Type annotations:**

```diff
-function processContent(part: TextContentPart): void {
+function processContent(part: TextMessagePart): void {
   console.log(part.text);
 }

-const MyTool: ToolCallContentPartComponent = ({ toolName }) => {
+const MyTool: ToolCallMessagePartComponent = ({ toolName }) => {
   return <div>{toolName}</div>;
 };
```

**Hooks:**

```diff
 function MyComponent() {
-  const part = useContentPart();
-  const text = useContentPartText();
-  const runtime = useContentPartRuntime();
+  const part = useMessagePart();
+  const text = useMessagePartText();
+  const runtime = useMessagePartRuntime();
   return null;
 }
```

**JSX Components:**

```diff
-<ContentPartPrimitive.Text />
-<ContentPartPrimitive.Image />
+<MessagePartPrimitive.Text />
+<MessagePartPrimitive.Image />
```

**Providers:**

```diff
-<TextContentPartProvider text="Hello" isRunning={false}>
+<TextMessagePartProvider text="Hello" isRunning={false}>
   <div>Content</div>
-</TextContentPartProvider>
+</TextMessagePartProvider>
```

### Why this change?

The ContentPart naming was inconsistent with the rest of the codebase, where "message parts" are used throughout. This change improves semantic clarity and makes the API more intuitive by aligning terminology across the entire library.

The old ContentPart APIs continue to work but are now deprecated and will be removed in a future major version.



================================================
FILE: apps/docs/content/docs/migrations/v0-7.mdx
================================================
---
title: Migration to v0.7
---

import { Callout } from "fumadocs-ui/components/callout";

This guide serves as a reference for users facing breaking changes during upgrade to v0.7. You do not need to read this guide to upgrade to v0.7.

All breaking changes in v0.7 are renames or removals of existing APIs. Therefore, all breaking changes should cause a Typescript error, so you can simply check for errors after upgrading.

### Component Property Types moved to `Component.Props`

Component property types are now neatly organized under the component itself.

```diff
-import { ThreadPrimitiveMessagesProps } from "@assistant-ui/react";
+import { ThreadPrimitive } from "@assistant-ui/react";

-type Props = ThreadPrimitiveMessagesProps;
+type Props = ThreadPrimitive.Messages.Props;
```

## Context API simplifications

### `useThreadContext`, `useMessageContext`, ... replaced with direct imports of stores

`useAssistantContext`, `useThreadContext`, `useMessageContext` and `useMessagePartContext` have been removed in favor of direct exports from `@assistant-ui/react`;

```diff
-const { useThread } = useThreadContext();

+import { useThread } from "@assistant-ui/react";
```

# Assistant Context API simplifications

### `useAssistantActions` replaced with `useAssistantRuntime`

`useAssistantActions` has been removed in favor of `useAssistantRuntime`.

```diff
-const switchToNewThread = useAssistantActions(a => a.switchToNewThread);
+const runtime = useAssistantRuntime();
+runtime.switchToNewThread();
```

### `switchToThread(null)` replaced with `switchToNewThread()`

```diff
-useThreadRuntime().switchToThread(null);
+useThreadRuntime().switchToNewThread();
```

### useSwtichToNewThread() moved to useAssistantRuntime().switchToNewThread()

```diff
-useSwitchToNewThread();
+const runtime = useAssistantRuntime()
+runtime.switchToNewThread();
```

### `runtime.subscribe` removed, `subscribeToMainThread` removed

Previously, you needed to subscribe to the runtime to receive updates whenever the main thread changed and resubscribe to the main thread whenever you switched to a new thread. The `runtime.thread` value now always refers to the current main thread, there is no need to subscribe to the runtime anymore.

## ThreadRuntime API simplifications

### `useAppendMessage` moved to `useThreadRuntime().append()`

```diff
-const append = useAppendMessage();
+const threadRuntime = useThreadRuntime();
-append("hello world");
+threadRuntime.append("hello world");
```

### `useThreadActions` replaced with `useThreadRuntime`

`useThreadActions` has been removed in favor of `useThreadRuntime`.

```diff
-const reload = useThreadActions(a => a.reload);
+const threadRuntime = useThreadRuntime();
+threadRuntime.reload();
```

### State values moved to `threadRuntime.getState()`

In order to make it clear that accessing the state only provides a snapshot of the current state and will not cause a re-render on changes, the state values of `useThreadRuntime` have been moved to `threadRuntime.getState()`.

```diff
-const isRunning = useThreadRuntime().isRunning; // anti-pattern, your code will not update on change
+const isRunning = useThread(t => t.isRunning);
```

### `useThreadStore` replaced with `useThreadRuntime().getState()`

`useThreadStore` has been removed in favor of `useThreadRuntime().getState()`.

### `threadRuntime.getBranches()` replaced with `useThreadRuntime().getMessageByIndex(idx).getState().branchNumber/Count`

The branch IDs are an internal implementation detail. The new Message Runtime API provides `branchNumber` and `branchCount` state fields that can be used instead.

### New Message Runtime API replaces several methods from `useThreadRuntime`

A few methods from `useThreadRuntime` have been moved to `useMessageRuntime()`.

- `threadRuntime.switchToBranch()` has been removed in favor of `useThreadRuntime().getMessageByIndex(idx).switchToBranch()`.
- `threadRuntime.addToolResult()` has been removed in favor of `useThreadRuntime().getMessageByIndex(idx).getMessagePartByToolCallId(toolCallId).addToolResult()`.
- `threadRuntime.speak()` has been removed in favor of `useThreadRuntime().getMessageByIndex(idx).speak()`.
- `threadRuntime.submitFeedback()` has been removed in favor of `useThreadRuntime().getMessageByIndex(idx).submitFeedback()`.
- `threadRuntime.getEditComposer()` has been removed in favor of `useThreadRuntime().getMessageById(id).getMessageByIndex(idx).composer`.
- `threadRuntime.beginEdit()` has been removed in favor of `useThreadRuntime().getMessageById(id).getMessageByIndex(idx).composer.beginEdit()`.

## Composer Runtime API simplifications

### Methods inside `useComposer` moved to `useComposerRuntime`

`useComposer()` used to provide several methods such as `setText`, `addAttachment`, `send`, `edit`, `cancel`, ...
These methods have been moved to `useComposerRuntime()`.

### `useComposerStore` replaced with `useComposerRuntime().getState()`

`useComposerStore` has been removed in favor of `useComposerRuntime().getState()`.

### `value` `setValue` replaced with `text` `setText`

```diff
-useComposer(c => c.value);
+useComposer(c => c.text);
```

### `focus`, `onFocus` methods removed

These methods have been removed.

## Message Context API simplifications

### Flattened context values `useMessage().message` -> `useMessage()`

`MessageState` is now itself a message, so you no longer need to access the nested `useMessage().message` field.

```diff
-useMessage(m => m.message.content);
+useMessage(m => m.content);
```

### `useMessageStore` replaced with `useMessageRuntime().getState()`

`useMessageStore` has been removed in favor of `useMessageRuntime().getState()`.

## Message part Context API simplifications

### Flattened context values `useMessagePart().part` -> `useMessagePart()`

`MessagePartState` is now itself a message part, so you no longer need to access the nested `useMessagePart().part` field.

```diff
-useMessagePart(c => c.part.type);
+useMessagePart(c => c.type);
```

This also applies to tool UI render functions:

```diff
 makeAssistantToolUI({
   ...
-  render: ({ part: { args } }) => <>{args}</>,
+  render: ({ args }) => <>{args}</>,
 });
```

## Attachment Context API simplifications

### Flattened context values `useAttachment().attachment` -> `useAttachment()`

`AttachmentState` is now itself an attachment, so you no longer need to access the nested `useAttachment().attachment` field.

```diff
-useAttachment(a => a.attachment.type);
+useAttachment(a => a.type);
```

## Roundtrips renamed to steps

`AssistantMessage.roundtrips` was renamed to `AssistantMessage.metadata.steps`.

Edge runtime's `maxToolRoundtrips` was replaced with `maxSteps` (which is `maxToolRoundtrips` + 1; if you had `maxToolRoundtrips` at 2, set `maxSteps` to 3).



================================================
FILE: apps/docs/content/docs/migrations/v0-8.mdx
================================================
---
title: Migration to v0.8
---

## Styled Components moved to @assistant-ui/react-ui

All styled components (Thread, ThreadList, AssistantModal, makeMarkdownText, etc.) have been moved to a new package, `@assistant-ui/react-ui`.

To migrate, use the migration codemod:

```sh
# IMPORTANT: make sure to commit all changes to git / creating a backup before running the codemod
npx assistant-ui upgrade
```

## Vercel AI SDK RSC requires additional setup

Built-in RSC support in assistant-ui has been removed, so an additional setup step is required.
The RSC runtime now requires additional setup to display React Server Components.

```ts
import { RSCDisplay } from "@assistant-ui/react-ai-sdk";

// if you are using the default Thread component
// add RSCDisplay to assistantMessage.components.Text
<Thread assistantMessage={{ components: { Text: RSCDisplay } }} />


// if you are using unstyled primitives, update MyThread.tsx
<MessagePrimitive.Parts components={{ Text: RSCDisplay }} />
```

## Migrate away from UIMessagePart

For instructions on migrating for Vercel AI SDK RSC, see section above.
This migration guide is for users of `useExternalStoreRuntime`.

### Recommended Approach: Use ToolUI

First, reconsider your approach.

Creating UI components in the `convertMessage` callback is considered an anti-pattern.
The recommended alternative approach is to pass tool-call message parts, and use `makeAssistantToolUI` to map these tool calls to UI components.

This ensures that the data layer is separate and decoupled from the UI layer.

#### Example

Consider the following example, where you are using a UIMessagePart to show a loading indicator.

```ts title="bad.ts"
// THIS IS BAD
const convertMessage = (message: MyMessage): ThreadMessageLike => {
  if (message.isLoading) {
    return { content: [{ type: "ui", display:< MyLoader /> }] };
  }
  // ...
};
```

```ts title="good.ts"
const convertMessage = (message: MyMessage): ThreadMessageLike => {
  if (message.isLoading) {
    return { content: [] };
  }
  // ...
};

// use the empty message part to show the loading indicator
<Thread assistantMessage={{ components: { Empty: MyLoader } }} />;
```

(if you are using unstyled primitives, update MyThread.tsx, and pass the component to MessagePrimitive.Parts)

#### Example 2

Consider the following example, where you are displaying a custom chart based on data received from an external source.

```ts title="bad.ts"
// THIS IS BAD
const convertMessage = (message: MyMessage): ThreadMessageLike => {
  return { content: [{ type: "ui", display: <MyChart data={message.chartData} /> }] };
};
```

```ts title="good.ts"
const convertMessage = (message: MyMessage): ThreadMessageLike => {
  return {
    content: [
      {
        type: "tool-call",
        toolName: "chart",
        args: message.chartData,
      },
    ],
  };
};

const ChartToolUI = makeAssistantToolUI({
  toolName: "chart",
  render: ({ args }) => <MyChart data={args} />,
});

// use tool UI to display the chart
<Thread tools={[ChartToolUI]} />;
```

(if you are using unstyled primitives, render the `<ChartToolUI />` component anywhere inside your AssistantRuntimeProvider)

### Fallback Approach: Override MessagePartText

However, sometimes you receive UI components from an external source.

The example below assumes that your custom `MyMessage` type has a `display` field.

First, we define a dummy `UI_PLACEHOLDER` message part, which we will replace with the UI component later:

```ts
const UI_PLACEHOLDER = Object.freeze({
  type: "text",
  text: "UI content placeholder",
});
const convertMessage = (message: MyMessage): ThreadMessageLike => ({
  content: [
    // other message parts,
    UI_PLACEHOLDER,
  ],
});
```

Then, we define a custom `TextMessagePartComponent`:

```tsx
const MyText: TextMessagePartComponent = () => {
  const isUIPlaceholder = useMessagePart((p) => p === UI_PLACEHOLDER);

  // this assumes that you have a `display` field on your original message objects before conversion.
  const ui = useMessage((m) =>
    isUIPlaceholder ? getExternalStoreMessage(m).display : undefined,
  );
  if (ui) {
    return ui;
  }

  return <MarkdownText />; // your default text component
};
```

We pass this component to our Thread:

```tsx
<Thread
  assistantMessage={{ components: { Text: MyText } }}
  userMessage={{ components: { Text: MyText } }}
/>
```

(if you are using unstyled primitives, update MyThread.tsx, and pass the component to MessagePrimitive.Parts)

Now, the `UI_PLACEHOLDER` message part is replaced with the UI component we defined earlier.



================================================
FILE: apps/docs/content/docs/migrations/v0-9.mdx
================================================
---
title: Migration to v0.9
---

## Edge Runtime moved to @assistant-ui/react-edge

The edge runtime, as well as the `CoreMessage` type, moved to `@assistant-ui/react-edge`.

The following components and types have been moved to `@assistant-ui/react-edge`:

- Edge Runtime

  - `useEdgeRuntime`
  - `EdgeRuntimeOptions`
  - `EdgeModelAdapter`
  - `EdgeChatAdapter`
  - `EdgeRuntimeRequestOptions`
  - `createEdgeRuntimeAPI`
  - `getEdgeRuntimeResponse`

- Core Types
  - `CoreMessage`
  - `CoreUserMessage`
  - `CoreAssistantMessage`
  - `CoreSystemMessage`
  - `CoreUserMessagePart`
  - `CoreAssistantMessagePart`
  - `CoreToolCallMessagePart`
- Core message converters
  - `fromCoreMessages`
  - `fromCoreMessage`
  - `toCoreMessages`
  - `toCoreMessage`

To migrate, use the migration codemod:

```sh
# IMPORTANT: make sure to commit all changes to git / creating a backup before running the codemod
npx assistant-ui upgrade
```

## Language Model converters and useDangerousInBrowserRuntime moved to @assistant-ui/react-ai-sdk

The following methods have been moved to `@assistant-ui/react-ai-sdk`:

- Language Model converters
  - `toLanguageModelMessages`
  - `toLanguageModelTools`
  - `fromLanguageModelMessages`
  - `fromLanguageModelTools`
- Dangerous in Browser Runtime
  - `useDangerousInBrowserRuntime`

To migrate, use the migration codemod:

```sh
# IMPORTANT: make sure to commit all changes to git / creating a backup before running the codemod
npx assistant-ui upgrade
```

## LangGraph `unstable_allowImageAttachments` removed

The `unstable_allowImageAttachments` option has been removed. Use the `adapters` option instead.

```ts
useLangGraphRuntime({
  adapters: {
    attachments: new SimpleImageAttachmentAdapter(),
  },
});
```

## Markdown `components.by_language` removed

The `components.by_language` option has been removed. Use the `componentsByLanguage` option instead.



================================================
FILE: apps/docs/content/docs/runtimes/helicone.mdx
================================================
---
title: Helicone
---

Helicone acts as a proxy for your OpenAI API calls, enabling detailed logging and monitoring. To integrate, update your API base URL and add the Helicone-Auth header.

## AI SDK by vercel

1. **Set Environment Variables:**

   - `HELICONE_API_KEY`
   - `OPENAI_API_KEY`

2. **Configure the OpenAI client:**

```ts
import { createOpenAI } from "@ai-sdk/openai";
import { streamText } from "ai";

const openai = createOpenAI({
  baseURL: "https://oai.helicone.ai/v1",
  headers: {
    "Helicone-Auth": `Bearer ${process.env.HELICONE_API_KEY}`,
  },
});

export async function POST(req: Request) {
  const { prompt } = await req.json();
  return streamText({
    model: openai("gpt-4o"),
    prompt,
  });
}
```

## LangChain Integration (Python)

1. **Set Environment Variables:**

   - `HELICONE_API_KEY`
   - `OPENAI_API_KEY`

2. **Configure ChatOpenAI:**

```python
from langchain.chat_models import ChatOpenAI
import os

llm = ChatOpenAI(
    model_name="gpt-3.5-turbo",
    temperature=0,
    openai_api_base="https://oai.helicone.ai/v1",
    openai_api_key=os.environ["OPENAI_API_KEY"],
    openai_api_headers={"Helicone-Auth": f"Bearer {os.environ['HELICONE_API_KEY']}"}
)
```

## Summary

Update your API base URL to `https://oai.helicone.ai/v1` and add the `Helicone-Auth` header with your API key either in your Vercel AI SDK or LangChain configuration.



================================================
FILE: apps/docs/content/docs/runtimes/langserve.mdx
================================================
---
title: LangChain LangServe
---

## Overview

Integration with a LangServe server via Vercel AI SDK.

## Getting Started

import { Steps, Step } from "fumadocs-ui/components/steps";

<Steps>
  <Step>
  ### Create a Next.JS project

```sh
npx create-next-app@latest my-app
cd my-app
```

  </Step>
  <Step>

### Install `@langchain/core`, `ai-sdk` and `@assistant-ui/react`

```sh npm2yarn
npm install @assistant-ui/react @assistant-ui/react-ai-sdk ai @ai-sdk/react @langchain/core
```

  </Step>
  <Step>

### Setup a backend route under `/api/chat`

```tsx twoslash title="@/app/api/chat/route.ts"
// @errors: 2558 2345
import { RemoteRunnable } from "@langchain/core/runnables/remote";
import type { RunnableConfig } from "@langchain/core/runnables";
import { streamText, LangChainAdapter, type Message } from "ai";

export const maxDuration = 30;

export async function POST(req: Request) {
  const { messages } = (await req.json()) as { messages: Message[] };

  // TODO replace with your own langserve URL
  const remoteChain = new RemoteRunnable<
    { messages: Message[] },
    string,
    RunnableConfig
  >({
    url: "<YOUR_LANGSERVE_URL>",
  });

  const stream = await remoteChain.stream({
    messages,
  });

  return LangChainAdapter.toDataStreamResponse(stream);
}
```

  </Step>
  <Step>

### Define a `MyRuntimeProvider` component

```tsx twoslash include MyRuntimeProvider title="@/app/MyRuntimeProvider.tsx"
// @filename: /app/MyRuntimeProvider.tsx
// ---cut---
"use client";

import { useChat } from "@ai-sdk/react";
import { AssistantRuntimeProvider } from "@assistant-ui/react";
import { useVercelUseChatRuntime } from "@assistant-ui/react-ai-sdk";

export function MyRuntimeProvider({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const chat = useChat({
    api: "/api/chat",
    unstable_AISDKInterop: true,
  });

  const runtime = useVercelUseChatRuntime(chat);

  return (
    <AssistantRuntimeProvider runtime={runtime}>
      {children}
    </AssistantRuntimeProvider>
  );
}
```

  </Step>
  <Step>

### Wrap your app in `MyRuntimeProvider`

```tsx twoslash title="@/app/layout.tsx"
// @include: MyRuntimeProvider
// @filename: /app/layout.tsx
// ---cut---
import type { ReactNode } from "react";
import { MyRuntimeProvider } from "@/app/MyRuntimeProvider";

export default function RootLayout({
  children,
}: Readonly<{
  children: ReactNode;
}>) {
  return (
    <MyRuntimeProvider>
      <html lang="en">
        <body>{children}</body>
      </html>
    </MyRuntimeProvider>
  );
}
```

  </Step>
</Steps>



================================================
FILE: apps/docs/content/docs/runtimes/meta.json
================================================
{
  "title": "Runtime",
  "pages": [
    "pick-a-runtime",
    "ai-sdk",
    "mastra",
    "langgraph",
    "langserve",
    "external-store",
    "custom-rest",
    "helicone",
    "..."
  ]
}



================================================
FILE: apps/docs/content/docs/runtimes/pick-a-runtime.mdx
================================================
---
title: Picking a Runtime
---

import { Card, Cards } from "fumadocs-ui/components/card";
import { Callout } from "fumadocs-ui/components/callout";

Choosing the right runtime is crucial for your assistant-ui implementation. This guide helps you navigate the options based on your specific needs.

## Quick Decision Tree

```mermaid
graph TD
    A[What's your starting point?] --> B{Existing Framework?}
    B -->|Vercel AI SDK| C[Use AI SDK Integration]
    B -->|LangGraph| D[Use LangGraph Runtime]
    B -->|LangServe| E[Use LangServe Runtime]
    B -->|Mastra| F[Use Mastra Runtime]
    B -->|Custom Backend| G{State Management?}
    G -->|Let assistant-ui handle it| H[Use LocalRuntime]
    G -->|I'll manage it myself| I[Use ExternalStoreRuntime]
```

## Core Runtimes

These are the foundational runtimes that power assistant-ui:

<Cards>
  <Card
    title="`LocalRuntime`"
    description="assistant-ui manages chat state internally. Simple adapter pattern for any backend."
    href="/docs/runtimes/custom/local"
  />
  <Card
    title="`ExternalStoreRuntime`"
    description="You control the state. Perfect for Redux, Zustand, or existing state management."
    href="/docs/runtimes/custom/external-store"
  />
</Cards>

## Pre-Built Integrations

For popular frameworks, we provide ready-to-use integrations built on top of our core runtimes:

<Cards>
  <Card
    title="Vercel AI SDK"
    description="For useChat and useAssistant hooks - streaming with all major providers"
    href="/docs/runtimes/ai-sdk/use-chat"
  />
  <Card
    title="LangGraph"
    description="For complex agent workflows with LangChain's graph framework"
    href="/docs/runtimes/langgraph"
  />
  <Card
    title="LangServe"
    description="For LangChain applications deployed with LangServe"
    href="/docs/runtimes/langserve"
  />
  <Card
    title="Mastra"
    description="For workflow orchestration with Mastra's ecosystem"
    href="/docs/runtimes/mastra/overview"
  />
</Cards>

## Understanding Runtime Architecture

### How Pre-Built Integrations Work

The pre-built integrations (AI SDK, LangGraph, etc.) are **not separate runtime types**. They're convenient wrappers built on top of our core runtimes:

- **AI SDK Integration** → Built on `LocalRuntime` with streaming adapter
- **LangGraph Runtime** → Built on `LocalRuntime` with graph execution adapter
- **LangServe Runtime** → Built on `LocalRuntime` with LangServe client adapter
- **Mastra Runtime** → Built on `LocalRuntime` with workflow adapter

This means you get all the benefits of `LocalRuntime` (automatic state management, built-in features) with zero configuration for your specific framework.

### When to Use Pre-Built vs Core Runtimes

**Use a pre-built integration when:**
- You're already using that framework
- You want the fastest possible setup
- The integration covers your needs

**Use a core runtime when:**
- You have a custom backend
- You need features not exposed by the integration
- You want full control over the implementation

<Callout>
Pre-built integrations can always be replaced with a custom `LocalRuntime` or `ExternalStoreRuntime` implementation if you need more control later.
</Callout>

## Feature Comparison

### Core Runtime Capabilities

| Feature | `LocalRuntime` | `ExternalStoreRuntime` |
| ------- | -------------- | ---------------------- |
| **State Management** | Automatic | You control |
| **Setup Complexity** | Simple | Moderate |
| **Message Editing** | Built-in | Implement `onEdit` |
| **Branch Switching** | Built-in | Implement `setMessages` |
| **Regeneration** | Built-in | Implement `onReload` |
| **Cancellation** | Built-in | Implement `onCancel` |
| **Multi-thread** | Via adapters | Via adapters |

### Available Adapters

| Adapter | `LocalRuntime` | `ExternalStoreRuntime` |
| ------- | -------------- | ---------------------- |
| ChatModel | ✅ Required | ❌ N/A |
| Attachments | ✅ | ✅ |
| Speech | ✅ | ✅ |
| Feedback | ✅ | ✅ |
| History | ✅ | ❌ Use your state |
| Suggestions | ✅ | ❌ Use your state |

## Common Implementation Patterns

### Vercel AI SDK with Streaming

```tsx
import { useChatRuntime } from "@assistant-ui/react-ai-sdk";

export function MyAssistant() {
  const runtime = useChatRuntime({
    api: "/api/chat",
  });

  return (
    <AssistantRuntimeProvider runtime={runtime}>
      <Thread />
    </AssistantRuntimeProvider>
  );
}
```

### Custom Backend with `LocalRuntime`

```tsx
import { useLocalRuntime } from "@assistant-ui/react";

const runtime = useLocalRuntime({
  async run({ messages, abortSignal }) {
    const response = await fetch("/api/chat", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ messages }),
      signal: abortSignal,
    });
    return response.json();
  },
});
```

### Redux Integration with `ExternalStoreRuntime`

```tsx
import { useExternalStoreRuntime } from "@assistant-ui/react";

const messages = useSelector(selectMessages);
const dispatch = useDispatch();

const runtime = useExternalStoreRuntime({
  messages,
  onNew: async (message) => {
    dispatch(addUserMessage(message));
    const response = await api.chat(message);
    dispatch(addAssistantMessage(response));
  },
  setMessages: (messages) => dispatch(setMessages(messages)),
  onEdit: async (message) => dispatch(editMessage(message)),
  onReload: async (parentId) => dispatch(reloadMessage(parentId)),
});
```

## Examples

Explore our implementation examples:

- **[AI SDK Example](https://github.com/assistant-ui/assistant-ui/tree/main/examples/with-ai-sdk)** - Vercel AI SDK with `useChatRuntime`
- **[External Store Example](https://github.com/assistant-ui/assistant-ui/tree/main/examples/with-external-store)** - `ExternalStoreRuntime` with custom state
- **[Assistant Cloud Example](https://github.com/assistant-ui/assistant-ui/tree/main/examples/with-cloud)** - Multi-thread with cloud persistence
- **[LangGraph Example](https://github.com/assistant-ui/assistant-ui/tree/main/examples/with-langgraph)** - Agent workflows
- **[OpenAI Assistants Example](https://github.com/assistant-ui/assistant-ui/tree/main/examples/with-openai-assistants)** - OpenAI Assistants API

## Common Pitfalls to Avoid

### LocalRuntime Pitfalls
- **Forgetting the adapter**: `LocalRuntime` requires a `ChatModelAdapter` - it won't work without one
- **Not handling errors**: Always handle API errors in your adapter's `run` function
- **Missing abort signal**: Pass `abortSignal` to your fetch calls for proper cancellation

### ExternalStoreRuntime Pitfalls
- **Mutating state**: Always create new arrays/objects when updating messages
- **Missing handlers**: Each UI feature requires its corresponding handler (e.g., no edit button without `onEdit`)
- **Forgetting optimistic updates**: Set `isRunning` to `true` for loading states

### General Pitfalls
- **Wrong integration level**: Don't use `LocalRuntime` if you already have Vercel AI SDK - use the AI SDK integration instead
- **Over-engineering**: Start with pre-built integrations before building custom solutions
- **Ignoring TypeScript**: The types will guide you to the correct implementation

## Next Steps

1. **Choose your runtime** based on the decision tree above
2. **Follow the specific guide**:
   - [AI SDK Integration](/docs/runtimes/ai-sdk/use-chat)
   - [`LocalRuntime` Guide](/docs/runtimes/custom/local)
   - [`ExternalStoreRuntime` Guide](/docs/runtimes/custom/external-store)
   - [LangGraph Integration](/docs/runtimes/langgraph)
3. **Start with an example** from our [examples repository](https://github.com/assistant-ui/assistant-ui/tree/main/examples)
4. **Add features progressively** using adapters
5. **Consider Assistant Cloud** for production persistence

<Callout type="info">
Need help? Join our [Discord community](https://discord.gg/assistant-ui) or check the [GitHub](https://github.com/assistant-ui/assistant-ui).
</Callout>



================================================
FILE: apps/docs/content/docs/runtimes/ai-sdk/meta.json
================================================
{
  "title": "AI SDK by Vercel",
  "pages": ["use-chat", "use-chat-hook", "use-assistant-hook", "rsc"]
}



================================================
FILE: apps/docs/content/docs/runtimes/ai-sdk/rsc.mdx
================================================
---
title: Vercel AI SDK RSC Runtime
---

## Overview

Integration with the Vercel AI SDK React Server Components. It allows streaming React components directly from the server.  
Integrates with OpenAI, Anthropic, Mistral, Perplexity, AWS Bedrock, Azure, Google Gemini, Hugging Face, Fireworks, Cohere, LangChain, Replicate, Ollama, and more.

## Example

[RSC Example App](https://assistant-ui-rsc-example.vercel.app/)

## Getting Started

import { Steps, Step } from "fumadocs-ui/components/steps";
import { Callout } from "fumadocs-ui/components/callout";

<Steps>
  <Step>
  ### Create a Next.JS project

```sh
npx create-next-app@latest my-app
cd my-app
```

  </Step>
  <Step>

### Install Vercel AI SDK and `@assistant-ui/react-ai-sdk`

```sh npm2yarn
npm install @assistant-ui/react @assistant-ui/react-ai-sdk ai @ai-sdk/openai zod nanoid
```

  </Step>
  <Step>

### Setup `actions.tsx`

`@/app/actions.tsx`

```tsx
"use server";

import { createAI, getMutableAIState, streamUI } from "ai/rsc";
import { openai } from "@ai-sdk/openai";
import { ReactNode } from "react";
import { z } from "zod";
import { nanoid } from "nanoid";

export interface ServerMessage {
  role: "user" | "assistant";
  content: string;
}

export interface ClientMessage {
  id: string;
  role: "user" | "assistant";
  display: ReactNode;
}

export async function continueConversation(
  input: string,
): Promise<ClientMessage> {
  "use server";

  const history = getMutableAIState();

  const result = await streamUI({
    model: openai("gpt-3.5-turbo"),
    messages: [...history.get(), { role: "user", content: input }],
    text: ({ content, done }) => {
      if (done) {
        history.done((messages: ServerMessage[]) => [
          ...messages,
          { role: "assistant", content },
        ]);
      }

      return <div>{content}</div>;
    },
    tools: {
      deploy: {
        description: "Deploy repository to vercel",
        parameters: z.object({
          repositoryName: z
            .string()
            .describe("The name of the repository, example: vercel/ai-chatbot"),
        }),
        generate: async function* ({ repositoryName }) {
          yield <div>Cloning repository {repositoryName}...</div>; // [!code highlight:5]
          await new Promise((resolve) => setTimeout(resolve, 3000));
          yield <div>Building repository {repositoryName}...</div>;
          await new Promise((resolve) => setTimeout(resolve, 2000));
          return <div>{repositoryName} deployed!</div>;
        },
      },
    },
  });

  return {
    id: nanoid(),
    role: "assistant",
    display: result.value,
  };
}

export const AI = createAI<ServerMessage[], ClientMessage[]>({
  actions: {
    continueConversation,
  },
  initialAIState: [],
  initialUIState: [],
});
```

  </Step>
  <Step>

### Define a `MyRuntimeProvider` component

`@/app/MyRuntimeProvider.tsx`

```tsx
"use client";

import {
  type AppendMessage,
  AssistantRuntimeProvider,
} from "@assistant-ui/react";
import { useVercelRSCRuntime } from "@assistant-ui/react-ai-sdk";
import { useActions, useUIState } from "ai/rsc";
import { nanoid } from "nanoid";

import type { AI } from "./actions";

export function MyRuntimeProvider({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const { continueConversation } = useActions();
  const [messages, setMessages] = useUIState<typeof AI>();

  const onNew = async (m: AppendMessage) => {
    if (m.content[0]?.type !== "text")
      throw new Error("Only text messages are supported");

    const input = m.content[0].text;
    setMessages((currentConversation) => [
      ...currentConversation,
      { id: nanoid(), role: "user", display: input },
    ]);

    const message = await continueConversation(input);

    setMessages((currentConversation) => [...currentConversation, message]);
  };

  const runtime = useVercelRSCRuntime({ messages, onNew });

  return (
    <AssistantRuntimeProvider runtime={runtime}>
      {children}
    </AssistantRuntimeProvider>
  );
}
```

  </Step>
  <Step>

### Wrap your app in `AI` and `MyRuntimeProvider`

`@/app/layout.tsx`

```tsx {1-2,12-13,19-20}
import { AI } from '@/app/actions';
import { MyRuntimeProvider } from '@/app/MyRuntimeProvider';

...

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <AI>
      <MyRuntimeProvider>
        <html lang="en">
          <body className={inter.className}>
            {children}
          </body>
        </html>
      </MyRuntimeProvider>
    </AI>
  )
}
```

  </Step>
</Steps>

## Set up RSCDisplay

Pass the `RSCDisplay` component to your `MessagePrimitive.Parts`:

```tsx
<MessagePrimitive.Parts components={{ Text: RSCDisplay }} />
```

(if you are using react-ui: `<Thread assistantMessage={{ components: { Text: RSCDisplay } }} />`)

## Accessing AI SDK Messages

You can use the `getExternalStoreMessages` utility to convert `ThreadMessage`s back to your message format.

```tsx
const MyAssistantMessage = () => {
  const myMessage = useMessage((m) => getExternalStoreMessages(m)[0]);
  // ...
};
```



================================================
FILE: apps/docs/content/docs/runtimes/ai-sdk/use-assistant-hook.mdx
================================================
---
title: useAssistant Hook Integration
---

## Overview

Integration with the Vercel AI SDK UI's `useAssistant` hook.  
This allows interaction with the OpenAI Assistants API.

## Getting Started

import { Steps, Step } from "fumadocs-ui/components/steps";

<Steps>
  <Step>
  ### Create a Next.JS project

```sh
npx create-next-app@latest my-app
cd my-app
```

  </Step>
  <Step>

### Install Vercel AI SDK and `@assistant-ui/react-ai-sdk`

```sh npm2yarn
npm install @assistant-ui/react @assistant-ui/react-ai-sdk ai openai
```

  </Step>
  <Step>

### Setup a backend route under `/api/assistant`

`/app/api/assistant/route.ts`

```tsx
import { AssistantResponse } from "ai";
import OpenAI from "openai";
import type { Run } from "openai/resources/beta/threads/runs/runs";

const openai = new OpenAI();

// Allow streaming responses up to 30 seconds
export const maxDuration = 30;

export async function POST(req: Request) {
  // Parse the request body
  const input: {
    threadId: string | null;
    message: string;
  } = await req.json();

  // Create a thread if needed
  const threadId = input.threadId ?? (await openai.beta.threads.create({})).id;

  // Add a message to the thread
  const createdMessage = await openai.beta.threads.messages.create(threadId, {
    role: "user",
    content: input.message,
  });

  return AssistantResponse(
    { threadId, messageId: createdMessage.id },
    async ({ forwardStream, sendDataMessage }) => {
      // Run the assistant on the thread
      const runStream = openai.beta.threads.runs.stream(threadId, {
        assistant_id:
          process.env.ASSISTANT_ID ??
          (() => {
            throw new Error("ASSISTANT_ID is not set");
          })(),
      });

      // forward run status would stream message deltas
      let runResult: Run = await forwardStream(runStream);

      // status can be: queued, in_progress, requires_action, cancelling, cancelled, failed, completed, or expired
      while (
        runResult?.status === "requires_action" &&
        runResult.required_action?.type === "submit_tool_outputs"
      ) {
        const tool_outputs =
          runResult.required_action.submit_tool_outputs.tool_calls.map(
            (toolCall: any) => {
              const parameters = JSON.parse(toolCall.function.arguments);

              switch (toolCall.function.name) {
                // configure your tool calls here

                default:
                  throw new Error(
                    `Unknown tool call function: ${toolCall.function.name}`,
                  );
              }
            },
          );

        runResult = await forwardStream(
          openai.beta.threads.runs.submitToolOutputsStream(
            threadId,
            runResult.id,
            { tool_outputs },
          ),
        );
      }
    },
  );
}
```

  </Step>
  <Step>

### Define a `MyRuntimeProvider` component

`@/app/MyRuntimeProvider.tsx`

```tsx
"use client";

import { useAssistant } from "@ai-sdk/react";
import { AssistantRuntimeProvider } from "@assistant-ui/react";
import { useVercelUseAssistantRuntime } from "@assistant-ui/react-ai-sdk";

export function MyRuntimeProvider({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const assistant = useAssistant({
    api: "/api/assistant",
  });

  const runtime = useVercelUseAssistantRuntime(assistant);

  return (
    <AssistantRuntimeProvider runtime={runtime}>
      {children}
    </AssistantRuntimeProvider>
  );
}
```

  </Step>
  <Step>

### Wrap your app in `MyRuntimeProvider`

`@/app/layout.tsx`

```tsx {1,11,17}
import { MyRuntimeProvider } from '@/app/MyRuntimeProvider';

...

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <MyRuntimeProvider>
      <html lang="en">
        <body className={inter.className}>
          {children}
        </body>
      </html>
    </MyRuntimeProvider>
  )
}
```

  </Step>
</Steps>

## Accessing AI SDK Messages

You can use `getExternalStoreMessages` utility to convert `ThreadMessage`s back to `Message`s from AI SDK.

```tsx
const MyAssistantMessage = () => {
  const aiSDKMessages = useMessage((m) => getExternalStoreMessages(m));
  // ...
};

const WeatherToolUI = makeAssistantToolUI({
  render: () => {
    const aiSDKMessage = useMessagePart((p) => getExternalStoreMessages(p)[0]);
    // ...
  },
});
```



================================================
FILE: apps/docs/content/docs/runtimes/ai-sdk/use-chat-hook.mdx
================================================
---
title: useChat Hook Integration (Legacy)
---

## Overview

Integration with the Vercel AI SDK UI's `useChat` hook.  
It allows integration with OpenAI, Anthropic, Mistral, Perplexity, AWS Bedrock, Azure, Google Gemini, Hugging Face, Fireworks, Cohere, LangChain, Replicate, Ollama, and more.

## Getting Started

import { Steps, Step } from "fumadocs-ui/components/steps";

<Steps>
  <Step>
  ### Create a Next.JS project

```sh
npx create-next-app@latest my-app
cd my-app
```

  </Step>
  <Step>

### Install Vercel AI SDK and `@assistant-ui/react`

```sh npm2yarn
npm install @assistant-ui/react @assistant-ui/react-ai-sdk ai @ai-sdk/openai
```

  </Step>
  <Step>

### Setup a backend route under `/api/chat`

`@/app/api/chat/route.ts`

```tsx
import { openai } from "@ai-sdk/openai";
import { streamText } from "ai";

export const maxDuration = 30;

export async function POST(req: Request) {
  const { messages } = await req.json();

  const result = streamText({
    model: openai("gpt-4o"),
    messages: convertToCoreMessages(messages),
  });

  return result.toDataStreamResponse();
}
```

  </Step>
  <Step>

### Define a `MyRuntimeProvider` component

`@/app/MyRuntimeProvider.tsx`

```tsx
"use client";

import { useChat } from "@ai-sdk/react";
import { AssistantRuntimeProvider } from "@assistant-ui/react";
import { useVercelUseChatRuntime } from "@assistant-ui/react-ai-sdk";

export function MyRuntimeProvider({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const chat = useChat({
    api: "/api/chat",
  });

  const runtime = useVercelUseChatRuntime(chat);

  return (
    <AssistantRuntimeProvider runtime={runtime}>
      {children}
    </AssistantRuntimeProvider>
  );
}
```

  </Step>
  <Step>

### Wrap your app in `MyRuntimeProvider`

`@/app/layout.tsx`

```tsx {1,11,17}
import { MyRuntimeProvider } from '@/app/MyRuntimeProvider';

...

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <MyRuntimeProvider>
      <html lang="en">
        <body className={inter.className}>
          {children}
        </body>
      </html>
    </MyRuntimeProvider>
  )
}
```

  </Step>
</Steps>

## Accessing AI SDK Messages

You can use the `getExternalStoreMessages` utility to convert `ThreadMessage`s back to `Message`s from AI SDK.

```tsx
const MyAssistantMessage = () => {
  const aiSDKMessages = useMessage((m) => getExternalStoreMessages(m));
  // ...
};

const WeatherToolUI = makeAssistantToolUI({
  render: () => {
    const aiSDKMessage = useMessagePart((p) => getExternalStoreMessages(p)[0]);
    // ...
  },
});
```



================================================
FILE: apps/docs/content/docs/runtimes/ai-sdk/use-chat.mdx
================================================
---
title: useChatRuntime
---

## Overview

Integration with the Vercel AI SDK UI's `useChat` hook.  
It allows integration with OpenAI, Anthropic, Mistral, Perplexity, AWS Bedrock, Azure, Google Gemini, Hugging Face, Fireworks, Cohere, LangChain, Replicate, Ollama, and more.

## Getting Started

import { Steps, Step } from "fumadocs-ui/components/steps";

<Steps>
  <Step>
  ### Create a Next.JS project

```sh
npx create-next-app@latest my-app
cd my-app
```

  </Step>
  <Step>

### Install Vercel AI SDK and `@assistant-ui/react`

```sh npm2yarn
npm install @assistant-ui/react @assistant-ui/react-ai-sdk ai @ai-sdk/openai
```

  </Step>
  <Step>

### Setup a backend route under `/api/chat`

`@/app/api/chat/route.ts`

```tsx
import { openai } from "@ai-sdk/openai";
import { convertToCoreMessages, streamText } from "ai";

export const maxDuration = 30;

export async function POST(req: Request) {
  const { messages } = await req.json();

  const result = streamText({
    model: openai("gpt-4o"),
    messages: convertToCoreMessages(messages),
  });

  return result.toDataStreamResponse();
}
```

  </Step>
  <Step>

### Define a `MyRuntimeProvider` component

`@/app/MyRuntimeProvider.tsx`

```tsx
"use client";

import { useChat } from "@ai-sdk/react";
import { AssistantRuntimeProvider } from "@assistant-ui/react";
import { useChatRuntime } from "@assistant-ui/react-ai-sdk";

export function MyRuntimeProvider({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const runtime = useChatRuntime({
    api: "/api/chat",
  });

  return (
    <AssistantRuntimeProvider runtime={runtime}>
      {children}
    </AssistantRuntimeProvider>
  );
}
```

  </Step>
  <Step>

### Wrap your app in `MyRuntimeProvider`

`@/app/layout.tsx`

```tsx {1,11,17}
import { MyRuntimeProvider } from '@/app/MyRuntimeProvider';

...

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <MyRuntimeProvider>
      <html lang="en">
        <body className={inter.className}>
          {children}
        </body>
      </html>
    </MyRuntimeProvider>
  )
}
```

  </Step>
</Steps>

## Accessing AI SDK Messages

You can use the `getExternalStoreMessages` utility to convert `ThreadMessage`s back to `Message`s from AI SDK.

```tsx
const MyAssistantMessage = () => {
  const aiSDKMessages = useMessage((m) => getExternalStoreMessages(m));
  // ...
};

const WeatherToolUI = makeAssistantToolUI({
  render: () => {
    const aiSDKMessage = useMessagePart((p) => getExternalStoreMessages(p)[0]);
    // ...
  },
});
```



================================================
FILE: apps/docs/content/docs/runtimes/custom/external-store.mdx
================================================
---
title: ExternalStoreRuntime
---

import { Callout } from "fumadocs-ui/components/callout";
import { Steps, Step } from "fumadocs-ui/components/steps";
import { Card, Cards } from "fumadocs-ui/components/card";
import { ParametersTable } from "@/components/docs";

## Overview

`ExternalStoreRuntime` bridges your existing state management with assistant-ui components. It requires an `ExternalStoreAdapter<TMessage>` that handles communication between your state and the UI.

**Key differences from `LocalRuntime`:**

- **You own the state** - Full control over message state, thread management, and persistence logic
- **Bring your own state management** - Works with Redux, Zustand, TanStack Query, or any React state library
- **Custom message formats** - Use your backend's message structure with automatic conversion

<Callout type="warn">
  `ExternalStoreRuntime` gives you total control over state (persist, sync,
  share), but you must wire up every callback.
</Callout>

## Example Implementation

```tsx twoslash title="app/MyRuntimeProvider.tsx"
type MyMessage = {
  role: "user" | "assistant";
  content: string;
};
const backendApi = async (input: string): Promise<MyMessage> => {
  return { role: "assistant", content: "Hello, world!" };
};

// ---cut---
import { useState, ReactNode } from "react";
import {
  useExternalStoreRuntime,
  ThreadMessageLike,
  AppendMessage,
  AssistantRuntimeProvider,
} from "@assistant-ui/react";

const convertMessage = (message: MyMessage): ThreadMessageLike => {
  return {
    role: message.role,
    content: [{ type: "text", text: message.content }],
  };
};

export function MyRuntimeProvider({
  children,
}: Readonly<{
  children: ReactNode;
}>) {
  const [isRunning, setIsRunning] = useState(false);
  const [messages, setMessages] = useState<MyMessage[]>([]);

  const onNew = async (message: AppendMessage) => {
    if (message.content[0]?.type !== "text")
      throw new Error("Only text messages are supported");

    const input = message.content[0].text;
    setMessages((currentConversation) => [
      ...currentConversation,
      { role: "user", content: input },
    ]);

    setIsRunning(true);
    const assistantMessage = await backendApi(input);
    setMessages((currentConversation) => [
      ...currentConversation,
      assistantMessage,
    ]);
    setIsRunning(false);
  };

  const runtime = useExternalStoreRuntime({
    isRunning,
    messages,
    convertMessage,
    onNew,
  });

  return (
    <AssistantRuntimeProvider runtime={runtime}>
      {children}
    </AssistantRuntimeProvider>
  );
}
```

## When to Use

Use `ExternalStoreRuntime` if you need:

- **Full control over message state** - Manage messages with Redux, Zustand, TanStack Query, or any React state management library
- **Custom multi-thread implementation** - Build your own thread management system with custom storage
- **Integration with existing state** - Keep chat state in your existing state management solution
- **Custom message formats** - Use your backend's message structure with automatic conversion
- **Complex synchronization** - Sync messages with external data sources, databases, or multiple clients
- **Custom persistence logic** - Implement your own storage patterns and caching strategies

## Key Features

<Cards>
  <Card
    title="State Management Integration"
    description="Works seamlessly with Redux, Zustand, TanStack Query, and more"
  />
  <Card
    title="Message Conversion"
    description="Automatic conversion between your message format and assistant-ui's format"
  />
  <Card
    title="Real-time Streaming"
    description="Built-in support for streaming responses and progressive updates"
  />
  <Card
    title="Thread Management"
    description="Multi-conversation support with archiving and thread switching"
  />
</Cards>

## Architecture

### How It Works

`ExternalStoreRuntime` acts as a bridge between your state management and assistant-ui:

```mermaid
graph TD
    A[Your State Management] -->|messages| B[ExternalStoreAdapter]
    B --> C[ExternalStoreRuntime]
    C --> D[assistant-ui Components]
    D -->|user actions| B
    B -->|state updates| A
```

### Key Concepts

1. **State Ownership** - You own and control all message state
2. **Adapter Pattern** - The adapter translates between your state and assistant-ui
3. **Capability-Based Features** - UI features are enabled based on which handlers you provide
4. **Message Conversion** - Automatic conversion between your message format and assistant-ui's format
5. **Optimistic Updates** - Built-in handling for streaming and loading states

## Getting Started

<Steps>
  <Step>
    ### Install Dependencies

    ```sh npm2yarn
    npm install @assistant-ui/react
    ```

  </Step>
  
  <Step>
    ### Create Runtime Provider

    ```tsx title="app/MyRuntimeProvider.tsx"
    "use client";

    import { useState } from "react";
    import {
      useExternalStoreRuntime,
      ThreadMessageLike,
      AppendMessage,
      AssistantRuntimeProvider,
    } from "@assistant-ui/react";

    export function MyRuntimeProvider({ children }) {
      const [messages, setMessages] = useState<ThreadMessageLike[]>([]);
      const [isRunning, setIsRunning] = useState(false);

      const onNew = async (message: AppendMessage) => {
        // Add user message
        const userMessage: ThreadMessageLike = {
          role: "user",
          content: message.content,
        };
        setMessages(prev => [...prev, userMessage]);

        // Generate response
        setIsRunning(true);
        const response = await callYourAPI(message);

        const assistantMessage: ThreadMessageLike = {
          role: "assistant",
          content: response.content,
        };
        setMessages(prev => [...prev, assistantMessage]);
        setIsRunning(false);
      };

      const runtime = useExternalStoreRuntime({
        messages,
        setMessages,
        isRunning,
        onNew,
      });

      return (
        <AssistantRuntimeProvider runtime={runtime}>
          {children}
        </AssistantRuntimeProvider>
      );
    }
    ```

  </Step>

  <Step>
    ### Use in Your App

    ```tsx title="app/page.tsx"
    import { Thread } from "@assistant-ui/react";
    import { MyRuntimeProvider } from "./MyRuntimeProvider";

    export default function Page() {
      return (
        <MyRuntimeProvider>
          <Thread />
        </MyRuntimeProvider>
      );
    }
    ```

  </Step>
</Steps>

## Implementation Patterns

### Message Conversion

Two approaches for converting your message format:

#### 1. Simple Conversion (Recommended)

```tsx
const convertMessage = (message: MyMessage): ThreadMessageLike => ({
  role: message.role,
  content: [{ type: "text", text: message.text }],
  id: message.id,
  createdAt: new Date(message.timestamp),
});

const runtime = useExternalStoreRuntime({
  messages: myMessages,
  convertMessage,
  onNew,
});
```

#### 2. Advanced Conversion with `useExternalMessageConverter`

For complex scenarios with performance optimization:

```tsx
import { useExternalMessageConverter } from "@assistant-ui/react";

const convertedMessages = useExternalMessageConverter({
  messages,
  convertMessage: (message: MyMessage): ThreadMessageLike => ({
    role: message.role,
    content: [{ type: "text", text: message.text }],
    id: message.id,
    createdAt: new Date(message.timestamp),
  }),
  joinStrategy: "concat-content", // Merge adjacent assistant messages
});

const runtime = useExternalStoreRuntime({
  messages: convertedMessages,
  onNew,
  // No convertMessage needed - already converted
});
```

### Join Strategy

Controls how adjacent assistant messages are combined:

- **`concat-content`** (default): Merges adjacent assistant messages into one
- **`none`**: Keeps all messages separate

This is useful when your backend sends multiple message chunks that should appear as a single message in the UI.

<Callout type="info">
  `useExternalMessageConverter` provides performance optimization for complex
  message conversion scenarios. For simpler cases, consider using the basic
  `convertMessage` approach shown above.
</Callout>

### Essential Handlers

#### Basic Chat (onNew only)

```tsx
const runtime = useExternalStoreRuntime({
  messages,
  onNew: async (message) => {
    // Add user message to state
    const userMsg = { role: "user", content: message.content };
    setMessages([...messages, userMsg]);

    // Get AI response
    const response = await callAI(message);
    setMessages([...messages, userMsg, response]);
  },
});
```

#### Full-Featured Chat

```tsx
const runtime = useExternalStoreRuntime({
  messages,
  setMessages, // Enables branch switching
  onNew, // Required
  onEdit, // Enables message editing
  onReload, // Enables regeneration
  onCancel, // Enables cancellation
});
```

<Callout type="info">
  Each handler you provide enables specific UI features: - `setMessages` →
  Branch switching - `onEdit` → Message editing - `onReload` → Regenerate button
  - `onCancel` → Cancel button during generation
</Callout>

### Streaming Responses

Implement real-time streaming with progressive updates:

```tsx
const onNew = async (message: AppendMessage) => {
  // Add user message
  const userMessage: ThreadMessageLike = {
    role: "user",
    content: message.content,
    id: generateId(),
  };
  setMessages((prev) => [...prev, userMessage]);

  // Create placeholder for assistant message
  setIsRunning(true);
  const assistantId = generateId();
  const assistantMessage: ThreadMessageLike = {
    role: "assistant",
    content: [{ type: "text", text: "" }],
    id: assistantId,
  };
  setMessages((prev) => [...prev, assistantMessage]);

  // Stream response
  const stream = await api.streamChat(message);
  for await (const chunk of stream) {
    setMessages((prev) =>
      prev.map((m) =>
        m.id === assistantId
          ? {
              ...m,
              content: [
                {
                  type: "text",
                  text: (m.content[0] as any).text + chunk,
                },
              ],
            }
          : m,
      ),
    );
  }
  setIsRunning(false);
};
```

### Message Editing

Enable message editing by implementing the `onEdit` handler:

<Callout type="info">
  You can also implement `onEdit(editedMessage)` and `onRemove(messageId)`
  callbacks to handle user-initiated edits or deletions in your external store.
  This enables features like "edit and re-run" on your backend.
</Callout>

```tsx
const onEdit = async (message: AppendMessage) => {
  // Find the index where to insert the edited message
  const index = messages.findIndex((m) => m.id === message.parentId) + 1;

  // Keep messages up to the parent
  const newMessages = [...messages.slice(0, index)];

  // Add the edited message
  const editedMessage: ThreadMessageLike = {
    role: "user",
    content: message.content,
    id: message.id || generateId(),
  };
  newMessages.push(editedMessage);

  setMessages(newMessages);

  // Generate new response
  setIsRunning(true);
  const response = await api.chat(message);
  newMessages.push({
    role: "assistant",
    content: response.content,
    id: generateId(),
  });
  setMessages(newMessages);
  setIsRunning(false);
};
```

### Tool Calling

Support tool calls with proper result handling:

```tsx
const onAddToolResult = (options: AddToolResultOptions) => {
  setMessages((prev) =>
    prev.map((message) => {
      if (message.id === options.messageId) {
        // Update the specific tool call with its result
        return {
          ...message,
          content: message.content.map((part) => {
            if (
              part.type === "tool-call" &&
              part.toolCallId === options.toolCallId
            ) {
              return {
                ...part,
                result: options.result,
              };
            }
            return part;
          }),
        };
      }
      return message;
    }),
  );
};

const runtime = useExternalStoreRuntime({
  messages,
  onNew,
  onAddToolResult,
  // ... other props
});
```

#### Automatic Tool Result Matching

The runtime automatically matches tool results with their corresponding tool calls. When messages are converted and joined:

1. **Tool Call Tracking** - The runtime tracks tool calls by their `toolCallId`
2. **Result Association** - Tool results are automatically associated with their corresponding calls
3. **Message Grouping** - Related tool messages are intelligently grouped together

```tsx
// Example: Tool call and result in separate messages
const messages = [
  {
    role: "assistant",
    content: [
      {
        type: "tool-call",
        toolCallId: "call_123",
        toolName: "get_weather",
        args: { location: "San Francisco" },
      },
    ],
  },
  {
    role: "tool",
    content: [
      {
        type: "tool-result",
        toolCallId: "call_123",
        result: { temperature: 72, condition: "sunny" },
      },
    ],
  },
];

// These are automatically matched and grouped by the runtime
```

### File Attachments

Enable file uploads with the attachment adapter:

```tsx
const attachmentAdapter: AttachmentAdapter = {
  accept: "image/*,application/pdf,.txt,.md",
  async add(file) {
    // Upload file to your server
    const formData = new FormData();
    formData.append("file", file);

    const response = await fetch("/api/upload", {
      method: "POST",
      body: formData,
    });

    const { id, url } = await response.json();
    return {
      id,
      type: "document",
      name: file.name,
      file,
      url,
    };
  },
  async remove(attachment) {
    // Remove file from server
    await fetch(`/api/upload/${attachment.id}`, {
      method: "DELETE",
    });
  },
};

const runtime = useExternalStoreRuntime({
  messages,
  onNew,
  adapters: {
    attachments: attachmentAdapter,
  },
});
```

### Thread Management

#### Managing Thread Context

When implementing multi-thread support with `ExternalStoreRuntime`, you need to carefully manage thread context across your application. Here's a comprehensive approach:

```tsx
// Create a context for thread management
const ThreadContext = createContext<{
  currentThreadId: string;
  setCurrentThreadId: (id: string) => void;
  threads: Map<string, ThreadMessageLike[]>;
  setThreads: React.Dispatch<
    React.SetStateAction<Map<string, ThreadMessageLike[]>>
  >;
}>({
  currentThreadId: "default",
  setCurrentThreadId: () => {},
  threads: new Map(),
  setThreads: () => {},
});

// Thread provider component
export function ThreadProvider({ children }: { children: ReactNode }) {
  const [threads, setThreads] = useState<Map<string, ThreadMessageLike[]>>(
    new Map([["default", []]]),
  );
  const [currentThreadId, setCurrentThreadId] = useState("default");

  return (
    <ThreadContext.Provider
      value={{ currentThreadId, setCurrentThreadId, threads, setThreads }}
    >
      {children}
    </ThreadContext.Provider>
  );
}

// Hook for accessing thread context
export function useThreadContext() {
  const context = useContext(ThreadContext);
  if (!context) {
    throw new Error("useThreadContext must be used within ThreadProvider");
  }
  return context;
}
```

#### Complete Thread Implementation

Here's a full implementation with proper context management:

```tsx
function ChatWithThreads() {
  const { currentThreadId, setCurrentThreadId, threads, setThreads } =
    useThreadContext();
  const [threadList, setThreadList] = useState<ExternalStoreThreadData[]>([
    { threadId: "default", status: "regular", title: "New Chat" },
  ]);

  // Get messages for current thread
  const currentMessages = threads.get(currentThreadId) || [];

  const threadListAdapter: ExternalStoreThreadListAdapter = {
    threadId: currentThreadId,
    threads: threadList.filter((t) => t.status === "regular"),
    archivedThreads: threadList.filter((t) => t.status === "archived"),

    onSwitchToNewThread: () => {
      const newId = `thread-${Date.now()}`;
      setThreadList((prev) => [
        ...prev,
        {
          threadId: newId,
          status: "regular",
          title: "New Chat",
        },
      ]);
      setThreads((prev) => new Map(prev).set(newId, []));
      setCurrentThreadId(newId);
    },

    onSwitchToThread: (threadId) => {
      setCurrentThreadId(threadId);
    },

    onRename: (threadId, newTitle) => {
      setThreadList((prev) =>
        prev.map((t) =>
          t.threadId === threadId ? { ...t, title: newTitle } : t,
        ),
      );
    },

    onArchive: (threadId) => {
      setThreadList((prev) =>
        prev.map((t) =>
          t.threadId === threadId ? { ...t, status: "archived" } : t,
        ),
      );
    },

    onDelete: (threadId) => {
      setThreadList((prev) => prev.filter((t) => t.threadId !== threadId));
      setThreads((prev) => {
        const next = new Map(prev);
        next.delete(threadId);
        return next;
      });
      if (currentThreadId === threadId) {
        setCurrentThreadId("default");
      }
    },
  };

  const runtime = useExternalStoreRuntime({
    messages: currentMessages,
    setMessages: (messages) => {
      setThreads((prev) => new Map(prev).set(currentThreadId, messages));
    },
    onNew: async (message) => {
      // Handle new message for current thread
      // Your implementation here
    },
    adapters: {
      threadList: threadListAdapter,
    },
  });

  return (
    <AssistantRuntimeProvider runtime={runtime}>
      <ThreadList />
      <Thread />
    </AssistantRuntimeProvider>
  );
}

// App component with proper context wrapping
export function App() {
  return (
    <ThreadProvider>
      <ChatWithThreads />
    </ThreadProvider>
  );
}
```

#### Thread Context Best Practices

<Callout type="info">
  **Critical**: When using `ExternalStoreRuntime` with threads, the
  `currentThreadId` must be consistent across all components and handlers.
  Mismatched thread IDs will cause messages to appear in wrong threads or
  disappear entirely.
</Callout>

1. **Centralize Thread State**: Always use a context or global state management solution to ensure thread ID consistency:

```tsx
// ❌ Bad: Local state in multiple components
function ThreadList() {
  const [currentThreadId, setCurrentThreadId] = useState("default");
  // This won't sync with the runtime!
}

// ✅ Good: Shared context
function ThreadList() {
  const { currentThreadId, setCurrentThreadId } = useThreadContext();
  // Thread ID is synchronized everywhere
}
```

2. **Sync Thread Changes**: Ensure all thread-related operations update both the thread ID and messages:

```tsx
// ❌ Bad: Only updating thread ID
onSwitchToThread: (threadId) => {
  setCurrentThreadId(threadId);
  // Messages won't update!
};

// ✅ Good: Complete state update
onSwitchToThread: (threadId) => {
  setCurrentThreadId(threadId);
  // Messages automatically update via currentMessages = threads.get(currentThreadId)
};
```

3. **Handle Edge Cases**: Always provide fallbacks for missing threads:

```tsx
// Ensure thread always exists
const currentMessages = threads.get(currentThreadId) || [];

// Initialize new threads properly
const initializeThread = (threadId: string) => {
  if (!threads.has(threadId)) {
    setThreads((prev) => new Map(prev).set(threadId, []));
  }
};
```

4. **Persist Thread State**: For production apps, sync thread state with your backend:

```tsx
// Save thread state to backend
useEffect(() => {
  const saveThread = async () => {
    await api.saveThread(currentThreadId, threads.get(currentThreadId) || []);
  };

  const debounced = debounce(saveThread, 1000);
  debounced();

  return () => debounced.cancel();
}, [currentThreadId, threads]);
```

## Integration Examples

### Redux Integration

```tsx title="app/chatSlice.ts"
// Using Redux Toolkit (recommended)
import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import { ThreadMessageLike } from "@assistant-ui/react";

interface ChatState {
  messages: ThreadMessageLike[];
  isRunning: boolean;
}

const chatSlice = createSlice({
  name: "chat",
  initialState: {
    messages: [] as ThreadMessageLike[],
    isRunning: false,
  },
  reducers: {
    setMessages: (state, action: PayloadAction<ThreadMessageLike[]>) => {
      state.messages = action.payload;
    },
    addMessage: (state, action: PayloadAction<ThreadMessageLike>) => {
      state.messages.push(action.payload);
    },
    setIsRunning: (state, action: PayloadAction<boolean>) => {
      state.isRunning = action.payload;
    },
  },
});

export const { setMessages, addMessage, setIsRunning } = chatSlice.actions;
export const selectMessages = (state: RootState) => state.chat.messages;
export const selectIsRunning = (state: RootState) => state.chat.isRunning;
export default chatSlice.reducer;

// ReduxRuntimeProvider.tsx
import { useSelector, useDispatch } from "react-redux";
import {
  selectMessages,
  selectIsRunning,
  addMessage,
  setMessages,
  setIsRunning,
} from "./chatSlice";

export function ReduxRuntimeProvider({ children }) {
  const messages = useSelector(selectMessages);
  const isRunning = useSelector(selectIsRunning);
  const dispatch = useDispatch();

  const runtime = useExternalStoreRuntime({
    messages,
    isRunning,
    setMessages: (messages) => dispatch(setMessages(messages)),
    onNew: async (message) => {
      // Add user message
      dispatch(
        addMessage({
          role: "user",
          content: message.content,
          id: `msg-${Date.now()}`,
          createdAt: new Date(),
        }),
      );

      // Generate response
      dispatch(setIsRunning(true));
      const response = await api.chat(message);
      dispatch(
        addMessage({
          role: "assistant",
          content: response.content,
          id: `msg-${Date.now()}`,
          createdAt: new Date(),
        }),
      );
      dispatch(setIsRunning(false));
    },
  });

  return (
    <AssistantRuntimeProvider runtime={runtime}>
      {children}
    </AssistantRuntimeProvider>
  );
}
```

### Zustand Integration (v5)

```tsx title="app/chatStore.ts"
// Using Zustand v5 with TypeScript
import { create } from "zustand";
import { immer } from "zustand/middleware/immer";
import { ThreadMessageLike } from "@assistant-ui/react";

interface ChatState {
  messages: ThreadMessageLike[];
  isRunning: boolean;
  addMessage: (message: ThreadMessageLike) => void;
  setMessages: (messages: ThreadMessageLike[]) => void;
  setIsRunning: (isRunning: boolean) => void;
  updateMessage: (id: string, updates: Partial<ThreadMessageLike>) => void;
}

// Zustand v5 requires the extra parentheses for TypeScript
const useChatStore = create<ChatState>()(
  immer((set) => ({
    messages: [],
    isRunning: false,

    addMessage: (message) =>
      set((state) => {
        state.messages.push(message);
      }),

    setMessages: (messages) =>
      set((state) => {
        state.messages = messages;
      }),

    setIsRunning: (isRunning) =>
      set((state) => {
        state.isRunning = isRunning;
      }),

    updateMessage: (id, updates) =>
      set((state) => {
        const index = state.messages.findIndex((m) => m.id === id);
        if (index !== -1) {
          Object.assign(state.messages[index], updates);
        }
      }),
  })),
);

// ZustandRuntimeProvider.tsx
import { useShallow } from "zustand/shallow";

export function ZustandRuntimeProvider({ children }) {
  // Use useShallow to prevent unnecessary re-renders
  const { messages, isRunning, addMessage, setMessages, setIsRunning } =
    useChatStore(
      useShallow((state) => ({
        messages: state.messages,
        isRunning: state.isRunning,
        addMessage: state.addMessage,
        setMessages: state.setMessages,
        setIsRunning: state.setIsRunning,
      })),
    );

  const runtime = useExternalStoreRuntime({
    messages,
    isRunning,
    setMessages,
    onNew: async (message) => {
      // Add user message
      addMessage({
        role: "user",
        content: message.content,
        id: `msg-${Date.now()}`,
        createdAt: new Date(),
      });

      // Generate response
      setIsRunning(true);
      const response = await api.chat(message);
      addMessage({
        role: "assistant",
        content: response.content,
        id: `msg-${Date.now()}-assistant`,
        createdAt: new Date(),
      });
      setIsRunning(false);
    },
  });

  return (
    <AssistantRuntimeProvider runtime={runtime}>
      {children}
    </AssistantRuntimeProvider>
  );
}
```

### TanStack Query Integration

```tsx title="app/chatQueries.ts"
// Using TanStack Query v5 with TypeScript
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { ThreadMessageLike, AppendMessage } from "@assistant-ui/react";

// Query key factory pattern
export const messageKeys = {
  all: ["messages"] as const,
  thread: (threadId: string) => [...messageKeys.all, threadId] as const,
};

// TanStackQueryRuntimeProvider.tsx
export function TanStackQueryRuntimeProvider({ children }) {
  const queryClient = useQueryClient();
  const threadId = "main"; // Or from context/props

  const { data: messages = [] } = useQuery({
    queryKey: messageKeys.thread(threadId),
    queryFn: () => fetchMessages(threadId),
    staleTime: 1000 * 60 * 5, // Consider data fresh for 5 minutes
  });

  const sendMessage = useMutation({
    mutationFn: api.chat,

    // Optimistic updates with proper TypeScript types
    onMutate: async (message: AppendMessage) => {
      // Cancel any outgoing refetches
      await queryClient.cancelQueries({
        queryKey: messageKeys.thread(threadId),
      });

      // Snapshot the previous value
      const previousMessages = queryClient.getQueryData<ThreadMessageLike[]>(
        messageKeys.thread(threadId),
      );

      // Optimistically update with typed data
      const optimisticMessage: ThreadMessageLike = {
        role: "user",
        content: message.content,
        id: `temp-${Date.now()}`,
        createdAt: new Date(),
      };

      queryClient.setQueryData<ThreadMessageLike[]>(
        messageKeys.thread(threadId),
        (old = []) => [...old, optimisticMessage],
      );

      return { previousMessages, tempId: optimisticMessage.id };
    },

    onSuccess: (response, variables, context) => {
      // Replace optimistic message with real data
      queryClient.setQueryData<ThreadMessageLike[]>(
        messageKeys.thread(threadId),
        (old = []) => {
          // Remove temp message and add real ones
          return old
            .filter((m) => m.id !== context?.tempId)
            .concat([
              {
                role: "user",
                content: variables.content,
                id: `user-${Date.now()}`,
                createdAt: new Date(),
              },
              response,
            ]);
        },
      );
    },

    onError: (error, variables, context) => {
      // Rollback to previous messages on error
      if (context?.previousMessages) {
        queryClient.setQueryData(
          messageKeys.thread(threadId),
          context.previousMessages,
        );
      }
    },

    onSettled: () => {
      // Always refetch after error or success
      queryClient.invalidateQueries({
        queryKey: messageKeys.thread(threadId),
      });
    },
  });

  const runtime = useExternalStoreRuntime({
    messages,
    isRunning: sendMessage.isPending,
    onNew: async (message) => {
      await sendMessage.mutateAsync(message);
    },
    // Enable message editing
    setMessages: (newMessages) => {
      queryClient.setQueryData(messageKeys.thread(threadId), newMessages);
    },
  });

  return (
    <AssistantRuntimeProvider runtime={runtime}>
      {children}
    </AssistantRuntimeProvider>
  );
}
```

## Key Features

### Automatic Optimistic Updates

When `isRunning` becomes true, the runtime automatically shows an optimistic assistant message:

```tsx
// Your code
setIsRunning(true);

// Runtime automatically:
// 1. Shows empty assistant message with "in_progress" status
// 2. Displays typing indicator
// 3. Updates status to "complete" when isRunning becomes false
```

### Message Status Management

Assistant messages get automatic status updates:

- `"in_progress"` - When `isRunning` is true
- `"complete"` - When `isRunning` becomes false
- `"cancelled"` - When cancelled via `onCancel`

### Tool Result Matching

The runtime automatically matches tool results with their calls:

```tsx
// Tool call and result can be in separate messages
const messages = [
  {
    role: "assistant",
    content: [
      {
        type: "tool-call",
        toolCallId: "call_123",
        toolName: "get_weather",
        args: { location: "SF" },
      },
    ],
  },
  {
    role: "tool",
    content: [
      {
        type: "tool-result",
        toolCallId: "call_123",
        result: { temp: 72 },
      },
    ],
  },
];
// Runtime automatically associates these
```

## Working with External Messages

### Converting Back to Your Format

Use `getExternalStoreMessages` to access your original messages:

```tsx
import { getExternalStoreMessages } from "@assistant-ui/react";

const MyComponent = () => {
  const originalMessages = useMessage((m) => getExternalStoreMessages(m));
  // originalMessages is MyMessage[] (your original type)
};
```

<Callout type="info">
  After the chat finishes, use `getExternalStoreMessages(runtime)` to convert
  back to your domain model. Refer to the API reference for return structures
  and edge-case behaviors.
</Callout>

<Callout type="warning">
  `getExternalStoreMessages` may return multiple messages for a single UI
  message. This happens because assistant-ui merges adjacent assistant and tool
  messages for display.
</Callout>

### Message part Access

```tsx
const ToolUI = makeAssistantToolUI({
  render: () => {
    const originalMessages = useMessagePart((p) => getExternalStoreMessages(p));
    // Access original message data for this message part
  },
});
```

## Debugging

### Common Debugging Scenarios

```tsx
// Debug message conversion
const convertMessage = (message: MyMessage): ThreadMessageLike => {
  console.log("Converting message:", message);
  const converted = {
    role: message.role,
    content: [{ type: "text", text: message.content }],
  };
  console.log("Converted to:", converted);
  return converted;
};

// Debug adapter calls
const onNew = async (message: AppendMessage) => {
  console.log("onNew called with:", message);
  // ... implementation
};

// Enable verbose logging
const runtime = useExternalStoreRuntime({
  messages,
  onNew: (...args) => {
    console.log("Runtime onNew:", args);
    return onNew(...args);
  },
  // ... other props
});
```

## Best Practices

### 1. Immutable Updates

Always create new arrays when updating messages:

```tsx
// ❌ Wrong - mutating array
messages.push(newMessage);
setMessages(messages);

// ✅ Correct - new array
setMessages([...messages, newMessage]);
```

### 2. Stable Handler References

Memoize handlers to prevent runtime recreation:

```tsx
const onNew = useCallback(
  async (message: AppendMessage) => {
    // Handle new message
  },
  [
    /* dependencies */
  ],
);

const runtime = useExternalStoreRuntime({
  messages,
  onNew, // Stable reference
});
```

### 3. Performance Optimization

```tsx
// For large message lists
const recentMessages = useMemo(
  () => messages.slice(-50), // Show last 50 messages
  [messages],
);

// For expensive conversions
const convertMessage = useCallback((msg) => {
  // Conversion logic
}, []);
```

## `LocalRuntime` vs `ExternalStoreRuntime`

### When to Choose Which

| Scenario                         | Recommendation                                               |
| -------------------------------- | ------------------------------------------------------------ |
| Quick prototype                  | `LocalRuntime`                                               |
| Using Redux/Zustand              | `ExternalStoreRuntime`                                       |
| Need Assistant Cloud integration | `LocalRuntime`                                               |
| Custom thread storage            | Both (`LocalRuntime` with adapter or `ExternalStoreRuntime`) |
| Simple single thread             | `LocalRuntime`                                               |
| Complex state logic              | `ExternalStoreRuntime`                                       |

### Feature Comparison

| Feature          | `LocalRuntime`              | `ExternalStoreRuntime` |
| ---------------- | --------------------------- | ---------------------- |
| State Management | Built-in                    | You provide            |
| Multi-thread     | Via Cloud or custom adapter | Via adapter            |
| Message Format   | ThreadMessage               | Any (with conversion)  |
| Setup Complexity | Low                         | Medium                 |
| Flexibility      | Medium                      | High                   |

## Common Pitfalls

<Callout type="error">
**Features not appearing**: Each UI feature requires its corresponding handler:

```tsx
// ❌ No edit button
const runtime = useExternalStoreRuntime({ messages, onNew });

// ✅ Edit button appears
const runtime = useExternalStoreRuntime({ messages, onNew, onEdit });
```

</Callout>

<Callout type="warning">

**State not updating**: Common causes:

1. Mutating arrays instead of creating new ones
2. Missing `setMessages` for branch switching
3. Not handling async operations properly
4. Incorrect message format conversion

</Callout>

### Debugging Checklist

- Are you creating new arrays when updating messages?
- Did you provide all required handlers for desired features?
- Is your `convertMessage` returning valid `ThreadMessageLike`?
- Are you properly handling `isRunning` state?
- For threads: Is your thread list adapter complete?

### Thread-Specific Debugging

Common thread context issues and solutions:

**Messages disappearing when switching threads:**

```tsx
// Check 1: Ensure currentThreadId is consistent
console.log("Runtime threadId:", threadListAdapter.threadId);
console.log("Current threadId:", currentThreadId);
console.log("Messages for thread:", threads.get(currentThreadId));

// Check 2: Verify setMessages uses correct thread
setMessages: (messages) => {
  console.log("Setting messages for thread:", currentThreadId);
  setThreads((prev) => new Map(prev).set(currentThreadId, messages));
};
```

**Thread list not updating:**

```tsx
// Ensure threadList state is properly managed
onSwitchToNewThread: () => {
  const newId = `thread-${Date.now()}`;
  console.log("Creating new thread:", newId);

  // All three updates must happen together
  setThreadList((prev) => [...prev, newThreadData]);
  setThreads((prev) => new Map(prev).set(newId, []));
  setCurrentThreadId(newId);
};
```

**Messages going to wrong thread:**

```tsx
// Add validation to prevent race conditions
const validateThreadContext = () => {
  const runtimeThread = threadListAdapter.threadId;
  const contextThread = currentThreadId;

  if (runtimeThread !== contextThread) {
    console.error("Thread mismatch!", { runtimeThread, contextThread });
    throw new Error("Thread context mismatch");
  }
};

// Call before any message operation
onNew: async (message) => {
  validateThreadContext();
  // ... handle message
};
```

## API Reference

### `ExternalStoreAdapter`

The main interface for connecting your state to assistant-ui.

<ParametersTable
  type="ExternalStoreAdapter<T>"
  parameters={[
    {
      name: "messages",
      type: "readonly T[]",
      description: "Array of messages from your state",
      required: true,
    },
    {
      name: "onNew",
      type: "(message: AppendMessage) => Promise<void>",
      description: "Handler for new messages from the user",
      required: true,
    },
    {
      name: "isRunning",
      type: "boolean",
      description:
        "Whether the assistant is currently generating a response. When true, shows optimistic assistant message",
      default: "false",
    },
    {
      name: "isDisabled",
      type: "boolean",
      description: "Whether the chat input should be disabled",
      default: "false",
    },
    {
      name: "suggestions",
      type: "readonly ThreadSuggestion[]",
      description: "Suggested prompts to display",
    },
    {
      name: "extras",
      type: "unknown",
      description: "Additional data accessible via runtime.extras",
    },
    {
      name: "setMessages",
      type: "(messages: T[]) => void",
      description: "Update messages (required for branch switching)",
    },
    {
      name: "onEdit",
      type: "(message: AppendMessage) => Promise<void>",
      description: "Handler for message edits (required for edit feature)",
    },
    {
      name: "onReload",
      type: "(parentId: string | null, config: StartRunConfig) => Promise<void>",
      description:
        "Handler for regenerating messages (required for reload feature)",
    },
    {
      name: "onCancel",
      type: "() => Promise<void>",
      description: "Handler for cancelling the current generation",
    },
    {
      name: "onAddToolResult",
      type: "(options: AddToolResultOptions) => Promise<void> | void",
      description: "Handler for adding tool call results",
    },
    {
      name: "convertMessage",
      type: "(message: T, index: number) => ThreadMessageLike",
      description:
        "Convert your message format to assistant-ui format. Not needed if using ThreadMessage type",
    },
    {
      name: "joinStrategy",
      type: '"concat-content" | "none"',
      description: "How to join adjacent assistant messages when converting",
      default: '"concat-content"',
    },
    {
      name: "adapters",
      type: "object",
      description: "Feature adapters (same as LocalRuntime)",
      children: [
        {
          type: "adapters",
          parameters: [
            {
              name: "attachments",
              type: "AttachmentAdapter",
              description: "Enable file attachments",
            },
            {
              name: "speech",
              type: "SpeechSynthesisAdapter",
              description: "Enable text-to-speech",
            },
            {
              name: "feedback",
              type: "FeedbackAdapter",
              description: "Enable message feedback",
            },
            {
              name: "threadList",
              type: "ExternalStoreThreadListAdapter",
              description: "Enable multi-thread management",
            },
          ],
        },
      ],
    },
    {
      name: "unstable_capabilities",
      type: "object",
      description: "Configure runtime capabilities",
      children: [
        {
          type: "unstable_capabilities",
          parameters: [
            {
              name: "copy",
              type: "boolean",
              description: "Enable message copy feature",
              default: "true",
            },
          ],
        },
      ],
    },
  ]}
/>

### `ThreadMessageLike`

A flexible message format that can be converted to assistant-ui's internal format.

<ParametersTable
  type="ThreadMessageLike"
  parameters={[
    {
      name: "role",
      type: '"assistant" | "user" | "system"',
      description: "The role of the message sender",
      required: true,
    },
    {
      name: "content",
      type: "string | readonly MessagePart[]",
      description: "Message content as string or structured message parts",
      required: true,
    },
    {
      name: "id",
      type: "string",
      description: "Unique identifier for the message",
    },
    {
      name: "createdAt",
      type: "Date",
      description: "Timestamp when the message was created",
    },
    {
      name: "status",
      type: "MessageStatus",
      description:
        "Status of assistant messages (in_progress, complete, cancelled)",
    },
    {
      name: "attachments",
      type: "readonly CompleteAttachment[]",
      description: "File attachments (user messages only)",
    },
    {
      name: "metadata",
      type: "object",
      description: "Additional message metadata",
      children: [
        {
          type: "metadata",
          parameters: [
            {
              name: "steps",
              type: "readonly ThreadStep[]",
              description: "Tool call steps for assistant messages",
            },
            {
              name: "custom",
              type: "Record<string, unknown>",
              description: "Custom metadata for your application",
            },
          ],
        },
      ],
    },
  ]}
/>

### `ExternalStoreThreadListAdapter`

Enable multi-thread support with custom thread management.

<ParametersTable
  type="ExternalStoreThreadListAdapter"
  parameters={[
    {
      name: "threadId",
      type: "string",
      description: "ID of the current active thread",
    },
    {
      name: "threads",
      type: "readonly ExternalStoreThreadData[]",
      description: "Array of regular threads with { threadId, title }",
    },
    {
      name: "archivedThreads",
      type: "readonly ExternalStoreThreadData[]",
      description: "Array of archived threads",
    },
    {
      name: "onSwitchToNewThread",
      type: "() => Promise<void> | void",
      description: "Handler for creating a new thread",
    },
    {
      name: "onSwitchToThread",
      type: "(threadId: string) => Promise<void> | void",
      description: "Handler for switching to an existing thread",
    },
    {
      name: "onRename",
      type: "(threadId: string, newTitle: string) => Promise<void> | void",
      description: "Handler for renaming a thread",
    },
    {
      name: "onArchive",
      type: "(threadId: string) => Promise<void> | void",
      description: "Handler for archiving a thread",
    },
    {
      name: "onUnarchive",
      type: "(threadId: string) => Promise<void> | void",
      description: "Handler for unarchiving a thread",
    },
    {
      name: "onDelete",
      type: "(threadId: string) => Promise<void> | void",
      description: "Handler for deleting a thread",
    },
  ]}
/>

<Callout type="info">
  The thread list adapter enables multi-thread support. Without it, the runtime
  only manages the current conversation.
</Callout>

### Related Runtime APIs

- [AssistantRuntime API](/docs/api-reference/runtimes/AssistantRuntime) - Core runtime interface and methods
- [ThreadRuntime API](/docs/api-reference/runtimes/ThreadRuntime) - Thread-specific operations and state management
- [Runtime Providers](/docs/api-reference/context-providers/AssistantRuntimeProvider) - Context providers for runtime integration

## Related Resources

- [Runtime Layer Concepts](/docs/concepts/runtime-layer)
- [Pick a Runtime Guide](/docs/runtimes/pick-a-runtime)
- [`LocalRuntime` Documentation](/docs/runtimes/custom/local)
- [Examples Repository](https://github.com/assistant-ui/assistant-ui/tree/main/examples/with-external-store)



================================================
FILE: apps/docs/content/docs/runtimes/custom/local.mdx
================================================
---
title: LocalRuntime
---

import { Callout } from "fumadocs-ui/components/callout";
import { Steps, Step } from "fumadocs-ui/components/steps";
import { Card, Cards } from "fumadocs-ui/components/card";
import { ParametersTable } from "@/components/docs";

## Overview

`LocalRuntime` is the simplest way to connect your own custom backend to assistant-ui. It manages all chat state internally while providing a clean adapter interface to connect with any REST API, OpenAI, or custom language model.

`LocalRuntime` provides:

- **Built-in state management** for messages, threads, and conversation history
- **Automatic features** like message editing, reloading, and branch switching
- **Multi-thread support** through [Assistant Cloud](/docs/cloud/overview) or your own database using `useRemoteThreadListRuntime`
- **Simple adapter pattern** to connect any backend API

While LocalRuntime manages state in-memory by default, it offers multiple persistence options through adapters - use the history adapter for single-thread persistence, Assistant Cloud for managed multi-thread support, or implement your own storage with `useRemoteThreadListRuntime`.

## When to Use

Use `LocalRuntime` if you need:

- **Quick setup with minimal configuration** - Get a fully functional chat interface with just a few lines of code
- **Built-in state management** - No need to manage messages, threads, or conversation history yourself
- **Automatic features** - Branch switching, message editing, and regeneration work out of the box
- **API flexibility** - Connect to any REST endpoint, OpenAI, or custom model with a simple adapter
- **Multi-thread support** - Full thread management with Assistant Cloud or custom database
- **Thread persistence** - Via history adapter, Assistant Cloud, or custom thread list adapter

## Key Features

<Cards>
  <Card
    title="Built-in State Management"
    description="Automatic handling of messages, threads, and conversation history"
  />
  <Card
    title="Multi-Thread Support"
    description="Full thread management capabilities with Assistant Cloud or custom database adapter"
  />
  <Card
    title="Adapter System"
    description="Extend with attachments, speech, feedback, persistence, and suggestions"
  />
  <Card
    title="Tool Calling"
    description="Support for function calling with human-in-the-loop approval"
  />
</Cards>

## Getting Started

<Steps>
  <Step>
    ### Create a Next.js project

    ```sh
    npx create-next-app@latest my-app
    cd my-app
    ```

  </Step>
  <Step>

    ### Install `@assistant-ui/react`

    ```sh npm2yarn
    npm install @assistant-ui/react
    ```

  </Step>
  <Step>

    ### Define a `MyRuntimeProvider` component

    Update the `MyModelAdapter` below to integrate with your own custom API.
    See `LocalRuntimeOptions` [API Reference](#localruntimeoptions) for available configuration options.

    ```tsx twoslash include MyRuntimeProvider title="app/MyRuntimeProvider.tsx"
    // @filename: /app/MyRuntimeProvider.tsx

    // ---cut---
    "use client";

    import type { ReactNode } from "react";
    import {
      AssistantRuntimeProvider,
      useLocalRuntime,
      type ChatModelAdapter,
    } from "@assistant-ui/react";

    const MyModelAdapter: ChatModelAdapter = {
      async run({ messages, abortSignal }) {
        // TODO replace with your own API
        const result = await fetch("<YOUR_API_ENDPOINT>", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          // forward the messages in the chat to the API
          body: JSON.stringify({
            messages,
          }),
          // if the user hits the "cancel" button or escape keyboard key, cancel the request
          signal: abortSignal,
        });

        const data = await result.json();
        return {
          content: [
            {
              type: "text",
              text: data.text,
            },
          ],
        };
      },
    };

    export function MyRuntimeProvider({
      children,
    }: Readonly<{
      children: ReactNode;
    }>) {
      const runtime = useLocalRuntime(MyModelAdapter);

      return (
        <AssistantRuntimeProvider runtime={runtime}>
          {children}
        </AssistantRuntimeProvider>
      );
    }
    ```

  </Step>
  <Step>

    ### Wrap your app in `MyRuntimeProvider`

    ```tsx {1,11,17} twoslash title="app/layout.tsx"
    // @include: MyRuntimeProvider
    // @filename: /app/layout.tsx
    // ---cut---
    import type { ReactNode } from "react";
    import { MyRuntimeProvider } from "@/app/MyRuntimeProvider";

    export default function RootLayout({
      children,
    }: Readonly<{
      children: ReactNode;
    }>) {
      return (
        <MyRuntimeProvider>
          <html lang="en">
            <body>{children}</body>
          </html>
        </MyRuntimeProvider>
      );
    }
    ```

  </Step>
  <Step>

    ### Use the Thread component

    ```tsx title="app/page.tsx"
    import { Thread } from "@assistant-ui/react";

    export default function Page() {
      return <Thread />;
    }
    ```

  </Step>
</Steps>

## Streaming Responses

Implement streaming by declaring the `run` function as an `AsyncGenerator`.

```tsx twoslash {2, 11-13} title="app/MyRuntimeProvider.tsx"
import {
  ChatModelAdapter,
  ThreadMessage,
  type ModelContext,
} from "@assistant-ui/react";
import { OpenAI } from "openai";

const openai = new OpenAI();
const backendApi = async ({
  messages,
  abortSignal,
  context,
}: {
  messages: readonly ThreadMessage[];
  abortSignal: AbortSignal;
  context: ModelContext;
}) => {
  return openai.chat.completions.create({
    model: "gpt-4o",
    messages: [{ role: "user", content: "Say this is a test" }],
    stream: true,
  });
};

// ---cut---
const MyModelAdapter: ChatModelAdapter = {
  async *run({ messages, abortSignal, context }) {
    const stream = await backendApi({ messages, abortSignal, context });

    let text = "";
    for await (const part of stream) {
      text += part.choices[0]?.delta?.content || "";

      yield {
        content: [{ type: "text", text }],
      };
    }
  },
};
```

### Streaming with Tool Calls

Handle streaming responses that include function calls:

```tsx
const MyModelAdapter: ChatModelAdapter = {
  async *run({ messages, abortSignal, context }) {
    const stream = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: convertToOpenAIMessages(messages),
      tools: context.tools,
      stream: true,
      signal: abortSignal,
    });

    let content = "";
    const toolCalls: any[] = [];

    for await (const chunk of stream) {
      const delta = chunk.choices[0]?.delta;

      // Handle text content
      if (delta?.content) {
        content += delta.content;
      }

      // Handle tool calls
      if (delta?.tool_calls) {
        for (const toolCall of delta.tool_calls) {
          if (!toolCalls[toolCall.index]) {
            toolCalls[toolCall.index] = {
              id: toolCall.id,
              type: "function",
              function: { name: "", arguments: "" },
            };
          }

          if (toolCall.function?.name) {
            toolCalls[toolCall.index].function.name = toolCall.function.name;
          }

          if (toolCall.function?.arguments) {
            toolCalls[toolCall.index].function.arguments +=
              toolCall.function.arguments;
          }
        }
      }

      // Yield current state
      yield {
        content: [
          ...(content ? [{ type: "text" as const, text: content }] : []),
          ...toolCalls.map((tc) => ({
            type: "tool-call" as const,
            toolCallId: tc.id,
            toolName: tc.function.name,
            args: JSON.parse(tc.function.arguments || "{}"),
          })),
        ],
      };
    }
  },
};
```

## Tool Calling

`LocalRuntime` supports OpenAI-compatible function calling with automatic or human-in-the-loop execution.

### Basic Tool Definition

```tsx
const tools = [
  {
    type: "function",
    function: {
      name: "get_weather",
      description: "Get the current weather in a location",
      parameters: {
        type: "object",
        properties: {
          location: {
            type: "string",
            description: "The city and state, e.g. San Francisco, CA",
          },
          unit: {
            type: "string",
            enum: ["celsius", "fahrenheit"],
          },
        },
        required: ["location"],
      },
    },
  },
];

const runtime = useLocalRuntime(MyModelAdapter, {
  // Tools are passed via context
  context: { tools },
});
```

### Human-in-the-Loop Approval

Require user confirmation before executing certain tools:

```tsx
const runtime = useLocalRuntime(MyModelAdapter, {
  unstable_humanToolNames: ["delete_file", "send_email"],
});
```

### Tool Execution

Tools are executed automatically by the runtime. The model adapter receives tool results in subsequent messages:

```tsx
// Messages will include tool calls and results:
[
  { role: "user", content: "What's the weather in SF?" },
  {
    role: "assistant",
    content: [
      {
        type: "tool-call",
        toolCallId: "call_123",
        toolName: "get_weather",
        args: { location: "San Francisco, CA" },
      },
    ],
  },
  {
    role: "tool",
    content: [
      {
        type: "tool-result",
        toolCallId: "call_123",
        result: { temperature: 72, condition: "sunny" },
      },
    ],
  },
  {
    role: "assistant",
    content: "The weather in San Francisco is sunny and 72°F.",
  },
];
```

## Multi-Thread Support

`LocalRuntime` supports multiple conversation threads through two approaches:

### 1. Assistant Cloud Integration

```tsx
import { useLocalRuntime } from "@assistant-ui/react";
import { AssistantCloud } from "assistant-cloud";

const cloud = new AssistantCloud({
  apiKey: process.env.ASSISTANT_CLOUD_API_KEY,
});

const runtime = useLocalRuntime(MyModelAdapter, {
  cloud, // Enables multi-thread support
});
```

With Assistant Cloud, you get:

- Multiple conversation threads
- Thread persistence across sessions
- Thread management (create, switch, rename, archive, delete)
- Automatic synchronization across devices
- Built-in user authentication

### 2. Custom Database with useRemoteThreadListRuntime

For custom thread storage, use `useRemoteThreadListRuntime` with your own adapter:

```tsx
import {
  useLocalThreadRuntime,
  unstable_useRemoteThreadListRuntime as useRemoteThreadListRuntime,
  useThreadListItem,
  RuntimeAdapterProvider,
  AssistantRuntimeProvider,
  type RemoteThreadListAdapter,
  type ThreadHistoryAdapter,
} from "@assistant-ui/react";

// Implement your custom adapter with proper message persistence
const myDatabaseAdapter: RemoteThreadListAdapter = {
  async list() {
    const threads = await db.threads.findAll();
    return {
      threads: threads.map((t) => ({
        status: t.archived ? "archived" : "regular",
        remoteId: t.id,
        title: t.title,
      })),
    };
  },

  async initialize(threadId) {
    const thread = await db.threads.create({ id: threadId });
    return { remoteId: thread.id };
  },

  async rename(remoteId, newTitle) {
    await db.threads.update(remoteId, { title: newTitle });
  },

  async archive(remoteId) {
    await db.threads.update(remoteId, { archived: true });
  },

  async unarchive(remoteId) {
    await db.threads.update(remoteId, { archived: false });
  },

  async delete(remoteId) {
    // Delete thread and its messages
    await db.messages.deleteByThreadId(remoteId);
    await db.threads.delete(remoteId);
  },

  async generateTitle(remoteId, messages) {
    // Generate title from messages using your AI
    const title = await generateTitle(messages);
    await db.threads.update(remoteId, { title });
    return new ReadableStream(); // Return empty stream
  },
};

// Complete implementation with message persistence using Provider pattern
export function MyRuntimeProvider({ children }) {
  const runtime = useRemoteThreadListRuntime({
    runtimeHook: () => {
      return useLocalThreadRuntime(MyModelAdapter);
    },
    adapter: {
      ...myDatabaseAdapter,

      // The Provider component adds thread-specific adapters
      unstable_Provider: ({ children }) => {
        // This runs in the context of each thread
        const threadListItem = useThreadListItem();
        const remoteId = threadListItem.remoteId;

        // Create thread-specific history adapter
        const history = useMemo<ThreadHistoryAdapter>(
          () => ({
            async load() {
              if (!remoteId) return { messages: [] };

              const messages = await db.messages.findByThreadId(remoteId);
              return {
                messages: messages.map((m) => ({
                  role: m.role,
                  content: m.content,
                  id: m.id,
                  createdAt: new Date(m.createdAt),
                })),
              };
            },

            async append(message) {
              if (!remoteId) {
                console.warn("Cannot save message - thread not initialized");
                return;
              }

              await db.messages.create({
                threadId: remoteId,
                role: message.role,
                content: message.content,
                id: message.id,
                createdAt: message.createdAt,
              });
            },
          }),
          [remoteId],
        );

        const adapters = useMemo(() => ({ history }), [history]);

        return (
          <RuntimeAdapterProvider adapters={adapters}>
            {children}
          </RuntimeAdapterProvider>
        );
      },
    },
  });

  return (
    <AssistantRuntimeProvider runtime={runtime}>
      {children}
    </AssistantRuntimeProvider>
  );
}
```

#### Understanding the Architecture

<Callout type="info">
  **Key Insight**: The `unstable_Provider` component in your adapter runs in the
  context of each thread, giving you access to thread-specific information like
  `remoteId`. This is where you add the history adapter for message persistence.
</Callout>

The complete multi-thread implementation requires:

1. **RemoteThreadListAdapter** - Manages thread metadata (list, create, rename, archive, delete)
2. **unstable_Provider** - Component that provides thread-specific adapters (like history)
3. **ThreadHistoryAdapter** - Persists messages for each thread (load, append)
4. **runtimeHook** - Creates a basic `LocalRuntime` (adapters are added by Provider)

Without the history adapter, threads would have no message persistence, making them effectively useless. The Provider pattern allows you to add thread-specific functionality while keeping the runtime creation simple.

#### Database Schema Example

```typescript
// Example database schema for thread persistence
interface ThreadRecord {
  id: string;
  title: string;
  archived: boolean;
  createdAt: Date;
  updatedAt: Date;
}

interface MessageRecord {
  id: string;
  threadId: string;
  role: "user" | "assistant" | "system";
  content: any; // Store as JSON
  createdAt: Date;
}
```

Both approaches provide full multi-thread support. Choose Assistant Cloud for a managed solution or implement your own adapter for custom storage requirements.

## Adapters

Extend `LocalRuntime` capabilities with adapters. The runtime automatically enables/disables UI features based on which adapters are provided.

### Attachment Adapter

Enable file and image uploads:

```tsx
const attachmentAdapter: AttachmentAdapter = {
  accept: "image/*,application/pdf",
  async add(file) {
    const formData = new FormData();
    formData.append("file", file);

    const response = await fetch("/api/upload", {
      method: "POST",
      body: formData,
    });

    const { id, url } = await response.json();
    return {
      id,
      type: file.type.startsWith("image/") ? "image" : "document",
      name: file.name,
      url,
    };
  },
  async remove(attachment) {
    await fetch(`/api/upload/${attachment.id}`, {
      method: "DELETE",
    });
  },
};

const runtime = useLocalRuntime(MyModelAdapter, {
  adapters: { attachments: attachmentAdapter },
});

// For multiple file types, use CompositeAttachmentAdapter:
const runtime = useLocalRuntime(MyModelAdapter, {
  adapters: {
    attachments: new CompositeAttachmentAdapter([
      new SimpleImageAttachmentAdapter(),
      new SimpleTextAttachmentAdapter(),
      customPDFAdapter,
    ]),
  },
});
```

### Thread History Adapter

Persist and resume conversations:

```tsx
const historyAdapter: ThreadHistoryAdapter = {
  async load() {
    // Load messages from your storage
    const response = await fetch(`/api/thread/current`);
    const { messages } = await response.json();
    return { messages };
  },

  async append(message) {
    // Save new message to storage
    await fetch(`/api/thread/messages`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ message }),
    });
  },

  // Optional: Resume interrupted conversations
  async resume({ messages }) {
    const lastMessage = messages[messages.length - 1];
    if (lastMessage?.role === "user") {
      // Resume generating assistant response
      const response = await fetch("/api/chat/resume", {
        method: "POST",
        body: JSON.stringify({ messages }),
      });
      return response.body; // Return stream
    }
  },
};

const runtime = useLocalRuntime(MyModelAdapter, {
  adapters: { history: historyAdapter },
});
```

<Callout type="info">
  The history adapter handles persistence for the current thread's messages. For
  multi-thread support with custom storage, use either
  `useRemoteThreadListRuntime` with `LocalRuntime` or `ExternalStoreRuntime`
  with a thread list adapter.
</Callout>

### Speech Synthesis Adapter

Add text-to-speech capabilities:

```tsx
const speechAdapter: SpeechSynthesisAdapter = {
  speak(text) {
    const utterance = new SpeechSynthesisUtterance(text);
    utterance.rate = 1.0;
    utterance.pitch = 1.0;
    speechSynthesis.speak(utterance);
  },

  stop() {
    speechSynthesis.cancel();
  },
};

const runtime = useLocalRuntime(MyModelAdapter, {
  adapters: { speech: speechAdapter },
});
```

### Feedback Adapter

Collect user feedback on messages:

```tsx
const feedbackAdapter: FeedbackAdapter = {
  async submit(feedback) {
    await fetch("/api/feedback", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        messageId: feedback.messageId,
        rating: feedback.type, // "positive" or "negative"
      }),
    });
  },
};

const runtime = useLocalRuntime(MyModelAdapter, {
  adapters: { feedback: feedbackAdapter },
});
```

### Suggestion Adapter

Provide follow-up suggestions:

```tsx
const suggestionAdapter: SuggestionAdapter = {
  async *get({ messages }) {
    // Analyze conversation context
    const lastMessage = messages[messages.length - 1];

    // Generate suggestions
    const suggestions = await generateSuggestions(lastMessage);

    yield suggestions.map((text) => ({
      id: crypto.randomUUID(),
      text,
    }));
  },
};

const runtime = useLocalRuntime(MyModelAdapter, {
  adapters: { suggestion: suggestionAdapter },
});
```

## Advanced Features

### Resuming a Run

<Callout type="warning">
  The `unstable_resumeRun` method is experimental and may change in future
  releases.
</Callout>

Resume a conversation with a custom stream:

```tsx
import { useThreadRuntime, type ChatModelRunResult } from "@assistant-ui/react";

// Get the thread runtime
const thread = useThreadRuntime();

// Create a custom stream
async function* createCustomStream(): AsyncGenerator<ChatModelRunResult> {
  let text = "Initial response";
  yield {
    content: [{ type: "text", text }],
  };

  // Simulate delay
  await new Promise((resolve) => setTimeout(resolve, 500));

  text = "Initial response. And here's more content...";
  yield {
    content: [{ type: "text", text }],
  };
}

// Resume a run with the custom stream
thread.unstable_resumeRun({
  parentId: "message-id", // ID of the message to respond to
  stream: createCustomStream(), // The stream to use for resuming
});
```

### Custom Thread Management

Access thread runtime for advanced control with `useThreadRuntime`:

```tsx
import { useThreadRuntime } from "@assistant-ui/react";

function MyComponent() {
  const thread = useThreadRuntime();

  // Cancel current generation
  const handleCancel = () => {
    thread.cancelRun();
  };

  // Switch to a different branch
  const handleSwitchBranch = (messageId: string, branchIndex: number) => {
    thread.switchToBranch(messageId, branchIndex);
  };

  // Reload a message
  const handleReload = (messageId: string) => {
    thread.reload(messageId);
  };

  return (
    // Your UI
  );
}
```

### Custom Runtime Implementation

`useLocalThreadRuntime` provides the core single-thread runtime for building custom implementations:

```tsx
import {
  useLocalThreadRuntime,
  unstable_useRemoteThreadListRuntime as useRemoteThreadListRuntime,
  AssistantRuntimeProvider,
} from "@assistant-ui/react";

// Build your own multi-thread runtime
function MyCustomRuntimeProvider({ children }) {
  const runtime = useRemoteThreadListRuntime({
    runtimeHook: () => useLocalThreadRuntime(MyModelAdapter, options),
    adapter: myCustomThreadListAdapter,
  });

  return (
    <AssistantRuntimeProvider runtime={runtime}>
      {children}
    </AssistantRuntimeProvider>
  );
}
```

<Callout type="info">
  `useLocalRuntime` internally uses `useLocalThreadRuntime` +
  `useRemoteThreadListRuntime` for multi-thread support.
</Callout>

<Callout type="warning">
  **`useThreadRuntime` vs `useLocalThreadRuntime`:** 
  - `useThreadRuntime` - Access the current thread's runtime from within components 
  - `useLocalThreadRuntime` - Create a new single-thread runtime instance
</Callout>

## Integration Examples

### OpenAI Integration

```tsx
import { OpenAI } from "openai";

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
  dangerouslyAllowBrowser: true, // Use server-side in production
});

const OpenAIAdapter: ChatModelAdapter = {
  async *run({ messages, abortSignal, context }) {
    const stream = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: messages.map((m) => ({
        role: m.role,
        content: m.content
          .filter((c) => c.type === "text")
          .map((c) => c.text)
          .join("\n"),
      })),
      stream: true,
      signal: abortSignal,
    });

    for await (const chunk of stream) {
      const content = chunk.choices[0]?.delta?.content;
      if (content) {
        yield {
          content: [{ type: "text", text: content }],
        };
      }
    }
  },
};
```

### Custom REST API Integration

```tsx
const CustomAPIAdapter: ChatModelAdapter = {
  async run({ messages, abortSignal }) {
    const response = await fetch("/api/chat", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        messages: messages.map((m) => ({
          role: m.role,
          content: m.content,
        })),
      }),
      signal: abortSignal,
    });

    if (!response.ok) {
      throw new Error(`API error: ${response.statusText}`);
    }

    const data = await response.json();
    return {
      content: [{ type: "text", text: data.message }],
    };
  },
};
```

## Best Practices

1. **Error Handling** - Always handle API errors gracefully:

   ```tsx
   async *run({ messages, abortSignal }) {
     try {
       const response = await fetchAPI(messages, abortSignal);
       yield response;
     } catch (error) {
       if (error.name === 'AbortError') {
         // User cancelled - this is normal
         return;
       }
       // Re-throw other errors to display in UI
       throw error;
     }
   }
   ```

2. **Abort Signal** - Always pass the abort signal to fetch requests:

   ```tsx
   fetch(url, { signal: abortSignal });
   ```

3. **Memory Management** - For long conversations, consider implementing message limits:

   ```tsx
   const recentMessages = messages.slice(-20); // Keep last 20 messages
   ```

4. **Type Safety** - Use TypeScript for better development experience:
   ```tsx
   import type { ChatModelAdapter, ThreadMessage } from "@assistant-ui/react";
   ```

## Comparison with `ExternalStoreRuntime`

| Feature               | `LocalRuntime`                               | `ExternalStoreRuntime`                           |
| --------------------- | -------------------------------------------- | ------------------------------------------------ |
| State Management      | Built-in                                     | You manage                                       |
| Setup Complexity      | Simple                                       | More complex                                     |
| Flexibility           | Extensible via adapters                      | Full control                                     |
| Message Editing       | Automatic                                    | Requires `onEdit` handler                        |
| Branch Switching      | Automatic                                    | Requires `setMessages` handler                   |
| Multi-Thread Support  | Yes (with Assistant Cloud or custom adapter) | Yes (with thread list adapter)                   |
| Custom Thread Storage | Yes (with useRemoteThreadListRuntime)        | Yes                                              |
| Persistence           | Via history adapter or Assistant Cloud       | Your implementation                              |
| Best For              | Quick prototypes, standard apps, cloud-based | Complex state requirements, custom storage needs |

## Troubleshooting

### Common Issues

<Callout type="error">
**Messages not appearing**: Ensure your adapter returns the correct format:
```tsx
return {
  content: [{ type: "text", text: "response" }]
};
```
</Callout>

<Callout type="warning">
**Streaming not working**: Make sure to use `async *run` (note the asterisk):
```tsx
async *run({ messages }) { // ✅ Correct
async run({ messages }) {  // ❌ Wrong for streaming
```
</Callout>

### Debug Tips

1. **Log adapter calls** to trace execution:

   ```tsx
   async *run(options) {
     console.log("Adapter called with:", options);
     // ... rest of implementation
   }
   ```

2. **Check network requests** in browser DevTools

3. **Verify message format** matches ThreadMessage structure

## API Reference

### `ChatModelAdapter`

The main interface for connecting your API to `LocalRuntime`.

<ParametersTable
  type="ChatModelAdapter"
  parameters={[
    {
      name: "run",
      type: "ChatModelRunOptions => ChatModelRunResult | AsyncGenerator<ChatModelRunResult>",
      description:
        "Function that sends messages to your API and returns the response",
      required: true,
    },
  ]}
/>

### `ChatModelRunOptions`

Parameters passed to the `run` function.

<ParametersTable
  type="ChatModelRunOptions"
  parameters={[
    {
      name: "messages",
      type: "readonly ThreadMessage[]",
      description: "The conversation history to send to your API",
      required: true,
    },
    {
      name: "abortSignal",
      type: "AbortSignal",
      description: "Signal to cancel the request if user interrupts",
      required: true,
    },
    {
      name: "context",
      type: "ModelContext",
      description: "Additional context including configuration and tools",
      required: true,
    },
  ]}
/>

### `LocalRuntimeOptions`

Configuration options for the `LocalRuntime`.

<ParametersTable
  type="LocalRuntimeOptions"
  parameters={[
    {
      name: "initialMessages",
      type: "readonly ThreadMessage[]",
      description: "Pre-populate the thread with messages",
    },
    {
      name: "maxSteps",
      type: "number",
      description:
        "Maximum number of sequential tool calls before requiring user input",
      default: "5",
    },
    {
      name: "cloud",
      type: "AssistantCloud",
      description:
        "Enable Assistant Cloud integration for multi-thread support and persistence",
    },
    {
      name: "adapters",
      type: "LocalRuntimeAdapters",
      description:
        "Additional capabilities through adapters. Features are automatically enabled based on provided adapters",
      children: [
        {
          type: "adapters",
          parameters: [
            {
              name: "attachments",
              type: "AttachmentAdapter",
              description: "Enable file/image attachments",
            },
            {
              name: "speech",
              type: "SpeechSynthesisAdapter",
              description: "Enable text-to-speech for messages",
            },
            {
              name: "feedback",
              type: "FeedbackAdapter",
              description: "Enable message feedback (thumbs up/down)",
            },
            {
              name: "history",
              type: "ThreadHistoryAdapter",
              description: "Enable thread persistence and resumption",
            },
            {
              name: "suggestions",
              type: "SuggestionAdapter",
              description: "Enable follow-up suggestions",
            },
          ],
        },
      ],
    },
    {
      name: "unstable_humanToolNames",
      type: "string[]",
      description:
        "Tool names that require human approval before execution (experimental API)",
    },
  ]}
/>

### `RemoteThreadListAdapter`

Interface for implementing custom thread list storage.

<ParametersTable
  type="RemoteThreadListAdapter"
  parameters={[
    {
      name: "list",
      type: "() => Promise<RemoteThreadListResponse>",
      description: "Returns list of all threads (regular and archived)",
      required: true,
    },
    {
      name: "initialize",
      type: "(threadId: string) => Promise<RemoteThreadInitializeResponse>",
      description: "Creates a new thread with the given ID",
      required: true,
    },
    {
      name: "rename",
      type: "(remoteId: string, newTitle: string) => Promise<void>",
      description: "Updates the title of a thread",
      required: true,
    },
    {
      name: "archive",
      type: "(remoteId: string) => Promise<void>",
      description: "Archives a thread",
      required: true,
    },
    {
      name: "unarchive",
      type: "(remoteId: string) => Promise<void>",
      description: "Unarchives a thread",
      required: true,
    },
    {
      name: "delete",
      type: "(remoteId: string) => Promise<void>",
      description: "Deletes a thread permanently",
      required: true,
    },
    {
      name: "generateTitle",
      type: "(remoteId: string, messages: readonly ThreadMessage[]) => Promise<AssistantStream>",
      description: "Generates a title for the thread based on the conversation",
      required: true,
    },
  ]}
/>

### Related Runtime APIs

- [AssistantRuntime API](/docs/api-reference/runtimes/AssistantRuntime) - Core runtime interface and methods
- [ThreadRuntime API](/docs/api-reference/runtimes/ThreadRuntime) - Thread-specific operations and state management

## Related Resources

- [Runtime Layer Concepts](/docs/concepts/runtime-layer)
- [Pick a Runtime Guide](/docs/runtimes/pick-a-runtime)
- [`ExternalStoreRuntime`](/docs/runtimes/custom/external-store)
- [Examples Repository](https://github.com/assistant-ui/assistant-ui/tree/main/examples)



================================================
FILE: apps/docs/content/docs/runtimes/custom/meta.json
================================================
{
  "title": "Custom Backend",
  "pages": [
    "local",
    "external-store"
  ]
}



================================================
FILE: apps/docs/content/docs/runtimes/langgraph/index.mdx
================================================
---
title: Getting Started
---

## Requirements

You need a LangGraph Cloud API server. You can start a server locally via [LangGraph Studio](https://github.com/langchain-ai/langgraph-studio) or use [LangSmith](https://www.langchain.com/langsmith) for a hosted version.

The state of the graph you are using must have a `messages` key with a list of LangChain-alike messages.

## New project from template

import { Steps, Step } from "fumadocs-ui/components/steps";

<Steps>
  <Step>
  ### Create a new project based on the LangGraph assistant-ui template

```sh
npx create-assistant-ui@latest -t langgraph my-app
```

  </Step>
  <Step>
  ### Set environment variables

Create a `.env.local` file in your project with the following variables:

```sh
# LANGCHAIN_API_KEY=your_api_key # for production
# LANGGRAPH_API_URL=your_api_url # for production
NEXT_PUBLIC_LANGGRAPH_API_URL=your_api_url # for development (no api key required)
NEXT_PUBLIC_LANGGRAPH_ASSISTANT_ID=your_graph_id
```

  </Step>
</Steps>

## Installation in existing React project

<Steps>
  <Step>

### Install dependencies

```sh npm2yarn
npm install @assistant-ui/react @assistant-ui/react-ui @assistant-ui/react-langgraph @langchain/langgraph-sdk
```

  </Step>
    <Step>

### Setup a proxy backend endpoint (optional, for production)

<Callout type="warn">
  This example forwards every request to the LangGraph server directly from the
  browser. For production use-cases, you should limit the API calls to the
  subset of endpoints that you need and perform authorization checks.
</Callout>

```tsx twoslash title="@/api/api/[...path]/route.ts"
import { NextRequest, NextResponse } from "next/server";

export const runtime = "edge";

function getCorsHeaders() {
  return {
    "Access-Control-Allow-Origin": "*",
    "Access-Control-Allow-Methods": "GET, POST, PUT, PATCH, DELETE, OPTIONS",
    "Access-Control-Allow-Headers": "*",
  };
}

async function handleRequest(req: NextRequest, method: string) {
  try {
    const path = req.nextUrl.pathname.replace(/^\/?api\//, "");
    const url = new URL(req.url);
    const searchParams = new URLSearchParams(url.search);
    searchParams.delete("_path");
    searchParams.delete("nxtP_path");
    const queryString = searchParams.toString()
      ? `?${searchParams.toString()}`
      : "";

    const options: RequestInit = {
      method,
      headers: {
        "x-api-key": process.env["LANGCHAIN_API_KEY"] || "",
      },
    };

    if (["POST", "PUT", "PATCH"].includes(method)) {
      options.body = await req.text();
    }

    const res = await fetch(
      `${process.env["LANGGRAPH_API_URL"]}/${path}${queryString}`,
      options,
    );

    return new NextResponse(res.body, {
      status: res.status,
      statusText: res.statusText,
      headers: {
        ...res.headers,
        ...getCorsHeaders(),
      },
    });
  } catch (e: any) {
    return NextResponse.json({ error: e.message }, { status: e.status ?? 500 });
  }
}

export const GET = (req: NextRequest) => handleRequest(req, "GET");
export const POST = (req: NextRequest) => handleRequest(req, "POST");
export const PUT = (req: NextRequest) => handleRequest(req, "PUT");
export const PATCH = (req: NextRequest) => handleRequest(req, "PATCH");
export const DELETE = (req: NextRequest) => handleRequest(req, "DELETE");

// Add a new OPTIONS handler
export const OPTIONS = () => {
  return new NextResponse(null, {
    status: 204,
    headers: {
      ...getCorsHeaders(),
    },
  });
};
```

  </Step>
  <Step>

### Setup helper functions

```tsx twoslash include chatApi title="@/lib/chatApi.ts"
// @filename: /lib/chatApi.ts

// ---cut---
import { Client } from "@langchain/langgraph-sdk";
import { LangChainMessage } from "@assistant-ui/react-langgraph";

const createClient = () => {
  const apiUrl = process.env["NEXT_PUBLIC_LANGGRAPH_API_URL"] || "/api";
  return new Client({
    apiUrl,
  });
};

export const createThread = async () => {
  const client = createClient();
  return client.threads.create();
};

export const getThreadState = async (
  threadId: string,
): Promise<ThreadState<{ messages: LangChainMessage[] }>> => {
  const client = createClient();
  return client.threads.getState(threadId);
};

export const sendMessage = async (params: {
  threadId: string;
  messages: LangChainMessage;
}) => {
  const client = createClient();
  return client.runs.stream(
    params.threadId,
    process.env["NEXT_PUBLIC_LANGGRAPH_ASSISTANT_ID"]!,
    {
      input: {
        messages: params.messages,
      },
      streamMode: "messages",
    },
  );
};
```

  </Step>
  <Step>

### Define a `MyAssistant` component

```tsx twoslash include MyAssistant title="@/components/MyAssistant.tsx"
// @filename: /components/MyAssistant.tsx
// @include: chatApi

// ---cut---
"use client";

import { useRef } from "react";
import { Thread } from "@/components/assistant-ui";
import { AssistantRuntimeProvider } from "@assistant-ui/react";
import { useLangGraphRuntime } from "@assistant-ui/react-langgraph";

import { createThread, getThreadState, sendMessage } from "@/lib/chatApi";

export function MyAssistant() {
  const threadIdRef = useRef<string | undefined>();
  const runtime = useLangGraphRuntime({
    threadId: threadIdRef.current,
    stream: async (messages) => {
      if (!threadIdRef.current) {
        const { thread_id } = await createThread();
        threadIdRef.current = thread_id;
      }
      const threadId = threadIdRef.current;
      return sendMessage({
        threadId,
        messages,
      });
    },
    onSwitchToNewThread: async () => {
      const { thread_id } = await createThread();
      threadIdRef.current = thread_id;
    },
    onSwitchToThread: async (threadId) => {
      const state = await getThreadState(threadId);
      threadIdRef.current = threadId;
      return {
        messages: state.values.messages,
        interrupts: state.tasks[0]?.interrupts,
      };
    },
  });

  return (
    <AssistantRuntimeProvider runtime={runtime}>
      <Thread />
    </AssistantRuntimeProvider>
  );
}
```

  </Step>
  <Step>

### Use the `MyAssistant` component

```tsx twoslash title="@/app/page.tsx" {2,8}
// @include: MyAssistant
// @filename: /app/page.tsx
// ---cut---
import { MyAssistant } from "@/components/MyAssistant";

export default function Home() {
  return (
    <main className="h-dvh">
      <MyAssistant />
    </main>
  );
}
```

  </Step>
  <Step>

### Setup environment variables

Create a `.env.local` file in your project with the following variables:

```sh
# LANGCHAIN_API_KEY=your_api_key # for production
# LANGGRAPH_API_URL=your_api_url # for production
NEXT_PUBLIC_LANGGRAPH_API_URL=your_api_url # for development (no api key required)
NEXT_PUBLIC_LANGGRAPH_ASSISTANT_ID=your_graph_id
```

  </Step>
  <Step>

### Setup UI components

Follow the [UI Components](/docs/ui/shadcn-ui/Thread) guide to setup the UI components.

  </Step>
</Steps>

## Advanced APIs

### Message Accumulator

The `LangGraphMessageAccumulator` lets you append messages incoming from the server to replicate the messages state client side.

```typescript
import {
  LangGraphMessageAccumulator,
  appendLangChainChunk,
} from "@assistant-ui/react-langgraph";

const accumulator = new LangGraphMessageAccumulator({
  appendMessage: appendLangChainChunk,
});

// Add new chunks from the server
if (event.event === "messages/partial") accumulator.addMessages(event.data);
```

### Message Conversion

Use `convertLangChainMessages` to transform LangChain messages to assistant-ui format:

```typescript
import { convertLangChainMessages } from "@assistant-ui/react-langgraph";

const threadMessage = convertLangChainMessages(langChainMessage);
```

## Interrupt Persistence

LangGraph supports interrupting the execution flow to request user input or handle specific interactions. These interrupts can be persisted and restored when switching between threads. This means that if a user switches away from a thread during an interaction (like waiting for user approval), the interaction state will be preserved when they return to that thread.

To handle interrupts in your application:

1. Make sure your thread state type includes the `interrupts` field
2. Return the interrupts from `onSwitchToThread` along with the messages
3. The runtime will automatically restore the interrupt state when switching threads

This feature is particularly useful for applications that require user approval flows, multi-step forms, or any other interactive elements that might span multiple thread switches.



================================================
FILE: apps/docs/content/docs/runtimes/langgraph/meta.json
================================================
{
  "title": "LangGraph Cloud",
  "pages": ["index", "tutorial", "..."]
}



================================================
FILE: apps/docs/content/docs/runtimes/langgraph/tutorial/index.mdx
================================================
---
title: "Introduction"
---

import { redirect } from "next/navigation";

<>
  {redirect(
    "/docs/runtimes/langgraph/tutorial/introduction",
  )}
</>



================================================
FILE: apps/docs/content/docs/runtimes/langgraph/tutorial/introduction.mdx
================================================
---
title: "Introduction"
---

In this tutorial, we will build a stockbroker assistant using LangChain.js, LangGraph.js and assistant-ui.

We will go through the necessary steps to integrate assistant-ui with a LangGraph Cloud endpoint.
Code snippets focus on the setup of the frontend, but we will highlight relevant sections of the backend code as well.

This agent leverages the following features:

- 🚄 Streaming of messages from LangGraph state to assistant-ui
- 💅 Rich text rendering using Markdown
- 🛠️ Generative UI: Mapping tool calls to tool UIs
- 🔁 Approval UI: Confirming tool calls before execution (human-in-the-loop)

## Prerequisites

- Node.js 18.x or higher

## Final Result

- Demo: https://assistant-ui-stockbroker.vercel.app/
- Source Code: https://github.com/assistant-ui/assistant-ui-stockbroker

## Get Started

Begin Part 1 of the tutorial by [setting up the frontend](/docs/runtimes/langgraph/tutorial/part-1).



================================================
FILE: apps/docs/content/docs/runtimes/langgraph/tutorial/meta.json
================================================
{
  "title": "Tutorial: Stockbroker",
  "pages": ["..."]
}



================================================
FILE: apps/docs/content/docs/runtimes/langgraph/tutorial/part-1.mdx
================================================
---
title: "Part 1: Setup frontend"
---

## Create a new project

Run the following command to create a new Next.js project with the LangGraph assistant-ui template:

```sh
npx create-assistant-ui@latest -t langgraph my-app
cd my-app
```

You should see the following files in your project:

import { File, Folder, Files } from "fumadocs-ui/components/files";

<Files>
  <Folder name="my-app" defaultOpen>
    <Folder name="app" defaultOpen>
      <Folder name="api" defaultOpen>
        <Folder name="[...path]" defaultOpen>
          <File name="route.ts" />
        </Folder>
      </Folder>
      <File name="globals.css" />
      <File name="layout.tsx" />
      <File name="MyRuntimeProvider.tsx" />
      <File name="page.tsx" />
    </Folder>
    <Folder name="lib">
      <File name="chatApi.ts" />
    </Folder>
    <File name="next.config.ts" />
    <File name="package.json" />
    <File name="postcss.config.mjs" />
    <File name="tailwind.config.ts" />
    <File name="tsconfig.json" />
  </Folder>
</Files>

### Setup environment variables

Create a `.env.local` file in your project with the following variables:

```sh title="@/.env.local"
LANGGRAPH_API_URL=https://assistant-ui-stockbroker.vercel.app/api
NEXT_PUBLIC_LANGGRAPH_ASSISTANT_ID=stockbroker
```

This connects the frontend to a LangGraph Cloud endpoint running under  
`https://assistant-ui-stockbroker.vercel.app/api`.  
This endpoint is running the LangGraph agent defined [in this repository](https://github.com/assistant-ui/assistant-ui-stockbroker/blob/main/backend).

### Start the server

You can start the server by running the following command:

```sh
npm run dev
```

The server will start and you can view the frontend by opening a browser tab to http://localhost:3000.

You should be able to chat with the assistant and see LLM responses streaming in real-time.

## Explore features

### Streaming

Streaming message support is enabled by default. The LangGraph integration includes sophisticated message handling that efficiently manages streaming responses:

- Messages are accumulated and updated in real-time using `LangGraphMessageAccumulator`
- Partial message chunks are automatically merged using `appendLangChainChunk`
- The runtime handles all the complexity of managing streaming state

This means you'll see tokens appear smoothly as they're generated by the LLM, with proper handling of both text content and tool calls.

### Markdown support

Rich text rendering using Markdown is enabled by default.

## Add conversation starter messages

In order to help users understand what the assistant can do, we can add some conversation starter messages.

import Image from "next/image";
import starter from "./images/conversation-starters.png";

<Image
  src={starter}
  alt="Conversation starters"
  width={600}
  className="mx-auto rounded-lg border shadow"
/>

```tsx title="@/app/page.tsx" {5-17}
export default function Home() {
  return (
    <div className="flex h-full flex-col">
      <Thread
        welcome={{
          suggestions: [
            {
              prompt: "How much revenue did Apple make last year?",
            },
            {
              prompt: "Is McDonald's profitable?",
            },
            {
              prompt: "What's the current stock price of Tesla?",
            },
          ],
        }}
        assistantMessage={{ components: { Text: MarkdownText } }}
      />
    </div>
  );
}
```



================================================
FILE: apps/docs/content/docs/runtimes/langgraph/tutorial/part-2.mdx
================================================
---
title: "Part 2: Generative UI"
---

In the previous step, we set up the frontend to connect to a LangGraph Cloud endpoint.

In this step, we will set up a component to display stock ticker information.

import Image from "next/image";
import price from "./images/acme-price.png";

<Image
  src={price}
  alt="Price snapshot"
  width={600}
  className="mx-auto rounded-lg border shadow"
/>

For reference, this the corresponding code in the backend:

https://github.com/assistant-ui/assistant-ui-stockbroker/blob/main/backend/src/tools.ts#L193C1-L216C3

```ts title="assistant-ui-stockbroker/backend/tools/PriceSnapshotTool.ts"
export const priceSnapshotTool = tool(
  async (input) => {
    const data = await callFinancialDatasetAPI<SnapshotResponse>({
      endpoint: "/prices/snapshot",
      params: {
        ticker: input.ticker,
      },
    });
    return JSON.stringify(data, null);
  },
  {
    name: "price_snapshot",
    description:
      "Retrieves the current stock price and related market data for a given company.",
    schema: z.object({
      ticker: z.string().describe("The ticker of the company. Example: 'AAPL'"),
    }),
  },
);
```

## PriceSnapshotTool

We create a new file under `/components/tools/price-snapshot/PriceSnapshotTool.tsx` to define the tool.

First, we define the tool arguments and result types:

```ts title="@/components/tools/price-snapshot/PriceSnapshotTool.tsx"
type PriceSnapshotToolArgs = {
  ticker: string;
};

type PriceSnapshotToolResult = {
  snapshot: {
    price: number;
    day_change: number;
    day_change_percent: number;
    time: string;
  };
};
```

Then, we use `makeAssistantToolUI` to define the tool UI:

```tsx title="@/components/tools/price-snapshot/PriceSnapshotTool.tsx"
"use client";

import { makeAssistantToolUI } from "@assistant-ui/react";

export const PriceSnapshotTool = makeAssistantToolUI<
  PriceSnapshotToolArgs,
  string
>({
  toolName: "price_snapshot",
  render: function PriceSnapshotUI({ args, result }) {
    return (
      <div className="mb-4 flex flex-col items-center">
        <pre className="whitespace-pre-wrap break-all text-center">
          price_snapshot({JSON.stringify(args)})
        </pre>
      </div>
    );
  },
});
```

This simply displays the tool name and arguments passed to it, but not the result.

### Bind tool UI

```tsx title="@/app/page.tsx" {1,8}
import { PriceSnapshotTool } from "@/components/tools/price-snapshot/PriceSnapshotTool";

export default function Home() {
  return (
    <div className="flex h-full flex-col">
      <Thread
        ...
        tools={[PriceSnapshotTool]}
      />
    </div>
  );
}
```

### Try it out!

Ask the assistant for the current stock price of Tesla. You should see the following text appear:

```
price_snapshot({ticker: "TSLA"})
```

Next, we will visualize the function's result.

## Visualizing tool results

### Install dependencies

The tool result component relies on shadcn/ui's `Card` component. We will install it as a dependency.

```sh
npx shadcn@latest add card
```

You will be prompted to setup a `components.json` file, after this step, a `card` UI component will be installed in your project.

### Add `PriceSnapshot`

We create a new file under `/components/tools/price-snapshot/price-snapshot.tsx` to define the new tool result UI.

```tsx title="@/components/tools/price-snapshot/price-snapshot.tsx"
"use client";

import { ArrowDownIcon, ArrowUpIcon } from "lucide-react";

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

type PriceSnapshotToolArgs = {
  ticker: string;
};

type PriceSnapshotToolResult = {
  price: number;
  day_change: number;
  day_change_percent: number;
  time: string;
};

export function PriceSnapshot({
  ticker,
  price,
  day_change,
  day_change_percent,
  time,
}: PriceSnapshotToolArgs & PriceSnapshotToolResult) {
  const isPositiveChange = day_change >= 0;
  const changeColor = isPositiveChange ? "text-green-600" : "text-red-600";
  const ArrowIcon = isPositiveChange ? ArrowUpIcon : ArrowDownIcon;

  return (
    <Card className="mx-auto w-full max-w-md">
      <CardHeader>
        <CardTitle className="text-2xl font-bold">{ticker}</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="grid grid-cols-2 gap-4">
          <div className="col-span-2">
            <p className="text-3xl font-semibold">${price?.toFixed(2)}</p>
          </div>
          <div>
            <p className="text-muted-foreground text-sm">Day Change</p>
            <p
              className={`flex items-center text-lg font-medium ${changeColor}`}
            >
              <ArrowIcon className="mr-1 h-4 w-4" />$
              {Math.abs(day_change)?.toFixed(2)} (
              {Math.abs(day_change_percent)?.toFixed(2)}%)
            </p>
          </div>
          <div>
            <p className="text-muted-foreground text-sm">Last Updated</p>
            <p className="text-lg font-medium">
              {new Date(time).toLocaleTimeString()}
            </p>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}
```

### Update `PriceSnapshotTool`

We will import the new `<PriceSnapshot />` component and use it in the `render` function whenever a tool result is available.

```tsx title="@/components/tools/price-snapshot/PriceSnapshotTool.tsx" {3,25-30,37-42}
"use client";

import { PriceSnapshot } from "./price-snapshot";
import { makeAssistantToolUI } from "@assistant-ui/react";

type PriceSnapshotToolArgs = {
  ticker: string;
};

type PriceSnapshotToolResult = {
  snapshot: {
    price: number;
    day_change: number;
    day_change_percent: number;
    time: string;
  };
};

export const PriceSnapshotTool = makeAssistantToolUI<
  PriceSnapshotToolArgs,
  string
>({
  toolName: "price_snapshot",
  render: function PriceSnapshotUI({ args, result }) {
    let resultObj: PriceSnapshotToolResult | { error: string };
    try {
      resultObj = result ? JSON.parse(result) : {};
    } catch (e) {
      resultObj = { error: result! };
    }

    return (
      <div className="mb-4 flex flex-col items-center gap-2">
        <pre className="whitespace-pre-wrap break-all text-center">
          price_snapshot({JSON.stringify(args)})
        </pre>
        {"snapshot" in resultObj && (
          <PriceSnapshot ticker={args.ticker} {...resultObj.snapshot} />
        )}
        {"error" in resultObj && (
          <p className="text-red-500">{resultObj.error}</p>
        )}
      </div>
    );
  },
});
```

### Try it out!

Ask the assistant for the current stock price of Tesla. You should see the tool result appear:

import price2 from "./images/tsla-price.png";

<Image
  src={price2}
  alt="Price snapshot result"
  width={600}
  className="mx-auto rounded-lg border shadow"
/>

## Fallback tool UI

Instead of defining a custom tool UI for every tool, we can also define a fallback UI for all tools that are not explicitly defined.

This requires shadcn/ui's `Button` component. We will install it as a dependency.

```sh
npx shadcn@latest add button
```

Then create a new file under `/components/tools/ToolFallback.tsx` to define the fallback UI.

```tsx title="@/components/tools/ToolFallback.tsx"
import { ToolCallMessagePartComponent } from "@assistant-ui/react";
import { CheckIcon, ChevronDownIcon, ChevronUpIcon } from "lucide-react";
import { useState } from "react";
import { Button } from "../ui/button";

export const ToolFallback: ToolCallMessagePartComponent = ({
  toolName,
  argsText,
  result,
}) => {
  const [isCollapsed, setIsCollapsed] = useState(true);
  return (
    <div className="mb-4 flex w-full flex-col gap-3 rounded-lg border py-3">
      <div className="flex items-center gap-2 px-4">
        <CheckIcon className="size-4" />
        <p className="">
          Used tool: <b>{toolName}</b>
        </p>
        <div className="flex-grow" />
        <Button onClick={() => setIsCollapsed(!isCollapsed)}>
          {isCollapsed ? <ChevronUpIcon /> : <ChevronDownIcon />}
        </Button>
      </div>
      {!isCollapsed && (
        <div className="flex flex-col gap-2 border-t pt-2">
          <div className="px-4">
            <pre className="whitespace-pre-wrap">{argsText}</pre>
          </div>
          {result !== undefined && (
            <div className="border-t border-dashed px-4 pt-2">
              <p className="font-semibold">Result:</p>
              <pre className="whitespace-pre-wrap">
                {typeof result === "string"
                  ? result
                  : JSON.stringify(result, null, 2)}
              </pre>
            </div>
          )}
        </div>
      )}
    </div>
  );
};
```

### Bind fallback UI

```tsx title="@/app/page.tsx" {1,8}
import { ToolFallback } from "@/components/tools/ToolFallback";

export default function Home() {
  return (
    <div className="flex h-full flex-col">
      <Thread
        ...
        assistantMessage={{ components: { Text: MarkdownText, ToolFallback } }}
      />
    </div>
  );
}
```



================================================
FILE: apps/docs/content/docs/runtimes/langgraph/tutorial/part-3.mdx
================================================
---
title: "Part 3: Approval UI"
---

## Background: LangGraph implementation details

import Image from "next/image";
import approval from "./images/stockbroker-langgraph.png";

<Image
  src={approval}
  alt="LangChain LangGraph"
  width={600}
  className="mx-auto rounded-lg border shadow"
/>

Our LangGraph backend interrupts the `purchase_stock` tool execution in order to ensure the user confirms the purchase. The user confirms the purchase by submitting a tool message with the `approve` field set to `true`.

```ts title="assistant-ui-stockbroker/backend/src/index.ts" {6,18-19,32-35}
const purchaseApproval = async (state: typeof GraphAnnotation.State) => {
  const { messages } = state;
  const lastMessage = messages[messages.length - 1];
  if (!(lastMessage instanceof ToolMessage)) {
    // Interrupt the node to request permission to execute the purchase.
    throw new NodeInterrupt("Please confirm the purchase before executing.");
  }
};

const shouldExecutePurchase = (state: typeof GraphAnnotation.State) => {
  const { messages } = state;
  const lastMessage = messages[messages.length - 1];
  if (!(lastMessage instanceof ToolMessage)) {
    // Interrupt the node to request permission to execute the purchase.
    throw new NodeInterrupt("Please confirm the purchase before executing.");
  }

  const { approve } = JSON.parse(lastMessage.content as string);
  return approve ? "execute_purchase" : "agent";
};

const workflow = new StateGraph(GraphAnnotation)
  .addNode("agent", callModel)
  .addEdge(START, "agent")
  .addNode("tools", toolNode)
  .addNode("prepare_purchase_details", preparePurchaseDetails)
  .addNode("purchase_approval", purchaseApproval)
  .addNode("execute_purchase", executePurchase)
  .addEdge("prepare_purchase_details", "purchase_approval")
  .addEdge("execute_purchase", END)
  .addEdge("tools", "agent")
  .addConditionalEdges("purchase_approval", shouldExecutePurchase, [
    "agent",
    "execute_purchase",
  ])
  .addConditionalEdges("agent", shouldContinue, [
    "tools",
    END,
    "prepare_purchase_details",
  ]);
```

## Add approval UI

We create a new file under `/components/tools/purchase-stock/PurchaseStockTool.tsx` to define the tool.

First, we define the tool arguments and result types:

```ts title="@/components/tools/purchase-stock/PurchaseStockTool.tsx"
type PurchaseStockArgs = {
  ticker: string;
  companyName: string;
  quantity: number;
  maxPurchasePrice: number;
};

type PurchaseStockResult = {
  approve?: boolean;
  cancelled?: boolean;
  error?: string;
};
```

Then we use `makeAssistantToolUI` to define the tool UI:

```tsx title="@/components/tools/purchase-stock/PurchaseStockTool.tsx"
"use client";

import { TransactionConfirmationPending } from "./transaction-confirmation-pending";
import { TransactionConfirmationFinal } from "./transaction-confirmation-final";
import { makeAssistantToolUI } from "@assistant-ui/react";
import { updateState } from "@/lib/chatApi";

export const PurchaseStockTool = makeAssistantToolUI<PurchaseStockArgs, string>(
  {
    toolName: "purchase_stock",
    render: function PurchaseStockUI({ args, result, status, addResult }) {
      const handleReject = async () => {
        addResult({ approve: false });
      };

      const handleConfirm = async () => {
        addResult({ approve: true });
      };

      return (
        <div className="mb-4 flex flex-col items-center gap-2">
          <div>
            <pre className="whitespace-pre-wrap break-all text-center">
              purchase_stock({JSON.stringify(args)})
            </pre>
          </div>
          {!result && status.type !== "running" && (
            <TransactionConfirmationPending
              {...args}
              onConfirm={handleConfirm}
              onReject={handleReject}
            />
          )}
        </div>
      );
    },
  },
);
```

Finally, we add a `TransactionConfirmationPending` component to ask for approval.

This requires shadcn/ui's `Card` and `Button` components. We will install them as a dependency.

```sh
npx shadcn@latest add card button
```

Then create a new file under `/components/tools/purchase-stock/transaction-confirmation-pending.tsx` to define the approval UI.

```tsx title="@/components/tools/purchase-stock/transaction-confirmation-pending.tsx"
"use client";

import { CheckIcon, XIcon } from "lucide-react";

import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";

type TransactionConfirmation = {
  ticker: string;
  companyName: string;
  quantity: number;
  maxPurchasePrice: number;
  onConfirm: () => void;
  onReject: () => void;
};

export function TransactionConfirmationPending(props: TransactionConfirmation) {
  const {
    ticker,
    companyName,
    quantity,
    maxPurchasePrice,
    onConfirm,
    onReject,
  } = props;

  return (
    <Card className="mx-auto w-full max-w-md">
      <CardHeader>
        <CardTitle className="text-2xl font-bold">
          Confirm Transaction
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="grid grid-cols-2 gap-2">
          <p className="text-muted-foreground text-sm font-medium">Ticker:</p>
          <p className="text-sm font-bold">{ticker}</p>
          <p className="text-muted-foreground text-sm font-medium">Company:</p>
          <p className="text-sm">{companyName}</p>
          <p className="text-muted-foreground text-sm font-medium">Quantity:</p>
          <p className="text-sm">{quantity} shares</p>
          <p className="text-muted-foreground text-sm font-medium">
            Max Purchase Price:
          </p>
          <p className="text-sm">${maxPurchasePrice?.toFixed(2)}</p>
        </div>
        <div className="bg-muted rounded-md p-3">
          <p className="text-sm font-medium">Total Maximum Cost:</p>
          <p className="text-lg font-bold">
            ${(quantity * maxPurchasePrice)?.toFixed(2)}
          </p>
        </div>
      </CardContent>
      <CardFooter className="flex justify-end">
        <Button variant="outline" onClick={onReject}>
          <XIcon className="mr-2 h-4 w-4" />
          Reject
        </Button>
        <Button onClick={onConfirm}>
          <CheckIcon className="mr-2 h-4 w-4" />
          Confirm
        </Button>
      </CardFooter>
    </Card>
  );
}
```

### Bind approval UI

```tsx title="@/app/page.tsx" {1,8}
import { PurchaseStockTool } from "@/components/tools/purchase-stock/PurchaseStockTool";

export default function Home() {
  return (
    <div className="flex h-full flex-col">
      <Thread
        ...
        tools={[PriceSnapshotTool, PurchaseStockTool]}
      />
    </div>
  );
}
```

### Try it out!

Ask the assistant to buy 5 shares of Tesla. You should see the following appear:

import purchase from "./images/acme-approve.png";

<Image
  src={purchase}
  alt="Approval UI"
  width={600}
  className="mx-auto rounded-lg border shadow"
/>

## Add `TransactionConfirmationFinal` to show approval result

We will add a component to display the approval result.

```ts title="@/components/tools/purchase-stock/transaction-confirmation-final.tsx"
"use client";

import { CheckCircle } from "lucide-react";

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

type TransactionConfirmation = {
  ticker: string;
  companyName: string;
  quantity: number;
  maxPurchasePrice: number;
};

export function TransactionConfirmationFinal(props: TransactionConfirmation) {
  const { ticker, companyName, quantity, maxPurchasePrice } = props;

  return (
    <Card className="mx-auto w-full max-w-md">
      <CardHeader className="text-center">
        <CheckCircle className="mx-auto mb-4 h-16 w-16 text-green-500" />
        <CardTitle className="text-2xl font-bold text-green-700">
          Transaction Confirmed
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="rounded-md border border-green-200 bg-green-50 p-4">
          <h3 className="mb-2 text-lg font-semibold text-green-800">
            Purchase Summary
          </h3>
          <div className="grid grid-cols-2 gap-2 text-sm">
            <p className="font-medium text-green-700">Ticker:</p>
            <p className="font-bold text-green-900">{ticker}</p>
            <p className="font-medium text-green-700">Company:</p>
            <p className="text-green-900">{companyName}</p>
            <p className="font-medium text-green-700">Quantity:</p>
            <p className="text-green-900">{quantity} shares</p>
            <p className="font-medium text-green-700">Price per Share:</p>
            <p className="text-green-900">${maxPurchasePrice?.toFixed(2)}</p>
          </div>
        </div>
        <div className="rounded-md border border-green-300 bg-green-100 p-4">
          <p className="text-lg font-semibold text-green-800">Total Cost:</p>
          <p className="text-2xl font-bold text-green-900">
            ${(quantity * maxPurchasePrice)?.toFixed(2)}
          </p>
        </div>
        <p className="text-center text-sm text-green-600">
          Your purchase of {quantity} shares of {companyName} ({ticker}) has
          been successfully processed.
        </p>
      </CardContent>
    </Card>
  );
}
```

### Update `PurchaseStockTool`

We will import the new `<TransactionConfirmationFinal />` component and use it in the `render` function whenever an approval result is available.

```tsx title="@/components/tools/purchase-stock/PurchaseStockTool.tsx" {3,25-30,37-42}
"use client";

import { TransactionConfirmationPending } from "./transaction-confirmation-pending";
import { TransactionConfirmationFinal } from "./transaction-confirmation-final";
import { makeAssistantToolUI } from "@assistant-ui/react";
import { updateState } from "@/lib/chatApi";

type PurchaseStockArgs = {
  ticker: string;
  companyName: string;
  quantity: number;
  maxPurchasePrice: number;
};

type PurchaseStockResult = {
  approve?: boolean;
  cancelled?: boolean;
  error?: string;
};

export const PurchaseStockTool = makeAssistantToolUI<PurchaseStockArgs, string>(
  {
    toolName: "purchase_stock",
    render: function PurchaseStockUI({ args, result, status, addResult }) {
      let resultObj: PurchaseStockResult;
      try {
        resultObj = result ? JSON.parse(result) : {};
      } catch (e) {
        resultObj = { error: result! };
      }

      const handleReject = () => {
        addResult({ cancelled: true });
      };

      const handleConfirm = async () => {
        addResult({ approve: true });
      };

      return (
        <div className="mb-4 flex flex-col items-center gap-2">
          <div>
            <pre className="whitespace-pre-wrap break-all text-center">
              purchase_stock({JSON.stringify(args)})
            </pre>
          </div>
          {!result && status.type !== "running" && (
            <TransactionConfirmationPending
              {...args}
              onConfirm={handleConfirm}
              onReject={handleReject}
            />
          )}
          {resultObj.approve && <TransactionConfirmationFinal {...args} />}
          {resultObj.approve === false && (
            <pre className="font-bold text-red-600">User rejected purchase</pre>
          )}
          {resultObj.cancelled && (
            <pre className="font-bold text-red-600">Cancelled</pre>
          )}
        </div>
      );
    },
  },
);
```

### Try it out!

Confirm the purchase of shares. You should see the approval confimration UI appear.

import purchase2 from "./images/acme-confirmed.png";

<Image
  src={purchase2}
  alt="Approval result"
  width={600}
  className="mx-auto rounded-lg border shadow"
/>



================================================
FILE: apps/docs/content/docs/runtimes/mastra/full-stack-integration.mdx
================================================
---
title: Full-Stack Integration
---

import { Step, Steps } from "fumadocs-ui/components/steps";
import { Callout } from "fumadocs-ui/components/callout";

Integrate Mastra directly into your Next.js application's API routes. This approach keeps your backend and frontend code within the same project.

<Steps>
<Step>

### Initialize Assistant UI

Start by setting up Assistant UI in your project. Run one of the following commands:

```sh title="New Project"
npx assistant-ui@latest create
```

```sh title="Existing Project"
npx assistant-ui@latest init
```

This command installs necessary dependencies and creates basic configuration files, including a default chat API route.

<Callout title="Need Help?">
  For detailed setup instructions, including adding API keys, basic
  configuration, and manual setup steps, please refer to the main [Getting
  Started guide](/docs/getting-started).
</Callout>

</Step>
<Step>

### Review Initial API Route

The initialization command creates a basic API route at `app/api/chat/route.ts` (or `src/app/api/chat/route.ts`). It typically looks like this:

```typescript title="app/api/chat/route.ts"
import { openai } from "@ai-sdk/openai";
import { streamText } from "ai";

// Allow streaming responses up to 30 seconds
export const maxDuration = 30;

export async function POST(req: Request) {
  const { messages } = await req.json();

  const result = streamText({
    model: openai("gpt-4o-mini"),
    messages,
  });

  return result.toDataStreamResponse();
}
```

This default route uses the Vercel AI SDK directly with OpenAI. In the following steps, we will modify this route to integrate Mastra.

</Step>
<Step>

### Install Mastra Packages

Add the Mastra core, memory, the AI SDK OpenAI provider packages to your project:

```bash npm2yarn
npm install @mastra/core@latest @mastra/memory@latest @ai-sdk/openai
```

</Step>
<Step>

### Configure Next.js

To ensure Next.js correctly bundles your application when using Mastra directly in API routes, you need to configure `serverExternalPackages`.

Update your `next.config.mjs` (or `next.config.js`) file to include `@mastra/*`:

```js title="next.config.mjs"
/** @type {import('next').NextConfig} */
const nextConfig = {
  serverExternalPackages: ["@mastra/*"],
  // ... other configurations
};

export default nextConfig;
```

This tells Next.js to treat Mastra packages as external dependencies on the server-side.

</Step>
<Step>

### Create Mastra Files

Set up the basic folder structure for your Mastra configuration. Create a `mastra` folder (e.g., in your `src` or root directory) with the following structure:

```txt title="Project Structure"
/
├── mastra/
│   ├── agents/
│   │   └── chefAgent.ts
│   └── index.ts
└── ... (rest of your project)
```

You can create these files and folders manually or use the following commands in your terminal:

```bash
mkdir -p mastra/agents
touch mastra/index.ts mastra/agents/chefAgent.ts
```

These files will be used in the next steps to define your Mastra agent and configuration.

</Step>
<Step>

### Define the Agent

Now, let's define the behavior of our AI agent. Open the `mastra/agents/chefAgent.ts` file and add the following code:

```typescript title="mastra/agents/chefAgent.ts"
import { openai } from "@ai-sdk/openai";
import { Agent } from "@mastra/core/agent";

export const chefAgent = new Agent({
  name: "chef-agent",
  instructions:
    "You are Michel, a practical and experienced home chef. " +
    "You help people cook with whatever ingredients they have available.",
  model: openai("gpt-4o-mini"),
});
```

This code creates a new Mastra `Agent` named `chef-agent`.

- `instructions`: Defines the agent's persona and primary goal.
- `model`: Specifies the language model the agent will use (in this case, OpenAI's GPT-4o Mini via the AI SDK).

Make sure you have set up your OpenAI API key as described in the [Getting Started guide](/docs/getting-started).

</Step>
<Step>

### Register the Agent

Next, register the agent with your Mastra instance. Open the `mastra/index.ts` file and add the following code:

```typescript title="mastra/index.ts"
import { Mastra } from "@mastra/core";

import { chefAgent } from "./agents/chefAgent";

export const mastra = new Mastra({
  agents: { chefAgent },
});
```

This code initializes Mastra and makes the `chefAgent` available for use in your application's API routes.

</Step>
<Step>

### Modify the API Route

Now, update your API route (`app/api/chat/route.ts`) to use the Mastra agent you just configured. Replace the existing content with the following:

```typescript title="app/api/chat/route.ts"
import { mastra } from "@/mastra"; // Adjust the import path if necessary

// Allow streaming responses up to 30 seconds
export const maxDuration = 30;

export async function POST(req: Request) {
  // Extract the messages from the request body
  const { messages } = await req.json();

  // Get the chefAgent instance from Mastra
  const agent = mastra.getAgent("chefAgent");

  // Stream the response using the agent
  const result = await agent.stream(messages);

  // Return the result as a data stream response
  return result.toDataStreamResponse();
}
```

Key changes:
- We import the `mastra` instance created in `mastra/index.ts`. Make sure the import path (`@/mastra`) is correct for your project setup (you might need `~/mastra`, `../../../mastra`, etc., depending on your path aliases and project structure).
- We retrieve the `chefAgent` using `mastra.getAgent("chefAgent")`.
- Instead of calling the AI SDK's `streamText` directly, we call `agent.stream(messages)` to process the chat messages using the agent's configuration and model.
- The result is still returned in a format compatible with Assistant UI using `toDataStreamResponse()`.

Your API route is now powered by Mastra!

</Step>
<Step>

### Run the Application

You're all set! Start your Next.js development server:

```bash npm2yarn
npm run dev
```

Open your browser to `http://localhost:3000` (or the port specified in your terminal). You should now be able to interact with your `chefAgent` through the Assistant UI chat interface. Ask it for cooking advice based on ingredients you have!

</Step>
</Steps>

Congratulations! You have successfully integrated Mastra into your Next.js application using the full-stack approach. Your Assistant UI frontend now communicates with a Mastra agent running in your Next.js backend API route.

To explore more advanced Mastra features like memory, tools, workflows, and more, please refer to the [official Mastra documentation](https://mastra.ai/docs).



================================================
FILE: apps/docs/content/docs/runtimes/mastra/meta.json
================================================
{
  "title": "Mastra",
  "pages": ["overview", "full-stack-integration", "separate-server-integration"]
}



================================================
FILE: apps/docs/content/docs/runtimes/mastra/overview.mdx
================================================
---
title: Overview
---

Mastra is an open-source TypeScript agent framework designed to provide the essential primitives for building AI applications. It enables developers to create AI agents with memory and tool-calling capabilities, implement deterministic LLM workflows, and leverage RAG for knowledge integration. With features like model routing, workflow graphs, and automated evals, Mastra provides a complete toolkit for developing, testing, and deploying AI applications.

## Integrating with Next.js and Assistant UI

There are two primary ways to integrate Mastra into your Next.js project when using Assistant UI:

1.  **Full-Stack Integration**: Integrate Mastra directly into your Next.js application's API routes. This approach keeps your backend and frontend code within the same project.
    [Learn how to set up Full-Stack Integration](./full-stack-integration)

2.  **Separate Server Integration**: Run Mastra as a standalone server and connect your Next.js frontend to its API endpoints. This approach separates concerns and allows for independent scaling.
    [Learn how to set up Separate Server Integration](./separate-server-integration)

Choose the guide that best fits your project architecture. Both methods allow seamless integration with the Assistant UI components.



================================================
FILE: apps/docs/content/docs/runtimes/mastra/separate-server-integration.mdx
================================================
---
title: Separate Server Integration
---

import { Step, Steps } from "fumadocs-ui/components/steps";
import { Callout } from "fumadocs-ui/components/callout";

Run Mastra as a standalone server and connect your Next.js frontend (using Assistant UI) to its API endpoints. This approach separates your AI backend from your frontend application, allowing for independent development and scaling.

<Steps>

<Step>

### Create Mastra Server Project

First, create a dedicated project for your Mastra server. Choose a directory separate from your Next.js/Assistant UI frontend project.

Navigate to your chosen parent directory in the terminal and run the Mastra create command:

```bash
npx create-mastra@latest
```

This command will launch an interactive wizard to help you scaffold a new Mastra project, including prompting you for a project name and setting up basic configurations. Follow the prompts to create your server project. For more detailed setup instructions, refer to the [official Mastra installation guide](https://mastra.ai/docs/getting-started/installation).

Once the setup is complete, navigate into your new Mastra project directory (the name you provided during the setup):

```bash
cd your-mastra-server-directory # Replace with the actual directory name
```

You now have a basic Mastra server project ready.

<Callout title="API Keys">
  Ensure you have configured your environment variables (e.g., `OPENAI_API_KEY`)
  within this Mastra server project, typically in a `.env.development` file, as
  required by the models you use. The `create-mastra` wizard might prompt you
  for some keys, but ensure all necessary keys for your chosen models are
  present.
</Callout>

</Step>

<Step>

### Define the Agent

Next, let's define an agent within your Mastra server project. We'll create a `chefAgent` similar to the one used in the full-stack guide.

Open or create the agent file (e.g., `src/agents/chefAgent.ts` within your Mastra project) and add the following code:

```typescript title="src/agents/chefAgent.ts"
import { openai } from "@ai-sdk/openai";
import { Agent } from "@mastra/core/agent";

export const chefAgent = new Agent({
  name: "chef-agent",
  instructions:
    "You are Michel, a practical and experienced home chef. " +
    "You help people cook with whatever ingredients they have available.",
  model: openai("gpt-4o-mini"),
});
```

This defines the agent's behavior, but it's not yet active in the Mastra server.

</Step>

<Step>

### Register the Agent

Now, you need to register the `chefAgent` with your Mastra instance so the server knows about it. Open your main Mastra configuration file (this is often `src/index.ts` in projects created with `create-mastra`).

Import the `chefAgent` and add it to the `agents` object when initializing Mastra:

```typescript title="src/index.ts"
import { Mastra } from "@mastra/core";
import { chefAgent } from "./agents/chefAgent"; // Adjust path if necessary

export const mastra = new Mastra({
  agents: { chefAgent },
});
```

Make sure you adapt this code to fit the existing structure of your `src/index.ts` file generated by `create-mastra`. The key is to import your agent and include it in the `agents` configuration object.

</Step>

<Step>

### Run the Mastra Server

With the agent defined and registered, start the Mastra development server:

```bash npm2yarn
npm run dev
```

By default, the Mastra server will run on `http://localhost:4111`. Your `chefAgent` should now be accessible via a POST request endpoint, typically `http://localhost:4111/api/agents/chefAgent/stream`. Keep this server running for the next steps where we'll set up the Assistant UI frontend to connect to it.

</Step>

<Step>

### Initialize Assistant UI Frontend

Now, set up your frontend application using Assistant UI. Navigate to a **different directory** from your Mastra server project. You can either create a new Next.js project or use an existing one.

Inside your frontend project directory, run one of the following commands:

```sh title="New Project"
npx assistant-ui@latest create
```

```sh title="Existing Project"
npx assistant-ui@latest init
```

This command installs the necessary Assistant UI dependencies and sets up basic configuration files, including a default chat page and an API route (`app/api/chat/route.ts`).

<Callout title="Need Help?">
  For detailed setup instructions for Assistant UI, including manual setup
  steps, please refer to the main [Getting Started
  guide](/docs/getting-started).
</Callout>

In the next step, we will configure this frontend to communicate with the separate Mastra server instead of using the default API route.

</Step>

<Step>

### Configure Frontend API Endpoint

The default Assistant UI setup configures the chat runtime to use a local API route (`/api/chat`) within the Next.js project. Since our Mastra agent is running on a separate server, we need to update the frontend to point to that server's endpoint.

Open the main page file in your Assistant UI frontend project (usually `app/page.tsx` or `src/app/page.tsx`). Find the `useChatRuntime` hook and change the `api` property to the full URL of your Mastra agent's stream endpoint:

```tsx {10} title="app/page.tsx"
"use client";
import { Thread } from "@/components/assistant-ui/thread";
import { useChatRuntime } from "@assistant-ui/react-ai-sdk";
import { AssistantRuntimeProvider } from "@assistant-ui/react";
import { ThreadList } from "@/components/assistant-ui/thread-list";

export default function Home() {
  // Point the runtime to the Mastra server endpoint
  const runtime = useChatRuntime({
    api: "http://localhost:4111/api/agents/chefAgent/stream",
  });

  return (
    <AssistantRuntimeProvider runtime={runtime}>
      <main className="grid h-dvh grid-cols-[200px_1fr] gap-x-2 px-4 py-4">
        <ThreadList />
        <Thread />
      </main>
    </AssistantRuntimeProvider>
  );
}
```

Replace `"http://localhost:4111/api/agents/chefAgent/stream"` with the actual URL if your Mastra server runs on a different port or host, or if your agent has a different name.

Now, the Assistant UI frontend will send chat requests directly to your running Mastra server.

<Callout title="Delete Default API Route">
  Since the frontend no longer uses the local `/api/chat` route created by the
  `init` command, you can safely delete the `app/api/chat/route.ts` (or
  `src/app/api/chat/route.ts`) file from your frontend project.
</Callout>

</Step>

<Step>

### Run the Frontend Application

You're ready to connect the pieces! Make sure your separate Mastra server is still running (from Step 4).

In your Assistant UI frontend project directory, start the Next.js development server:

```bash npm2yarn
npm run dev
```

Open your browser to `http://localhost:3000` (or the port specified in your terminal for the frontend app). You should now be able to interact with your `chefAgent` through the Assistant UI chat interface. The frontend will make requests to your Mastra server running on `http://localhost:4111`.

</Step>

</Steps>

Congratulations! You have successfully integrated Mastra with Assistant UI using a separate server approach. Your Assistant UI frontend now communicates with a standalone Mastra agent server.

This setup provides a clear separation between your frontend and AI backend. To explore more advanced Mastra features like memory, tools, workflows, and deployment options, please refer to the [official Mastra documentation](https://mastra.ai/docs).



================================================
FILE: apps/docs/content/docs/ui/AssistantModal.mdx
================================================
---
title: AssistantModal
---

import { Steps, Step } from "fumadocs-ui/components/steps";
import { AssistantModalSample } from "../../../components/samples/assistant-modal-sample";

## Overview

A chat bubble shown in the bottom right corner of the screen. Useful for support or Q&A use cases.

<AssistantModalSample />


## Getting Started

<Steps>
  <Step>

### Add `assistant-modal`

```sh
npx shadcn@latest add "https://r.assistant-ui.com/assistant-modal"
```

This adds `/components/assistant-ui/assistant-modal.tsx` to your project, which you can adjust as needed.

  </Step>
  <Step>

### Use in your application

```tsx title="/app/page.tsx" {1,6}
import { AssistantModal } from "@/components/assistant-ui/assistant-modal";

export default function Home() {
  return (
    <div className="h-full">
      <AssistantModal />
    </div>
  );
}
```

  </Step>
</Steps>



================================================
FILE: apps/docs/content/docs/ui/AssistantSidebar.mdx
================================================
---
title: AssistantSidebar
---

import { Steps, Step } from "fumadocs-ui/components/steps";

## Overview

A chat sidebar show on the right side of the screen. Useful for co-pilot use cases.

## Getting Started

<Steps> 
  <Step>

### Add `assistant-sidebar`

```sh
npx shadcn@latest add "https://r.assistant-ui.com/assistant-sidebar"
```

This adds `/components/assistant-ui/assistant-sidebar.tsx` to your project, which you can adjust as needed.

  </Step>
  <Step>

### Use in your application

```tsx title="/app/page.tsx" {1,6}
import { AssistantSidebar } from "@/components/assistant-ui/assistant-sidebar";

export default function Home() {
  return (
    <div className="h-full">
      <AssistantSidebar>{/* your app */}</AssistantSidebar>
    </div>
  );
}
```

  </Step>
</Steps>



================================================
FILE: apps/docs/content/docs/ui/Attachment.mdx
================================================
---
title: Attachment
---

import { Steps, Step } from "fumadocs-ui/components/steps";
import { AttachmentSample } from "../../../components/samples/attachment-sample";
import { Callout } from "fumadocs-ui/components/callout";

## Overview

The Attachment components let the user attach files and view the attachments.

<AttachmentSample />

<Callout type="info">
  **Note:** These components provide the UI for attachments, but you also need
  to configure attachment adapters in your runtime to handle file uploads and
  processing. See the [Attachments Guide](/docs/guides/Attachments) for complete
  setup instructions.
</Callout>

## Getting Started

<Steps>
  <Step>

### Add `attachment`

```sh
npx shadcn@latest add "https://r.assistant-ui.com/attachment"
```

This adds a `/components/assistant-ui/attachment.tsx` file to your project, which you can adjust as needed.

  </Step>
  <Step>

### Use in your application

```tsx title="/components/assistant-ui/thread.tsx" {1-4,9-10}
import {
  ComposerAttachments,
  ComposerAddAttachment,
} from "@/components/assistant-ui/attachment";

const Composer: FC = () => {
  return (
    <ComposerPrimitive.Root className="...">
      <ComposerAttachments />
      <ComposerAddAttachment />

      <ComposerPrimitive.Input
        autoFocus
        placeholder="Write a message..."
        rows={1}
        className="..."
      />
      <ComposerAction />
    </ComposerPrimitive.Root>
  );
};
```

```tsx title="/components/assistant-ui/thread.tsx" {1,8}
import { UserMessageAttachments } from "@/components/assistant-ui/attachment";

const UserMessage: FC = () => {
  return (
    <MessagePrimitive.Root className="...">
      <UserActionBar />

      <UserMessageAttachments />

      <div className="...">
        <MessagePrimitive.Parts />
      </div>

      <BranchPicker className="..." />
    </MessagePrimitive.Root>
  );
};
```

  </Step>
</Steps>



================================================
FILE: apps/docs/content/docs/ui/Markdown.mdx
================================================
---
title: Markdown
---

Allow the assistant to display rich text using markdown.

import { Step, Steps } from "fumadocs-ui/components/steps";
import { Callout } from "fumadocs-ui/components/callout";

<Callout>
  Markdown support is already included by default in the `Thread` component.
</Callout>

## Enabling markdown support

<Steps>

<Step>
### Add `markdown-text`

```tsx
npx shadcn@latest add "https://r.assistant-ui.com/markdown-text"
```

This adds a `/components/assistant-ui/markdown-text.tsx` file to your project, which you can adjust as needed.

</Step>

<Step>

### Use it in your application

Pass the `MarkdownText` component to the `MessagePrimitive.Parts` component

```tsx twoslash title="/components/assistant-ui/thread.tsx" {1,11}
// @filename: /components/assistant-ui/markdown-text.tsx
import { FC } from "react";
export const MarkdownText: FC = () => null;

// @filename: ./thread.tsx
import { FC } from "react";
import { MessagePrimitive } from "@assistant-ui/react";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";

const AssistantActionBar: FC = () => null;
const BranchPicker: FC<{ className?: string }> = () => null;

// ---cut---
import { MarkdownText } from "@/components/assistant-ui/markdown-text";

const AssistantMessage: FC = () => {
  return (
    <MessagePrimitive.Root className="...">
      <div className="...">
        <MessagePrimitive.Parts components={{ Text: MarkdownText }} />
      </div>
      <AssistantActionBar />

      <BranchPicker className="..." />
    </MessagePrimitive.Root>
  );
};
```

</Step>

</Steps>

## Syntax highlighting

Syntax Highlighting is not included by default, see [Syntax Highlighting](/docs/ui/SyntaxHighlighting) to learn how to add it.



================================================
FILE: apps/docs/content/docs/ui/Mermaid.mdx
================================================
---
title: "Mermaid Diagrams"
---

import { Callout } from "fumadocs-ui/components/callout";
import { Step, Steps } from "fumadocs-ui/components/steps";

Render Mermaid diagrams in chat messages with the `mermaid-diagram` component.

<Steps>
  <Step>

### Add `mermaid-diagram` component

```bash
npx shadcn@latest add "https://r.assistant-ui.com/mermaid-diagram"
```

This will install the required dependencies and add the component to your project.

  </Step>
  <Step>

### Add it to `componentsByLanguage` in `markdown-text.tsx`

```tsx title="/components/assistant-ui/markdown-text.tsx"
import { MermaidDiagram } from "@/components/assistant-ui/mermaid-diagram"; // [!code ++]

const MarkdownTextImpl = () => {
  return (
    <MarkdownTextPrimitive
      remarkPlugins={[remarkGfm]}
      className="aui-md"
      components={defaultComponents}
      componentsByLanguage={{               // [!code ++]
        mermaid: {                          // [!code ++]
          SyntaxHighlighter: MermaidDiagram // [!code ++]
        },                                  // [!code ++]
      }}                                    // [!code ++]
    />
  );
};

export const MarkdownText = memo(MarkdownTextImpl);
```

  </Step>
</Steps>

## Configuration

Configure mermaid options in `mermaid-diagram.tsx`:

```tsx title="/components/assistant-ui/mermaid-diagram.tsx"
mermaid.initialize({ theme: "default" });
```

## Streaming Performance

The `MermaidDiagram` component is optimized for streaming scenarios:

- **Smart completion detection**: Only renders when the specific code block is complete
- **Zero failed renders**: Avoids parsing incomplete diagram code during streaming  


## Supported Diagram Types

Mermaid supports various diagram types including:

- Flowcharts and decision trees
- Sequence diagrams  
- Gantt charts
- Class diagrams
- State diagrams
- Git graphs
- User journey maps
- Entity relationship diagrams

See the [Mermaid documentation](https://mermaid.js.org/) for complete syntax reference.



================================================
FILE: apps/docs/content/docs/ui/meta.json
================================================
{
  "title": "shadcn/ui",
  "pages": [
    "Thread",
    "ThreadList",
    "Attachment",
    "AssistantModal",
    "AssistantSidebar",
    "Markdown",
    "Mermaid",
    "SyntaxHighlighting",
    "ToolFallback",
    "ToolGroup",
    "ParentIdGrouping",
    "Scrollbar"
  ]
}



================================================
FILE: apps/docs/content/docs/ui/ParentIdGrouping.mdx
================================================
---
title: Message Part Grouping
---

import { Steps, Step } from "fumadocs-ui/components/steps";
import { Callout } from "fumadocs-ui/components/callout";

## Overview

<Callout type="warn">
  This feature is experimental and the API may change in future versions.
</Callout>

The Parent ID Grouping feature allows you to group related message parts together by assigning them a common `parentId`. This is useful for organizing content hierarchically, such as grouping research sources with their findings, or organizing multi-step tool executions.

### Use it in your application

Use the `MessagePrimitive.Unstable_PartsGroupedByParentId` component instead of the regular `MessagePrimitive.Parts` component:

```tsx twoslash title="/components/assistant-ui/thread.tsx"
import { FC, PropsWithChildren } from "react";
import { MessagePrimitive } from "@assistant-ui/react";

const AssistantActionBar: FC = () => null;
const BranchPicker: FC<{ className?: string }> = () => null;

// ---cut---
const ParentIdGroup: FC<
  PropsWithChildren<{ parentId: string | undefined; indices: number[] }>
> = ({ parentId, indices, children }) => {
  if (!parentId) {
    // Ungrouped parts - render directly
    return <>{children}</>;
  }

  return (
    <div className="bg-muted/20 my-2 rounded-lg border p-4">
      <div className="mb-2 text-sm font-medium">
        Group: {parentId} ({indices.length} parts)
      </div>
      <div className="space-y-2">{children}</div>
    </div>
  );
};

const AssistantMessage: FC = () => {
  return (
    <MessagePrimitive.Root className="...">
      <div className="...">
        <MessagePrimitive.Unstable_PartsGroupedByParentId
          components={{ Group: ParentIdGroup }}
        />
      </div>
      <AssistantActionBar />

      <BranchPicker className="..." />
    </MessagePrimitive.Root>
  );
};
```

## How it works

1. **Message parts with parent IDs**: Add a `parentId` field to your message parts:

   ```typescript
   {
     type: "text",
     text: "Research finding about climate change",
     parentId: "climate-research"
   }
   ```

2. **Automatic grouping**: Parts with the same `parentId` are automatically grouped together

3. **Ordering**: Groups appear in the order of the first occurrence of each parent ID

4. **Ungrouped parts**: Parts without a `parentId` appear after all grouped parts

## Setting Parent IDs

### In Python (assistant-stream)

Use the `with_parent_id()` method on the RunController:

```python
from assistant_stream import create_run

async def my_run(controller):
    # Regular message part
    controller.append_text("Starting research...")

    # Grouped parts with parent ID
    research_controller = controller.with_parent_id("research-123")

    await research_controller.add_tool_call("search", {"query": "climate data"})
    research_controller.append_source({
        "id": "source-1",
        "url": "https://example.com/climate-data",
        "title": "Climate Data Report"
    })
    research_controller.append_text("Key findings from the research:")
    research_controller.append_text("• Global temperatures rising")
    research_controller.append_text("• Sea levels increasing")

    # Back to ungrouped content
    controller.append_text("In conclusion...")
```

### In TypeScript (assistant-stream)

Use the `withParentId()` method on the AssistantStreamController:

```typescript
import { createAssistantStream } from "@assistant-ui/react/assistant-stream";

const stream = createAssistantStream(async (controller) => {
  // Regular message part
  controller.appendText("Starting research...");

  // Grouped parts with parent ID
  const researchController = controller.withParentId("research-123");

  await researchController.addToolCallPart({
    toolName: "search",
    args: { query: "climate data" },
  });
  researchController.appendSource({
    type: "source",
    id: "source-1",
    url: "https://example.com/climate-data",
    title: "Climate Data Report",
  });
  researchController.appendText("Key findings from the research:");
  researchController.appendText("• Global temperatures rising");
  researchController.appendText("• Sea levels increasing");

  // Back to ungrouped content
  controller.appendText("In conclusion...");
});
```

### With External Store

When using the external store runtime, include the `parentId` in your message parts:

```typescript
const messages = [
  {
    role: "assistant",
    content: [
      {
        type: "text",
        text: "Let me search for information...",
      },
      {
        type: "tool-call",
        toolCallId: "call-1",
        toolName: "search",
        args: { query: "climate change" },
        parentId: "search-results",
      },
      {
        type: "source",
        sourceType: "url",
        id: "source-1",
        url: "https://example.com",
        title: "Climate Report",
        parentId: "search-results",
      },
      {
        type: "text",
        text: "Based on the search results:",
        parentId: "search-results",
      },
    ],
  },
];
```

## Props

The Group component receives the following props:

- `parentId`: The parent ID shared by all parts in this group (undefined for ungrouped parts)
- `indices`: Array of indices for the parts in this group
- `children`: The rendered message part components

## Examples

### Collapsible Research Groups

```tsx
import { useState } from "react";
import { ChevronDownIcon, ChevronUpIcon } from "lucide-react";

const CollapsibleGroup: FC<
  PropsWithChildren<{ parentId: string | undefined; indices: number[] }>
> = ({ parentId, indices, children }) => {
  const [isCollapsed, setIsCollapsed] = useState(false);

  if (!parentId) return <>{children}</>;

  return (
    <div className="my-2 overflow-hidden rounded-lg border">
      <button
        onClick={() => setIsCollapsed(!isCollapsed)}
        className="hover:bg-muted/50 flex w-full items-center justify-between p-3"
      >
        <span>Research Group ({indices.length} items)</span>
        {isCollapsed ? <ChevronDownIcon /> : <ChevronUpIcon />}
      </button>
      {!isCollapsed && <div className="border-t p-3">{children}</div>}
    </div>
  );
};
```

### Labeled Groups with Icons

```tsx
const LabeledGroup: FC<
  PropsWithChildren<{ parentId: string | undefined; indices: number[] }>
> = ({ parentId, indices, children }) => {
  if (!parentId) return <>{children}</>;

  const getGroupLabel = (id: string) => {
    if (id.includes("research")) return "🔍 Research";
    if (id.includes("analysis")) return "📊 Analysis";
    if (id.includes("summary")) return "📝 Summary";
    return "📁 " + id;
  };

  return (
    <div className="bg-muted/30 my-3 rounded-lg p-4">
      <h4 className="mb-2 text-sm font-semibold">{getGroupLabel(parentId)}</h4>
      <div className="space-y-2">{children}</div>
    </div>
  );
};
```

## Use Cases

Parent ID grouping is particularly useful for:

- **Research assistants**: Group sources, findings, and analysis together
- **Multi-step processes**: Organize related tool calls and their results
- **Hierarchical content**: Create nested or categorized information structures
- **Context preservation**: Keep related information visually connected



================================================
FILE: apps/docs/content/docs/ui/Scrollbar.mdx
================================================
---
title: Custom Scrollbar
---

If you want to show a custom scrollbar UI of the Thread.Viewport in place of the system default, you can integrate `@radix-ui/react-scroll-area`.
An example implementation of this is [shadcn/ui's Scroll Area](https://ui.shadcn.com/docs/components/scroll-area).

## Add shadcn Scroll Area

```sh
npx shadcn@latest add scroll-area
```

### @radix-ui/react-scroll-area v1.2.0 release candidate required

The v1.2.0-rc.x release candidate can be installed via

```sh
pnpm add @radix-ui/react-scroll-area@next
```

## Additional Styles

The Radix UI Viewport component adds an intermediate `<div data-radix-scroll-area-content>` element.
Add the following CSS to your `globals.css`:

```css title="@/app/globals.css"
.thread-viewport > [data-radix-scroll-area-content] {
  @apply flex flex-col items-center self-stretch bg-inherit;
}
```

## Integration

- Wrap `Thread.Root` with `<ScrollAreaPrimitive.Root asChild>`
- Wrap `Thread.Viewport` with `<ScrollAreaPrimitive.Viewport className="thread-viewport" asChild>`
- Add shadcn's `<ScrollBar />` to `Thread.Root`

The resulting MyThread component should look like this:

```tsx {1-2,6,8,12-13,15}
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area";
import { ScrollBar } from "@/components/ui/scroll-area";

const MyThread: FC = () => {
  return (
    <ScrollAreaPrimitive.Root asChild>
      <ThreadPrimitive.Root className="...">
        <ScrollAreaPrimitive.Viewport className="thread-viewport" asChild>
          <ThreadPrimitive.Viewport className="...">
            ...
          </ThreadPrimitive.Viewport>
        </ScrollAreaPrimitive.Viewport>
        <ScrollBar />
      </ThreadPrimitive.Root>
    </ScrollAreaPrimitive.Root>
  );
};
```



================================================
FILE: apps/docs/content/docs/ui/SyntaxHighlighting.mdx
================================================
---
title: Syntax Highlighting
---

import { Steps, Step } from "fumadocs-ui/components/steps";
import { Callout } from "fumadocs-ui/components/callout";
import { TypeTable } from "fumadocs-ui/components/type-table";

Syntax highlighting for code blocks in markdown.

<Callout type="warn">Syntax highlighting is not enabled in markdown by default.</Callout>

<Callout type="info">
  `assistant-ui` provides two options for syntax highlighting: 
  - **react-shiki** (recommended for performance & dynamic language support)
  - **react-syntax-highlighter** (legacy - Prism or Highlight.js based)
</Callout>

---

## react-shiki

<Steps>
  <Step>

#### Add `shiki-highlighter`

```bash
npx shadcn@latest add "https://r.assistant-ui.com/shiki-highlighter"
```

This adds a `/components/assistant-ui/shiki-highlighter.tsx` file to your project and
installs the `react-shiki` dependency. The highlighter can be customized by editing
the config in the `shiki-highlighter.tsx` file.

  </Step>
  <Step>

#### Add it to `defaultComponents` in `markdown-text.tsx`

```tsx title="/components/assistant-ui/markdown-text.tsx"
import { SyntaxHighlighter } from "./shiki-highlighter";

export const defaultComponents = memoizeMarkdownComponents({
  SyntaxHighlighter: SyntaxHighlighter, // [!code ++]
  h1: /* ... */,
  // ...other elements...
});
```

  </Step>
</Steps>

### Options

<TypeTable
  type={Object.fromEntries(
    Object.entries({
      theme: {
        description:
          "Shiki built-in or custom textmate themes. Accepts a single theme or an object of themes mapped to theme mode strings.",
        type: "Theme | Themes",
        typeDescriptionLink:
          "https://github.com/AVGVSTVS96/react-shiki/blob/694433ef697c9791b3816cf94d12d571e8abbb3a/package/src/types.ts#L51",
        default: "github-dark",
        required: true,
      },
      language: {
        description:
          "Shiki built-in or custom textmate grammar object for highlighting",
        type: "Language (string | object)",
        typeDescriptionLink:
          "https://github.com/AVGVSTVS96/react-shiki/blob/694433ef697c9791b3816cf94d12d571e8abbb3a/package/src/types.ts#L24",
        default: "text",
        required: true,
      },
      as: {
        description: "The code block container element type",
        type: "React.ElementType",
        default: "pre",
      },
      className: {
        description: "Custom CSS classes for the code block container element",
        type: "string",
        default: "",
      },
      style: {
        description: "Inline styles for the code block container element",
        type: "React.CSSProperties",
        default: undefined,
      },
      delay: {
        description:
          "Delay in milliseconds between consecutive highlights, useful for streamed code responses.",
        type: "number",
        default: 0,
      },
      customLanguages: {
        description: "Custom languages to preload for highlighting",
        type: "Language[]",
        typeDescriptionLink:
          "https://github.com/AVGVSTVS96/react-shiki/blob/694433ef697c9791b3816cf94d12d571e8abbb3a/package/src/types.ts#L24",
        default: "",
      },
      codeToHastOptions: {
        description: "All other options supported by Shiki's `codeToHast`",
        type: "CodeToHastOptions",
        typeDescriptionLink:
          "https://github.com/shikijs/shiki/blob/main/packages/types/src/options.ts#L121",
        default: "{}",
        required: true,
      },
      // This reverts the order of the type table, fumadocs reversed the order on 4/22/25 in:
      // https://github.com/fuma-nama/fumadocs/commit/3a5595aa65acfa5c20be2377d09c03fbb1de72a6
    }).reverse(),
  )}
/>

### Bundle Optimization

By default, `react-shiki` includes the full Shiki bundle, which contains all supported languages and themes.

To reduce bundle size, you can use the web bundle by changing the import to `react-shiki/web`, to include a smaller bundle of web related languages:

```tsx title="/components/assistant-ui/shiki-highlighter.tsx"
import ShikiHighlighter, { type ShikiHighlighterProps } from "react-shiki/web";
```

#### Custom Bundles

For strict bundle size control, `react-shiki` also supports custom bundles created using `createHighlighterCore` from `react-shiki/core` (re-exported from Shiki):

```tsx title="/components/assistant-ui/shiki-highlighter.tsx" {3-9}
import { createHighlighterCore, createOnigurumaEngine } from "react-shiki/core"; // [!code ++]

// Create the highlighter
// Use dynamic imports to load languages and themes on client on demand
const customHighlighter = await createHighlighterCore({
  themes: [import("@shikijs/themes/nord")],
  langs: [
    import("@shikijs/langs/javascript"),
    import("@shikijs/langs/typescript"),
  ],
  engine: createOnigurumaEngine(import("shiki/wasm")), 
});

// Then pass it to the highlighter prop
<SyntaxHighlighter
  {...props}
  language={language}
  theme={theme}
  highlighter={customHighlighter} // [!code ++]
/>;
```

<Callout type="info">
  For more information, see [react-shiki - bundle options](https://github.com/avgvstvs96/react-shiki#bundle-options).
</Callout>

### Dual/multi theme support

To use multiple theme modes, pass an object with your multi-theme configuration to the `theme` prop in the `ShikiHighlighter` component:

```tsx title="/components/assistant-ui/shiki-highlighter.tsx"
<ShikiHighlighter
  /* ... */
  theme={{
    light: "github-light",
    dark: "github-dark",
  }}
  /* ... */
>
```

To make themes responsive to your site's theme mode, add one of the following CSS snippets to your project:

```css title="shiki.css"
/* for class based dark mode */
html.dark .shiki,
html.dark .shiki span {
  color: var(--shiki-dark) !important;
  background-color: var(--shiki-dark-bg) !important;
  /* Optional, if you also want font styles */
  font-style: var(--shiki-dark-font-style) !important;
  font-weight: var(--shiki-dark-font-weight) !important;
  text-decoration: var(--shiki-dark-text-decoration) !important;
}

/* for query based dark mode */
@media (prefers-color-scheme: dark) {
  .shiki,
  .shiki span {
    color: var(--shiki-dark) !important;
    background-color: var(--shiki-dark-bg) !important;
    /* Optional, if you also want font styles */
    font-style: var(--shiki-dark-font-style) !important;
    font-weight: var(--shiki-dark-font-weight) !important;
    text-decoration: var(--shiki-dark-text-decoration) !important;
  }
}
```

For more information, see [Shiki's documentation on dual and multi themes](https://shiki.style/guide/dual-themes).

---

## react-syntax-highlighter

<Callout type="warn">
  This option may be removed in a future release. Consider using
  [react-shiki](#react-shiki) instead.
</Callout>

<Steps>
  <Step>

#### Add `syntax-highlighter`

```bash
npx shadcn@latest add "https://r.assistant-ui.com/syntax-highlighter"
```

    Adds a `/components/assistant-ui/syntax-highlighter.tsx` file to your project and installs the `react-syntax-highlighter` dependency.

  </Step>
  <Step>

#### Add it to `defaultComponents` in `markdown-text.tsx`

```tsx title="/components/assistant-ui/markdown-text.tsx"
import { SyntaxHighlighter } from "./syntax-highlighter";

export const defaultComponents = memoizeMarkdownComponents({
  SyntaxHighlighter: SyntaxHighlighter, // [!code ++]
  h1: /* ... */,
  // ...other elements...
});
```

  </Step>
</Steps>

### Options

Supports all options from [`react-syntax-highlighter`](https://github.com/react-syntax-highlighter/react-syntax-highlighter#props).

### Bundle Optimization

By default, the syntax highlighter uses a light build that only includes languages you register. To include all languages:

```tsx title="/components/assistant-ui/syntax-highlighter.tsx"
import { makePrismAsyncSyntaxHighlighter } from "@assistant-ui/react-syntax-highlighter/full";
```



================================================
FILE: apps/docs/content/docs/ui/Thread.mdx
================================================
---
title: Thread
---

import { Steps, Step } from "fumadocs-ui/components/steps";
import { Callout } from "fumadocs-ui/components/callout";
import { ThreadSample } from "../../../components/samples/thread-sample";


## Overview

The raw message list and message composer UI.

<ThreadSample />

## Getting Started

<Steps>
  <Step>

### Add `thread`

```sh
npx shadcn@latest add "https://r.assistant-ui.com/thread"
```

This adds a `/components/assistant-ui/thread.tsx` file to your project, which you can adjust as needed.

  </Step>
  <Step>

### Use in your application

```tsx title="/app/page.tsx" {1,6}
import { Thread } from "@/components/assistant-ui/thread";

export default function Home() {
  return (
    <div className="h-full">
      <Thread />
    </div>
  );
}
```

  </Step>
</Steps>



================================================
FILE: apps/docs/content/docs/ui/ThreadList.mdx
================================================
---
title: ThreadList
---

import { Steps, Step } from "fumadocs-ui/components/steps";
import { ThreadListSample } from "../../../components/samples/threadlist-sample";

## Overview

The ThreadList component lets the user switch between threads.

<ThreadListSample />

## Getting Started

<Steps>
  <Step>

### Add `thread-list`

```sh
npx shadcn@latest add "https://r.assistant-ui.com/thread-list"
```

This adds a `/components/assistant-ui/thread-list.tsx` file to your project, which you can adjust as needed.

  </Step>
  <Step>

### Use in your application

```tsx title="/app/page.tsx" {1,5-6}
import { Thread } from "@/components/assistant-ui/thread";
import { ThreadList } from "@/components/assistant-ui/thread-list";

export default function Home() {
  return (
    <div className="grid h-full grid-cols-[200px_1fr]">
      <ThreadList />
      <Thread />
    </div>
  );
}
```

  </Step>
</Steps>





================================================
FILE: apps/docs/content/docs/ui/ToolFallback.mdx
================================================
---
title: ToolFallback
---

import { Steps, Step } from "fumadocs-ui/components/steps";

## Overview

The ToolFallback component displays a default ToolUI for tools that do not have a dedicated ToolUI.

## Getting Started

<Steps>
  <Step>

### Add `tool-fallback`

```sh
npx shadcn@latest add "https://r.assistant-ui.com/tool-fallback"
```

This adds a `/components/assistant-ui/tool-fallback.tsx` file to your project, which you can adjust as needed.

  </Step>
  <Step>

### Use it in your application

Pass the `ToolFallback` component to the `MessagePrimitive.Parts` component

```tsx twoslash title="/components/assistant-ui/thread.tsx" {1,11}
// @filename: /components/assistant-ui/tool-fallback.tsx
import { FC } from "react";
export const ToolFallback: FC = () => null;

// @filename: ./thread.tsx
import { FC } from "react";
import { MessagePrimitive } from "@assistant-ui/react";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";

const AssistantActionBar: FC = () => null;
const BranchPicker: FC<{ className?: string }> = () => null;

// ---cut---
import { ToolFallback } from "@/components/assistant-ui/tool-fallback";

const AssistantMessage: FC = () => {
  return (
    <MessagePrimitive.Root className="...">
      <div className="...">
        <MessagePrimitive.Parts
          components={{ tools: { Fallback: ToolFallback } }}
        />
      </div>
      <AssistantActionBar />

      <BranchPicker className="..." />
    </MessagePrimitive.Root>
  );
};
```

  </Step>
</Steps>



================================================
FILE: apps/docs/content/docs/ui/ToolGroup.mdx
================================================
---
title: ToolGroup
---

import { Steps, Step } from "fumadocs-ui/components/steps";

## Overview

The ToolGroup component wraps consecutive tool-call message parts, enabling you to create custom presentations for grouped tool calls such as collapsible sections and custom styling.

### Use it in your application

Pass the `ToolGroup` component to the `MessagePrimitive.Parts` component

```tsx twoslash title="/components/assistant-ui/thread.tsx"
import { FC, PropsWithChildren } from "react";
import { MessagePrimitive } from "@assistant-ui/react";

const AssistantActionBar: FC = () => null;
const BranchPicker: FC<{ className?: string }> = () => null;

// ---cut---
const ToolGroup: FC<
  PropsWithChildren<{ startIndex: number; endIndex: number }>
> = ({ startIndex, endIndex, children }) => {
  const toolCount = endIndex - startIndex + 1;

  return (
    <details className="my-2">
      <summary className="cursor-pointer font-medium">
        {toolCount} tool {toolCount === 1 ? "call" : "calls"}
      </summary>
      <div className="space-y-2 pl-4">{children}</div>
    </details>
  );
};

const AssistantMessage: FC = () => {
  return (
    <MessagePrimitive.Root className="...">
      <div className="...">
        <MessagePrimitive.Parts components={{ ToolGroup }} />
      </div>
      <AssistantActionBar />

      <BranchPicker className="..." />
    </MessagePrimitive.Root>
  );
};
```

## Props

The ToolGroup component receives the following props:

- `startIndex`: The index of the first tool call in the group
- `endIndex`: The index of the last tool call in the group
- `children`: The rendered tool call components

## Examples

### Collapsible Tool Group

```tsx
const ToolGroup: FC<
  PropsWithChildren<{ startIndex: number; endIndex: number }>
> = ({ startIndex, endIndex, children }) => {
  const toolCount = endIndex - startIndex + 1;

  return (
    <details className="my-2">
      <summary className="cursor-pointer font-medium">
        {toolCount} tool {toolCount === 1 ? "call" : "calls"}
      </summary>
      <div className="space-y-2 pl-4">{children}</div>
    </details>
  );
};
```

### Styled Tool Group with Header

```tsx
const ToolGroup: FC<
  PropsWithChildren<{ startIndex: number; endIndex: number }>
> = ({ startIndex, endIndex, children }) => {
  return (
    <div className="bg-muted/50 my-2 rounded-lg border p-4">
      <div className="text-muted-foreground mb-2 text-sm">
        Tool execution #{startIndex + 1}-{endIndex + 1}
      </div>
      <div className="space-y-2">{children}</div>
    </div>
  );
};
```



================================================
FILE: apps/docs/content/docs/ui/primitives/Thread.mdx
================================================
---
title: Thread
---

A conversation between a user and an assistant.

import { ParametersTable } from "@/components/docs";

## Anatomy

```tsx
import { ThreadPrimitive } from "@assistant-ui/react";

const Thread = () => (
  <ThreadPrimitive.Root>
    <ThreadPrimitive.Viewport>
      <ThreadPrimitive.Empty>...</ThreadPrimitive.Empty>
      <ThreadPrimitive.Messages components={...} />
    </ThreadPrimitive.Viewport>
    <Composer />
  </ThreadPrimitive.Root>
);
```

## API Reference

### Root

Contains all parts of the thread.

This primitive renders a `<div>` element unless `asChild` is set.

<ParametersTable
  type="ThreadPrimitiveRootProps"
  parameters={[
    {
      name: "asChild",
    },
  ]}
/>

### Viewport

The scrollable area containing all messages. Anchors scroll to the bottom as new messages are added.

This primitive renders a `<div>` element unless `asChild` is set.

<ParametersTable
  type="ThreadPrimitiveViewportProps"
  parameters={[
    {
      name: "asChild",
    },
    {
      name: "autoScroll",
      type: "boolean",
      default: "true",
      description:
        "Whether to automatically scroll to the bottom of the viewport when new messages are added while the viewport is was previously scrolled to the bottom.",
    },
  ]}
/>

### Messages

Renders all messages. This primitive renders a separate component for each message.

<ParametersTable
  type="ThreadPrimitiveMessagesProps"
  parameters={[
    {
      name: "components",
      type: "MessageComponents",
      description: "The component to render for each message.",
      children: [
        {
          type: "MessageComponents",
          parameters: [
            {
              name: "Message",
              type: "ComponentType",
              description: "The component to render for each message.",
            },
            {
              name: "UserMessage",
              type: "ComponentType",
              description: "The component to render for user messages.",
            },
            {
              name: "EditComposer",
              type: "ComponentType",
              description:
                "The component to render for user messages that are being edited.",
            },
            {
              name: "AssistantMessage",
              type: "ComponentType",
              description: "The component to render for assistant messages.",
            },
          ],
        },
      ],
    },
  ]}
/>

### Empty

Renders children only when there are no messages.

### ScrollToBottom

A button to scroll the viewport to the bottom. Disabled when the viewport is already at bottom.

This primitive renders a `<button>` element unless `asChild` is set.

<ParametersTable
  type="ThreadPrimitiveScrollToBottomProps"
  parameters={[
    {
      name: "asChild",
    },
  ]}
/>

### `ThreadPrimitive.Suggestion`

Shows a suggestion to the user. When the user clicks on the suggestion, the composer's value is set to the suggestion's prompt.

This primitive renders a `<button>` element unless `asChild` is set.

```tsx
import { ThreadPrimitive } from "@assistant-ui/react";

const Suggestion = () => {
  return (
    <ThreadPrimitive.Suggestion
      prompt="I need help with product search"
      method="replace"
      autoSend
    />
  );
};
```

<ParametersTable
  type="ThreadPrimitiveSuggestionProps"
  parameters={[
    {
      name: "prompt",
      type: "string",
      description: "The suggestion's prompt.",
    },
    {
      name: "method",
      type: "'replace'",
      description:
        "How does the suggestion interact with the composer's existing value.",
    },
    {
      name: "autoSend",
      type: "boolean",
      description:
        "Whether to automatically send the suggestion when the user clicks on it.",
      default: "false",
    },
  ]}
/>

### If

Renders children if a condition is met.

<ParametersTable
  type="ThreadPrimitiveIfProps"
  parameters={[
    {
      name: "empty",
      type: "boolean | undefined",
      description: "Render children if the thread is empty.",
    },
    {
      name: "running",
      type: "boolean | undefined",
      description: "Render children if the thread is running.",
    },
  ]}
/>

```tsx
<Thread.If empty>
  {/* equivalent to <Thread.Empty> */}
</Thread.If>
<Thread.If empty={false}>
  {/* rendered if thread is not empty */}
</Thread.If>
```



================================================
FILE: apps/docs/content/types-to-generate/typeDocs.ts
================================================
import {
  AssistantRuntimeProvider,
  MessagePartState,
} from "@assistant-ui/react";
import { ComponentPropsWithRef } from "react";

export type AssistantRuntimeProvider = ComponentPropsWithRef<
  typeof AssistantRuntimeProvider
>;

export type {
  AssistantRuntime,
  AssistantToolUIsState,
  EditComposerState,
  ThreadListRuntime,
  ThreadListState,
  ThreadListItemRuntime,
  ThreadListItemState,
  ThreadRuntime,
  ThreadState,
  MessageRuntime,
  MessageState,
  MessagePartRuntime,
  ComposerRuntime,
  ThreadComposerRuntime,
  ComposerState,
  AttachmentRuntime,
  AttachmentState,
  ThreadComposerState,
} from "@assistant-ui/react";

export type TextMessagePartState = MessagePartState & { readonly type: "text" };
export type AudioMessagePartState = MessagePartState & {
  readonly type: "audio";
};
export type ImageMessagePartState = MessagePartState & {
  readonly type: "image";
};
export type SourceMessagePartState = MessagePartState & {
  readonly type: "source";
};
export type FileMessagePartState = MessagePartState & {
  readonly type: "file";
};
export type ToolCallMessagePartState = MessagePartState & {
  readonly type: "tool-call";
};



================================================
FILE: apps/docs/lib/get-llm-text.ts
================================================
import { remark } from "remark";
import remarkGfm from "remark-gfm";
import remarkMdx from "remark-mdx";
import { remarkInclude } from "fumadocs-mdx/config";
import { source } from "@/app/source";
import type { InferPageType } from "fumadocs-core/source";

const processor = remark().use(remarkMdx).use(remarkInclude).use(remarkGfm);

export async function getLLMText(page: InferPageType<typeof source>) {
  const processed = await processor.process({
    path: page.path,
    value: page.data.content,
  });

  return `# ${page.data.title}
URL: ${page.url}
${page.data.description ? `\n${page.data.description}\n` : ""}
${processed.value}`;
}



================================================
FILE: apps/docs/lib/useMediaQuery.ts
================================================
import { useCallback, useSyncExternalStore } from "react";

export function useMediaQuery(query: string): boolean {
  const getSnapshot = useCallback(() => {
    if (typeof window === "undefined") return false;
    return window.matchMedia(query).matches;
  }, [query]);

  const subscribe = useCallback(
    (callback: () => void) => {
      if (typeof window === "undefined") return () => {};
      const mediaQueryList = window.matchMedia(query);

      if (mediaQueryList.addEventListener) {
        mediaQueryList.addEventListener("change", callback);
      } else {
        mediaQueryList.addListener(callback);
      }

      return () => {
        if (mediaQueryList.removeEventListener) {
          mediaQueryList.removeEventListener("change", callback);
        } else {
          mediaQueryList.removeListener(callback);
        }
      };
    },
    [query],
  );

  return useSyncExternalStore(subscribe, getSnapshot, () => false);
}



================================================
FILE: apps/docs/lib/utils.ts
================================================
import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}



================================================
FILE: apps/docs/scripts/generate-docs.mts
================================================
import {
  Project,
  Node,
  InterfaceDeclaration,
  TypeAliasDeclaration,
} from "ts-morph";
import * as fs from "fs";

const project = new Project({
  tsConfigFilePath: "tsconfig.json",
});

// Add the source file
const sourceFile = project.addSourceFileAtPath(
  "./content/types-to-generate/typeDocs.ts",
);

const types: { [key: string]: any } = {};
sourceFile.getExportedDeclarations().forEach((declarations, name) => {
  declarations.forEach((declaration) => {
    // Resolve the actual declaration if it's an alias
    declaration = resolveAliasedDeclaration(declaration);

    // Process interfaces and types
    if (
      Node.isInterfaceDeclaration(declaration) ||
      Node.isTypeAliasDeclaration(declaration)
    ) {
      const typeInfo = processTypeOrInterface(declaration, name);
      types[name] = typeInfo;
    }
  });
});

const typesSrc = Object.entries(types)
  .map(([name, type]) => {
    return `export const ${name} = ${JSON.stringify(type, null, 2)};\n`;
  })
  .join("\n");

fs.mkdirSync("./generated", { recursive: true });
fs.writeFileSync("./generated/typeDocs.ts", typesSrc);

// Function to resolve aliased declarations
function resolveAliasedDeclaration(declaration: any) {
  if (Node.isExportSpecifier(declaration)) {
    const symbol = declaration.getSymbol();
    if (symbol) {
      const aliasedSymbol = symbol.getAliasedSymbol();
      if (aliasedSymbol) {
        const declarations = aliasedSymbol.getDeclarations();
        if (declarations.length > 0) {
          return declarations[0];
        }
      }
    }
  }
  return declaration;
}

// Function to process type or interface
function processTypeOrInterface(
  declaration: InterfaceDeclaration | TypeAliasDeclaration,
  typeName: string,
) {
  const type = declaration.getType();
  const properties = getPropertiesFromType(type);

  return {
    type: typeName,
    parameters: properties,
  };
}

function getPropertiesFromType(type: any) {
  const properties = type.getProperties();

  return properties.map((prop: any) => {
    const declarations = prop.getDeclarations();
    const decl = declarations[0];
    const propType = prop.getTypeAtLocation(decl).getText();
    const cleanType = cleanTypeText(propType);
    const jsDocs = decl.getJsDocs();
    const description = jsDocs.map((doc: any) => doc.getComment()).join("\n");
    const required = !decl.hasQuestionToken();
    const param: any = {
      name: prop.getName(),
      type: cleanType,
    };

    if (required) {
      param.required = true;
    }

    if (description) {
      param.description = description;
    }

    return param;
  });
}

function cleanTypeText(typeText: string): string {
  return typeText.replace(/import\(".*?"\)\./g, "");
}


